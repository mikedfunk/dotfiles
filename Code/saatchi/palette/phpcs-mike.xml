<?xml version="1.0"?>
<!-- vim:set sw=2 ts=2 et: -->
<ruleset name="Mike's Palette Coding Standard">

  <description>Mike's more strict, experimental version of the Saatchi Art Coding Standard (phpcs v3.5.2 as of 11-25-2019)</description>

  <!-- NOTE this can only be declared once!! if you do it multiple times it will override the previous one. comma-delimited. -->
  <!-- <config name="installed_paths" value="/Users/mikefunk/.phpenv/versions/7.0.33/composer/global/slevomat/coding-standard/vendor/slevomat/coding-standard,/Users/mikefunk/.phpenv/versions/7.0.33/composer/global/sirbrillig/phpcs-variable-analysis/vendor/sirbrillig/phpcs-variable-analysis" /> -->

  <!-- ensure php code is compatible with this version -->
  <config name="testVersion" value="7.0" />

  <!-- wtf? it's called PHP code sniffer. -->
  <arg name="extensions" value="php" />

  <arg name="colors" />

  <ini name="memory_limit" value="1024M"/>

  <!-- Files or directories to check -->
  <!-- <file>.</file> -->

  <!-- Path to strip from the front of file paths inside reports (displays shorter paths) -->
  <arg name="basepath" value="." />

  <exclude-pattern>vendor/*</exclude-pattern>
  <!-- <exclude-pattern>tests/*</exclude-pattern> -->
  <!-- <exclude-pattern>spec/*</exclude-pattern> -->
  <exclude-pattern>coverage/*</exclude-pattern>
  <exclude-pattern>resources/views*</exclude-pattern>
  <exclude-pattern>bootstrap/cache</exclude-pattern>
  <exclude-pattern>composer.phar</exclude-pattern>
  <exclude-pattern>tags</exclude-pattern>
  <exclude-pattern>_ide_helper.php</exclude-pattern>
  <exclude-pattern>storage/*</exclude-pattern>
  <!-- <exclude-pattern>app/Console/Commands/OneTimers/*</exclude-pattern> -->

  <!-- begin Generic -->
  <rule ref="Generic">
    <exclude name="Generic.Arrays.DisallowShortArraySyntax" />
    <exclude name="Generic.Classes.OpeningBraceSameLine" />
    <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch" />
    <exclude name="Generic.Commenting.DocComment" />
    <exclude name="Generic.Commenting.Todo" />
    <exclude name="Generic.Files.EndFileNoNewline" />
    <exclude name="Generic.Files.LowercasedFilename" />
    <exclude name="Generic.Formatting.MultipleStatementAlignment" />
    <exclude name="Generic.Formatting.NoSpaceAfterCast" />
    <exclude name="Generic.Formatting.SpaceAfterNot" />
    <exclude name="Generic.Formatting.SpaceBeforeCast" />
    <exclude name="Generic.Functions.FunctionCallArgumentSpacing.NoSpaceAfterComma" />
    <exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman" />
    <exclude name="Generic.Functions.OpeningFunctionBraceKernighanRitchie" />
    <exclude name="Generic.PHP.ClosingPHPTag" />
    <exclude name="Generic.PHP.RequireStrictTypes.MissingDeclaration" /><!-- overlaps with slevomat which is fixable -->
    <exclude name="Generic.PHP.UpperCaseConstant" />
    <exclude name="Generic.WhiteSpace.DisallowSpaceIndent" />
  </rule>

  <!-- Disabling to work with Sergey's if (! $myvar) or if ( ! $myVar) style -->
  <rule ref="Generic.Formatting.SpaceAfterNot">
    <properties>
      <property name="spacing" value="0" />
    </properties>
  </rule>

  <rule ref="Generic.Strings.UnnecessaryStringConcat">
    <properties>
      <property name="allowMultiline" value="true" />
      <property name="error" value="false" /><!-- warning instead of error -->
    </properties>
  </rule>

  <rule ref="Generic.PHP.ForbiddenFunctions">
    <properties>
      <!-- this is set in order to remove is_null from forbidden functions -->
      <property name="forbiddenFunctions" type="array" value="sizeof=>count,delete=>unset,print=>echo" />
      <property name="error" value="false" />
    </properties>
  </rule>

  <!-- <rule ref="Generic.PHP.DiscouragedFunctions"> -->
  <!--   <properties> -->
  <!--     <property name="forbiddenFunctions" type="array" value="error_log=>null,print_r=>null,var_dump=>null" /> -->
  <!--   </properties> -->
  <!-- </rule> -->

  <rule ref="Generic.NamingConventions.CamelCapsFunctionName.ScopeNotCamelCaps">
    <exclude-pattern>spec/*</exclude-pattern>
  </rule>

  <rule ref="Generic.PHP.ForbiddenFunctions">
    <properties>
      <property name="forbiddenFunctions" type="array" value="sizeof=>count,delete=>unset,print=>echo" /><!-- this is set in order to remove is_null from forbidden functions, but it doesn't work. -->
      <property name="error" value="false" />
    </properties>
  </rule>
  <!-- end Generic -->

  <!-- begin MySource -->
  <rule ref="MySource">
    <rule ref="Squiz.Strings.ConcatenationSpacing">
      <properties>
        <property name="ignoreNewlines" value="true" />
        <property name="spacing" value="1" />
      </properties>
    </rule>
    <exclude name="MySource.CSS.BrowserSpecificStyles" />
    <exclude name="MySource.Channels.DisallowSelfActions" />
    <exclude name="MySource.Channels.IncludeOwnSystem" />
    <exclude name="MySource.Channels.IncludeSystem" />
    <exclude name="MySource.Channels.UnusedSystem" />
    <exclude name="MySource.Commenting.FunctionComment" />
    <exclude name="MySource.Debug.DebugCode" />
    <exclude name="MySource.Debug.FirebugConsole" />
    <exclude name="MySource.Objects.AssignThis" />
    <exclude name="MySource.Objects.CreateWidgetTypeCallback" />
    <exclude name="MySource.Objects.DisallowNewWidget" />
    <exclude name="MySource.PHP.ReturnFunctionValue.NotAssigned" />
    <exclude name="MySource.Strings.JoinStrings" />
  </rule>
  <!-- end MySource -->

  <!-- begin PEAR -->
  <rule ref="PEAR">
    <exclude name="PEAR.Functions.FunctionCallSignature" />
    <exclude name="PEAR.NamingConventions.ValidVariableName" />
    <exclude name="PEAR.NamingConventions.ValidFunctionName" />
    <exclude name="Generic.Files.LineLength" />
    <exclude name="PEAR.Commenting.FileComment" />
    <exclude name="PEAR.Commenting.ClassComment" />
    <exclude name="PEAR.Commenting.FunctionComment" />
    <exclude name="PEAR.WhiteSpace.ObjectOperatorIndent" />
    <exclude name="PEAR.WhiteSpace.ScopeIndent" />
    <exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket" />
    <exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine" />
    <exclude name="PEAR.Formatting.MultiLineAssignment.EqualSignLine" />
  </rule>
  <!-- end PEAR -->

  <!-- begin PSR1 -->
  <rule ref="PSR1">
  </rule>
  <rule ref="PSR1.Methods.CamelCapsMethodName.NotCamelCaps">
    <exclude-pattern>spec/*</exclude-pattern>
  </rule>
  <!-- end PSR1 -->

  <!-- begin PSR2 -->
  <rule ref="PSR2" />
  <!-- end PSR2 -->

  <!-- begin PSR12 -->
  <rule ref="PSR12">
    <!-- constant visibility is not yet available in php 7.0 -->
    <exclude name="PSR12.Properties.ConstantVisibility.NotFound" />
  </rule>
  <!-- end PSR12 -->

  <!-- begin Squiz -->
  <rule ref="Squiz">
    <!-- <exclude name="Squiz.Commenting.FunctionCommentThrowTag.Missing" /> --><!-- this is a great rule but it doesn't respect {@inheritDoc} :( -->
    <!-- <exclude name="Squiz.PHP.CommentedOutCode" /> -->
    <exclude name="Generic.ControlStructures.DisallowYodaConditions" />
    <exclude name="Squiz.Arrays.ArrayDeclaration" />
    <exclude name="Squiz.Commenting.BlockComment" />
    <exclude name="Squiz.Commenting.ClassComment" />
    <exclude name="Squiz.Commenting.ClosingDeclarationComment" />
    <exclude name="Squiz.Commenting.FileComment" />
    <exclude name="Squiz.Commenting.FunctionComment" />
    <exclude name="Squiz.Commenting.InlineComment" />
    <exclude name="Squiz.Commenting.LongConditionClosingComment" />
    <exclude name="Squiz.Commenting.PostStatementComment.Found" />
    <exclude name="Squiz.Commenting.VariableComment" />
    <exclude name="Squiz.ControlStructures.ElseIfDeclaration" />
    <exclude name="Squiz.ControlStructures.InlineIfDeclaration" />
    <exclude name="Squiz.ControlStructures.SwitchDeclaration.BreakIndent" />
    <exclude name="Squiz.Files.FileExtension" />
    <exclude name="Squiz.Formatting.OperatorBracket" /><!-- this doesn't take into account ?? >:( -->
    <exclude name="Squiz.NamingConventions.ValidVariableName.NotCamelCaps" /><!-- this rule does not allow even \stdClass->my_var, which is fine -->
    <exclude name="Squiz.Objects.ObjectInstantiation" />
    <exclude name="Squiz.Operators.ComparisonOperatorUsage" />
    <exclude name="Squiz.PHP.DisallowBooleanStatement" />
    <exclude name="Squiz.PHP.DisallowComparisonAssignment" />
    <exclude name="Squiz.PHP.DisallowInlineIf" />
    <exclude name="Squiz.PHP.DisallowMultipleAssignments" />
    <exclude name="Squiz.Strings.DoubleQuoteUsage" />
    <exclude name="Squiz.WhiteSpace.FunctionClosingBraceSpace.SpacingBeforeClose" /><!-- this conflicts with Mike's multiline ternary style -->
    <exclude name="Squiz.WhiteSpace.MemberVarSpacing" />
    <exclude name="Squiz.WhiteSpace.ObjectOperatorSpacing" />
  </rule>
  <!-- end Squiz -->

  <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
    <properties>
      <property name="spacingBeforeFirst" value="0" />
    </properties>
  </rule>

  <rule ref="Squiz.NamingConventions.ValidFunctionName.ScopeNotCamelCaps">
    <exclude-pattern>spec/*</exclude-pattern>
  </rule>

  <rule ref="Squiz.WhiteSpace.FunctionSpacing">
    <properties>
      <property name="spacing" value="1" />
      <property name="spacingBeforeFirst" value="0" />
      <property name="spacingAfterLast" value="0" />
    </properties>
  </rule>

  <rule ref="Squiz.Strings.ConcatenationSpacing">
    <properties>
      <property name="ignoreNewlines" value="true" />
      <property name="spacing" value="1" />
    </properties>
  </rule>

  <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
    <properties>
      <property name="ignoreNewlines" value="true" />
    </properties>
  </rule>

  <rule ref="Squiz.WhiteSpace.OperatorSpacing">
    <properties>
      <property name="ignoreNewlines" value="true" />
    </properties>
  </rule>

  <!-- start Zend -->
  <rule ref="Zend">
    <exclude name="Zend.NamingConventions.ValidVariableName" />
    <exclude name="Zend.Debug.CodeAnalyzer" />
  </rule>

  <!-- begin SlevomatCodingStandard -->
  <!-- NOTE: the last version that supported php 7.0 was slevomat v4.0.0, which is quite old. Upgrade when updating php! -->
  <!-- https://github.com/slevomat/coding-standard/tree/4.0.0 -->
  <rule ref="SlevomatCodingStandard">
    <exclude name="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly" />
    <exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison.RequiredYodaComparison" />
    <exclude name="SlevomatCodingStandard.Files.TypeNameMatchesFileName" />
    <exclude name="SlevomatCodingStandard.Files.TypeNameMatchesFileName" /><!-- doesn't respect relative basepath -->
    <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation" />
    <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions" />
    <exclude name="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly" />
    <exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces" />
    <exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces" />
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableParameterTypeHintSpecification" />
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableReturnTypeHintSpecification" />
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.UselessDocComment" />
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingParameterTypeHint" /><!-- This is broken in this version. Doesn't respect php 7.0 flag for nullable @params. -->
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingReturnTypeHint" /><!-- this is broken in this version. Doesn't know how to read generics. -->
    <exclude name="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison" />
    <exclude name="SlevomatCodingStandard.Classes.ClassConstantVisibility.MissingConstantVisibility" /><!-- not available in php 7.0 -->
    <exclude name="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue.NullabilitySymbolRequired" /><!-- not available in php 7.0 -->
    <exclude name="SlevomatCodingStandard.Classes.UnusedPrivateElements.UnusedMethod" /><!-- doesn't respect callables in array_map, etc. -->
  </rule>

  <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
    <properties>
      <property name="enableVoidTypeHint" value="0" />
      <property name="enableNullableTypeHints" value="0" />
    </properties>
  </rule>

  <rule ref="SlevomatCodingStandard.Types.EmptyLinesAroundTypeBraces">
    <properties>
      <property name="linesCountBeforeClosingBrace" value="0" />
      <property name="linesCountAfterOpeningBrace" value="0" />
    </properties>
  </rule>

  <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
    <properties>
      <property name="allowFullyQualifiedNameForCollidingClasses" value="true" />
      <property name="allowFullyQualifiedGlobalClasses" value="true" />
      <property name="allowFullyQualifiedExceptions" value="true" />
      <property name="allowFullyQualifiedGlobalFunctions" value="true" />
      <property name="allowFullyQualifiedGlobalConstants" value="true" />
    </properties>
  </rule>

  <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
    <properties>
      <property name="enableNullableTypeHints" value="false" />
      <property name="enableVoidTypeHint" value="false" />
      <property name="enableEachParameterAndReturnInspection" value="false" />
      <!-- <property name="enableEachParameterAndReturnInspection" value="true" /> -->
    </properties>
  </rule>

  <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
    <properties>
      <property name="newlinesCountBetweenOpenTagAndDeclare" value="2" />
      <property name="newlinesCountAfterDeclare" value = "2" />
      <property name="spacesCountAroundEqualsSign" value = "0" />
      <property name="spacesCountAroundEqualsSign" value="0" />
    </properties>
  </rule>
  <!-- end SlevomatCodingStandard -->

  <!-- compatible with this php version but not installed -->
  <!-- https://github.com/FloeDesignTechnologies/phpcs-security-audit readme reminds you that this was written 10 years ago, is prone to false positives, and is slow. issues are stale. -->
  <!-- https://github.com/joomla/coding-standards joomla standards are ugly -->
  <!-- https://github.com/Automattic/VIP-Coding-Standards these seem focused on wordpress -->
  <!-- https://github.com/humanmade/coding-standards: these are mostly based on wordpress and not easy to include -->
  <!-- https://github.com/object-calisthenics/phpcs-calisthenics-rules/tree/v2.0.1 TODO. Kind of hard to do as the docs for 2.0.1 don't have examples and it's the newest version that supports php 7.0 :( -->
  <!-- https://github.com/sirbrillig/phpcs-variable-analysis -->
  <!-- https://github.com/PHPCompatibility/PHPCompatibility -->
  <!-- https://github.com/Automattic/phpcs-neutron-standard -->

  <!-- Packages requiring php 7.1+ that look useful -->
  <!-- https://github.com/gskema/phpcs-type-sniff -->
  <!-- https://github.com/infinityloop-dev/coding-standard -->
  <!-- https://github.com/Rarst/phpcs-cognitive-complexity -->
  <!-- https://github.com/mayflower/mo4-coding-standard -->

  <!-- begin Inpsyde https://github.com/inpsyde/php-coding-standards -->
  <rule ref="Inpsyde">
    <exclude name="Inpsyde.CodeQuality.FunctionBodyStart.WrongForMultiLineDeclaration" />
    <exclude name="Inpsyde.CodeQuality.FunctionLength.TooLong" /><!-- also covered by phpmd rulesets/codesize.xml/ExcessiveMethodLength -->
    <exclude name="Inpsyde.CodeQuality.LineLength" />
    <exclude name="Inpsyde.CodeQuality.NoAccessors" />
    <exclude name="Inpsyde.CodeQuality.NoElse" /><!-- this is already covered by phpmd -->
    <exclude name="WordPress.Arrays.CommaAfterArrayItem.NoComma" /><!-- this is already covered by SlevomatCodingStandard.Arrays.TrailingArrayComma.MissingTrailingComma -->
  </rule>

  <rule ref="Inpsyde.CodeQuality.ElementNameMinimalLength">
    <properties>
      <property name="allowedShortNames" type="array" value="id,db,x,y,e,ip,i" />
    </properties>
  </rule>

  <rule ref="Inpsyde.CodeQuality.FunctionLength.TooLong">
    <exclude-pattern>spec/*</exclude-pattern>
  </rule>

  <rule ref="Inpsyde.CodeQuality.ArgumentTypeDeclaration">
    <exclude-pattern>spec/*</exclude-pattern>
  </rule>
  <!-- end Inpsyde -->

</ruleset>
