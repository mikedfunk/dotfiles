# vim: set foldmethod=marker:
# see https://github.com/shawncplus/phpcomplete.vim/wiki/Getting-better-tags
#
# general {{{
--recurse=yes
--tag-relative=yes
--sort=foldcase
--fields=+aimlS
# fixes double backslash in namespaces https://github.com/universal-ctags/ctags/issues/815
# BUT this breaks phpcomplete.vim omnicomplete! (as of 2018-03-21 still broken)
# It's not really a problem though - I can still complete namespaced classes,
# expand and import classes with vim-php-namespace
# --output-format=etags
# strangely this defaults to TAGS
-ftags
# WHY
--languages=-html
# }}}

# additional excludes {{{
--exclude=*.coffee
--exclude=*.log
--exclude=*.min.js
--exclude=.git
--exclude=.next/bundles
--exclude=.next/dist
--exclude=__TwigTemplate_*
--exclude=_ide_helper.php
--exclude=app/cache
--exclude=app/storage
--exclude=assets/react/node_modules
--exclude=bootstrap.php.cache
--exclude=classes.php.cache
--exclude=composer.phar
--exclude=*.spec.js
--exclude=__mocks__/*
--exclude=__snapshots__/*
--exclude=node_modules
--exclude=tests
--exclude=yarn-error.log
# }}}

# php {{{
# docs: https://github.com/universal-ctags/ctags/blob/master/parsers/php.c#L125-L142
# classes, functions, namespaces, interfaces, traits, variables
--PHP-kinds=cfnitv
# }}}
#
# ruby {{{
--regex-ruby=/(^|;)[ \t]*(class|module)[ \t]+([A-Z][[:alnum:]_]+(::[A-Z][[:alnum:]_]+)+)/\3/c,class,constant/
# }}}

# javascript {{{
# https://medium.com/adorableio/modern-javascript-ctags-configuration-199884dbcc1
# this doesn't work with kristijanhusak/vim-js-file-import
#
# --languages=-javascript
# --langdef=js
# --langmap=js:.js
# --langmap=js:+.jsx
# --regex-js=/[ \t.]([A-Z][A-Z0-9._$]+)[ \t]*[=:][ \t]*([0-9"'\[\{]|null)/\1/n,constant/
# --regex-js=/\.([A-Za-z0-9._$]+)[ \t]*=[ \t]*\{/\1/o,object/
# --regex-js=/['"]*([A-Za-z0-9_$]+)['"]*[ \t]*:[ \t]*\{/\1/o,object/
# --regex-js=/([A-Za-z0-9._$]+)\[["']([A-Za-z0-9_$]+)["']\][ \t]*=[ \t]*\{/\1\.\2/o,object/
# --regex-js=/([A-Za-z0-9._$]+)[ \t]*=[ \t]*\(function\(\)/\1/c,class/
# --regex-js=/['"]*([A-Za-z0-9_$]+)['"]*:[ \t]*\(function\(\)/\1/c,class/
# --regex-js=/class[ \t]+([A-Za-z0-9._$]+)[ \t]*/\1/c,class/
# --regex-js=/([A-Za-z$][A-Za-z0-9_$()]+)[ \t]*=[ \t]*[Rr]eact.createClass[ \t]*\(/\1/c,class/
# --regex-js=/([A-Z][A-Za-z0-9_$]+)[ \t]*=[ \t]*[A-Za-z0-9_$]*[ \t]*[{(]/\1/c,class/
# --regex-js=/([A-Z][A-Za-z0-9_$]+)[ \t]*:[ \t]*[A-Za-z0-9_$]*[ \t]*[{(]/\1/c,class/
# --regex-js=/([A-Za-z$][A-Za-z0-9_$]+)[ \t]*=[ \t]*function[ \t]*\(/\1/f,function/
# --regex-js=/(function)*[ \t]*([A-Za-z$_][A-Za-z0-9_$]+)[ \t]*\([^)]*\)[ \t]*\{/\2/f,function/
# --regex-js=/['"]*([A-Za-z$][A-Za-z0-9_$]+)['"]*:[ \t]*function[ \t]*\(/\1/m,method/
# --regex-js=/([A-Za-z0-9_$]+)\[["']([A-Za-z0-9_$]+)["']\][ \t]*=[ \t]*function[ \t]*\(/\2/m,method/

# --langdef=typescript
# --langmap=typescript:.ts
# --regex-typescript=/^[ \t]*(export)?[ \t]*class[ \t]+([a-zA-Z0-9_]+)/\2/c,classes/
# --regex-typescript=/^[ \t]*(export)?[ \t]*module[ \t]+([a-zA-Z0-9_]+)/\2/n,modules/
# --regex-typescript=/^[ \t]*(export)?[ \t]*function[ \t]+([a-zA-Z0-9_]+)/\2/f,functions/
# --regex-typescript=/^[ \t]*export[ \t]+var[ \t]+([a-zA-Z0-9_]+)/\1/v,variables/
# --regex-typescript=/^[ \t]*var[ \t]+([a-zA-Z0-9_]+)[ \t]*=[ \t]*function[ \t]*\(\)/\1/v,varlambdas/
# --regex-typescript=/^[ \t]*(export)?[ \t]*(public|private)[ \t]+(static)?[ \t]*([a-zA-Z0-9_]+)/\4/m,members/
# --regex-typescript=/^[ \t]*(export)?[ \t]*interface[ \t]+([a-zA-Z0-9_]+)/\2/i,interfaces/
# --regex-typescript=/^[ \t]*(export)?[ \t]*enum[ \t]+([a-zA-Z0-9_]+)/\2/e,enums/
# --regex-typescript=/^[ \t]*import[ \t]+([a-zA-Z0-9_]+)/\1/I,imports/

# https://github.com/romainl/ctags-patterns-for-javascript
# ^ doesn't work with universal ctags :/
# }}}
