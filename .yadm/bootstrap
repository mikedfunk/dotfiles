#!/bin/bash
# vim: set foldmethod=marker ft=sh:

# helper functions {{{
function log_info() { echo -e "$(tput setaf 2)$(tput rev)$(tput bold) \xE2\x9C\x93 $1 $(tput sgr0)"; }
function log_error() { echo -e "$(tput setaf 1)$(tput rev)$(tput bold) \xE2\x9C\x97 $1 $(tput sgr0)"; }
function log_notice() { echo -e "$(tput setaf 3)$(tput rev)$(tput bold) \xE2\x9A\xa0 $1 $(tput sgr0)"; }
# }}}

# decrypt yadm files {{{
# log_info "Decrypting yadm files"
# yadm decrypt
# }}}

# install homebrew if it's missing {{{
if ! command -v brew >/dev/null 2>&1; then
	log_info "Installing homebrew"
	/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi
# }}}

# install/update homebrew packages {{{
if [ -e "$HOME/.Brewfile" ]; then
	log_info "Installing/upgrading homebrew packages"
	brew prune           # Remove dead symlinks from the homebrew prefix
	brew bundle --global # install/upgrade from ~/.Brewfile
	brew upgrade         # upgrade all homebrew packages
	brew cleanup         # remove outdated versions
	# brew bundle --global cleanup --force # remove brew packages not in ~/.Brewfile
fi
# }}}

# akamai {{{
if [[ "$(builtin type -p akamai)" ]]; then
    [[ "$(akamai list | grep -q purge)" ]] || akamai install purge
    akamai update
fi
# }}}

# phpenv {{{
# I only use this because homebrew is making it difficult to install php 7.0
# and extensions right now.
if [[ ! "$(builtin type -p phpenv)" ]]; then
	log_info "Installing phpenv"
	# curl -L http://git.io/phpenv-installer | bash
else
	log_info "Updating phpenv"
	# this breaks all of the sed replacements to turn rbenv into phpenv :/
	# phpenv update
	# to uninstall: rm -rf $(phpenv root)
fi
curl -L http://git.io/phpenv-installer | bash
# }}}

# update yarn {{{
log_info "Installing/upgrading yarn packages"
cd $HOME
# yarn global install
yarn global upgrade
cd -
# }}}

# set zsh as shell {{{
if [[ $(grep "/usr/local/bin/zsh" /etc/shells -c) == 0 ]]; then
	log_info "Installing homebrew zsh to /etc/shells"
	sudo /bin/sh -c "echo /usr/local/bin/zsh >> /etc/shells"
fi
if [[ "$SHELL" != "/usr/local/bin/zsh" ]]; then
	log_info "Changing shell to homebrew zsh"
	chsh -s $(which zsh)
fi
# }}}

# install tmux plugin manager {{{
if [[ ! -d "$HOME/.tmux/plugins/tpm" ]]; then
	log_info "Installing tmux plugin manager. Upgrade packages with \`<c-a>U\`."
	git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi
# }}}

# Vim {{{

# {{{ Directories
if [[ ! -d "$HOME/.vim/autoload" ]]; then
	log_info "Creating required vim autoload directory"
	mkdir -p "$HOME/.vim/autoload" &&
		chmod +w "$HOME/.vim/autoload"
fi
if [[ ! -d "$HOME/.vim/files/info" ]]; then
	log_info "Creating required vim info directory"
	mkdir -p "$HOME/.vim/files/info" &&
		chmod a+w "$HOME/.vim/files/info"
fi
# }}}

# install vim-plug {{{
if [[ ! -f $HOME/.vim/autoload/plug.vim ]]; then
	log_info "Installing vim-plug"
	curl -fLo \
		~/.vim/autoload/plug.vim \
		https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi
# }}}

# install vim-plug plugins {{{
log_info "Installing/upgrading vim plugins"
vim +PlugInstall +PlugUpdate +PlugClean! +qall
# nvim +PlugInstall +qall
# }}}

# }}}

# install node version {{{
if [[ ! "$(nodenv version | grep 9.3.0)" ]]; then
	log_info "Installing node 9.3.0"
	nodenv install 9.3.0 && nodenv rehash && nodenv global 9.3.0
fi
# }}}

# install php version {{{
# I only use phpenv because homebrew is making it difficult to install php 7.0
# and extensions right now.
if [[ ! "$(phpenv versions | grep 7.0.29)" ]]; then
	log_info "Installing php 7.0.29"
	# phpenv install 7.0.29 && phpenv rehash

	# NOTE if I set php 7.1+.x to global and I use directory-specific php
	# versions and I install global composer dependencies then they will fail
	# when I have php 7.0.29 active!
	phpenv install 7.0.29 && php global 7.0.29 && phpenv rehash

	# install pear so we can use pecl to install extensions
	# TODO do this in a way where each php version has its own pear :/
	log_info "Installing pear"
	[ -f "$HOME/.phpenv/bin/go-pear.phar" ] || wget -O "$HOME/.phpenv/bin/go-pear.phar" http://pear.php.net/go-pear.phar
	cd $HOME && ./.support/install-pear.sh && cd -
	[ -f "$HOME/.phpenv/bin/go-pear.phar" ] && rm "$HOME/.phpenv/bin/go-pear.phar"

	log_info "Installing php extensions"
	$HOME/.phpenv/pear/bin/pecl install igbinary && (echo 'extension="igbinary.so"' >$HOME/.phpenv/versions/7.0.29/etc/conf.d/igbinary.ini)          # needed for couchbase
	$HOME/.phpenv/pear/bin/pecl install couchbase-2.2.2 && (echo 'extension="couchbase.so"' >$HOME/.phpenv/versions/7.0.29/etc/conf.d/couchbase.ini) # their sdk has breaking changes all the time
	# $HOME/.phpenv/pear/bin/pecl install pcntl && ( echo 'zend_extension="pcntl.so"' > $HOME/.phpenv/versions/7.0.29/etc/conf.d/pcntl.ini )
	# $HOME/.phpenv/pear/bin/pecl install intl && ( echo 'zend_extension="intl.so"' > $HOME/.phpenv/versions/7.0.29/etc/conf.d/intl.ini ) # needed for phpstan build
	# $HOME/.phpenv/pear/bin/pecl install memcache && ( echo 'zend_extension="memcache.so"' > $HOME/.phpenv/versions/7.0.29/etc/conf.d/memcache.ini ) # needed for zed
	$HOME/.phpenv/pear/bin/pecl install memcached && (echo 'extension="memcached.so"' >$HOME/.phpenv/versions/7.0.29/etc/conf.d/memcached.ini)
	# $HOME/.phpenv/pear/bin/pecl install mongodb && ( echo 'extension="mongodb.so"' > $HOME/.phpenv/versions/7.0.29/etc/conf.d/mongodb.ini )
	# $HOME/.phpenv/pear/bin/pecl install xdebug && ( echo 'zend_extension="xdebug.so"' > $HOME/.phpenv/versions/7.0.29/etc/conf.d/xdebug.ini )
fi

if [[ ! "$(phpenv versions | grep 7.2.4)" ]]; then
	log_info "Installing php 7.2.4"
	phpenv install 7.2.4 && phpenv rehash
	# phpenv install 7.2.4 && php global 7.2.4 && phpenv rehash

	# install pear so we can use pecl to install extensions
	# TODO do this in a way where each php version has its own pear :/
	# log_info "Installing pear"
	# [ -f "$HOME/.phpenv/bin/go-pear.phar" ] || wget -O "$HOME/.phpenv/bin/go-pear.phar" http://pear.php.net/go-pear.phar
	# cd $HOME && ./.support/install-pear.sh && cd -
	# [ -f "$HOME/.phpenv/bin/go-pear.phar" ] && rm "$HOME/.phpenv/bin/go-pear.phar"
fi
# }}}

# install ruby version {{{
if [[ ! "$(rbenv versions | grep 2.2.2)" ]]; then
	log_info "Installing ruby 2.2.2"
	rbenv install 2.2.2 # for catalog
fi
if [[ ! "$(rbenv version | grep 2.5.1)" ]]; then
	log_info "Installing ruby 2.5.1"
	rbenv install 2.5.1 && rbenv global 2.5.1 && rbenv rehash
fi
# }}}

# install perl version {{{
if [[ ! "$(plenv version | grep 5.27.8)" ]]; then
	log_info "Installing perl 5.27.8"
	plenv install 5.27.8 && plenv rehash && plenv global 5.27.8
fi
# }}}

# install python3 version {{{
if [[ ! "$(pyenv version | grep 3.6.5)" ]]; then
	log_info "Installing python 3.6.5"
	pyenv install 3.6.5 && pyenv rehash && pyenv global 3.6.5
fi
# }}}

# install/update ruby gems {{{
# Installs from ~/Gemfile
log_info "Installing/upgrading ruby gems"
gem install bundler
cd $HOME
bundle install --system --binstubs
bundle clean --force
cd -
# }}}

# update python3 pip packages {{{
log_info "Installing/upgrading pip packages"
pip install -r "$HOME/requirements.txt" --user
pip-review --local --auto &&
	pip freeze >"$HOME/requirements.txt"
# }}}

# install/update composer and packages {{{
# https://getcomposer.org/doc/faqs/how-to-install-composer-programmatically.md
if [[ ! "$(builtin type -p composer)" ]]; then
	log_info "Installing composer"
	EXPECTED_SIGNATURE=$(wget -q -O - https://composer.github.io/installer.sig)
	php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
	ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

	if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]; then
		echo >&2 'ERROR: Invalid installer signature'
		rm composer-setup.php
		exit 1
	fi

	php composer-setup.php --quiet
	RESULT=$?
	rm composer-setup.php
	exit $RESULT
fi
log_info "Installing/upgrading composer packages"
composer global selfupdate
composer global install
composer global update
if [[ ! -d $HOME/.composer/global ]]; then
	# ^ this will install cgr. Now install cgr packages...
	log_info "Installing cgr packages"
	# https://github.com/consolidation/cgr
	while read package; do
		cgr $package
	done <$HOME/.composer/cgr-versions.txt
else
	log_info "Upgrading cgr packages"
	cgr update
fi
# }}}

# zplug {{{
if [[ ! -d "$HOME/.zplug" ]]; then
	log_info "Installing zplug"
	curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
else
	log_info "Upgrading zplug"
	cd $ZPLUG_HOME && git pull && cd -
fi
log_info "Installing/upgrading zplug plugins"
$HOME/.support/install-update-zplug.zsh
# }}}

# apply hosts file {{{
log_info "Syncing hosts file"
hostess apply "$HOME/.support/hosts.json"
# }}}

# let iterm see italics {{{
log_info "Enabling italic terminal"
mkdir -p "$HOME/.terminfo/78"
tic -o "$HOME/.terminfo/78/" "$HOME/.support/screen-256color.terminfo.txt"
# }}}

# Mac preferences {{{
# TODO write a function to abstract the repetition here
if [[ $(defaults read com.apple.finder NewWindowTargetPath) != "file:/$HOME/" ]]; then
	log_info "Setting finder default location"
	defaults write com.apple.finder NewWindowTargetPath "file:/$HOME/"
fi

if [[ $(defaults read com.apple.finder AppleShowAllFiles) != "TRUE" ]]; then
	log_info "Setting finder to show hidden files"
	defaults write com.apple.finder AppleShowAllFiles TRUE
	killall Finder
fi
if [[ $(defaults read com.apple.dock orientation) != "left" ]]; then
    log_info "Moving dock to left side"
    defaults write com.apple.dock orientation -string 'left'
    killall Dock
fi
if [[ $(defaults read NSGlobalDomain AppleInterfaceStyle) != "Dark" ]]; then
    log_info "Mac dark mode"
    defaults write NSGlobalDomain AppleInterfaceStyle -string 'Dark'
    killall Dock
    killall SystemUIServer
fi
if [[ $(defaults read NSGlobalDomain AppleAquaColorVariant) != 6 ]]; then
    log_info "Graphite color theme"
    defaults write NSGlobalDomain AppleAquaColorVariant -int 6
    killall Finder
fi
if [[ $(defaults read com.apple.dashboard dashboard-enabled-state) != 1 ]]; then
    log_info "Disable dashboard"
    defaults write com.apple.dashboard dashboard-enabled-state -int 1
    killall Finder
fi
# }}}

# symlink stuff into dropbox {{{
if [[ -d "$HOME/Dropbox" ]]; then
    log_info "Linking dropbox files and folders"
    [[ -d "$HOME/.task" ]] && ln -sf "$HOME/.task" "$HOME/Dropbox/.task"
fi
# }}}

# launchctl jobs {{{
# debug launchd jobs https://stackoverflow.com/q/6337513/557215
# use this form to easily generate a launchd plist: http://launched.zerowidth.com/
launchctl load ~/Library/LaunchAgents/mike.saatchi-tunnel.autossh.plist
launchctl load ~/Library/LaunchAgents/mike.saatchi-proxy.autossh.plist
# I have a job that pulls tasks from jira to taskwarrior... but it's kind of lame and pointless.
# launchctl load ~/Library/LaunchAgents/com.zerowidth.launched.bugwarrior-pull-from-jira.plist

# }}}
