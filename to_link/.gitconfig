# Modeline and Notes {{{
# vim: set sw=4 ts=4 sts=4 et tw=78 foldmethod=marker:
#
#  ___  ____ _         ______           _
#  |  \/  (_) |        |  ___|         | |
#  | .  . |_| | _____  | |_ _   _ _ __ | | __
#  | |\/| | | |/ / _ \ |  _| | | | '_ \| |/ /
#  | |  | | |   <  __/ | | | |_| | | | |   <
#  \_|  |_/_|_|\_\___| \_|  \__,_|_| |_|_|\_\
#
# link my dotfiles to their expected locations
# more info at http://mikefunk.com
# }}}

# General {{{
[apply]
    whitespace = nowarn
[http]
    sslVerify = false
[help]
    autocorrect = 1
[user]
    email = mike@mikefunk.com
    name = Mike Funk
[web]
    browser = open
[instaweb]
    httpd = webrick
[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f
[pre-commit]
    checks = php, tabs, white_space, console_log, merge_conflict, json, yaml, coffeelint
[github]
    user = mikedfunk
[url "git@github.com"]
    insteadOf = gh
[url "git@bitbucket.org"]
    insteadOf = bb
# }}}

# Aliases {{{
[alias]
    ahead = git log --branches --not --remotes
    # delete every branch that has been merged into develop except develop
    bclean = "!f() { git branch --merged ${1-develop} | grep -v " ${1-develop}$" | xargs -r git branch -d; }; f"
    br = branch
    # list branches sorted by last modified
    bm = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
    ci = commit
    # This alias will remove remote branch references that no longer exist,
    # cleanup unnecessary git files, remove untracked files from the working
    # tree and clear out your stash
    cleanup = !git remote prune origin && git gc && git clean -dfx && git stash clear
    cm = !git add -A && git commit -am
    co = checkout
    cob = checkout -b
    dc = diff --cached
    df = diff
    # show modified files in the last commit
    dl = "!git ll -1"
    # show a diff of the last commit
    dlc = diff --cached HEAD^
    # show files changed
    ds = diff --stat
    # show diffs one-by-one of each file that has changed. Takes a branch or hash or HEAD~1 or something.
    # e.g. g dt HEAD~1
    dt = difftool
    # git flow feature shortcuts
    ffc = flow feature checkout
    ffd = flow feature diff
    fff = flow feature finish
    ffl = flow feature list
    ffp = flow feature publish
    ffpl = flow feature pull
    ffr = flow feature rebase
    ffs = flow feature start
    fft = flow feature track
    # git flow hotfix shortcuts
    fhc = flow hotfix checkout
    fhd = flow hotfix diff
    fhf = flow hotfix finish
    fhl = flow hotfix list
    fhp = flow hotfix publish
    fhpl = flow hotfix pull
    fhr = flow hotfix rebase
    fhs = flow hotfix start
    fht = flow hotfix track
    # show change for one file
    filelog = log -u
    fl = log -u
    # Show files ignored by git
    ign = ls-files -o -i --exclude-standard
    iw = instaweb --httpd webrick
    # list aliases
    la = "!git config -l | grep alias | cut -c 7-"
    # not sure what this does... maybe show my my latest commits by date?
    latest = for-each-ref --sort=-committerdate refs/heads --format='%(committerdate:relative) %(refname:short)'
    # my go-to log format
    lg = log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
    # graphy log format with the visual branching on the left
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    # show all files tracked by git in this branch
    ls = ls-files
    # another graphy log format
    olg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    permission-reset = !git diff -p -R | grep -E \"^(diff|(old|new) mode)\" | git apply
    pl = pull
    pnp = !git pull && git push
    pp = !git pull && git push
    pu = push
    # pull and update submodules... i hate submodules...
    pup = !git pull --recurse-submodules && git submodule update
    purr = pull --rebase
    rbi = rebase -i
    rbd = rebase -i develop
    # rebase interactively on to the upstream to this branch
    ready = rebase -i @{u}
    rh = reset --hard
    # save a stash with "git stash save 'my stash name'"
    # search for a stash by saved description e.g. "git sshow 'my stash name'"
    sshow = "!f() { git stash show stash^{/$*} -p; }; f"
    # apply a stash by saved description e.g. "git sapply 'my stash name'"
    sapply = "!f() { git stash apply stash^{/$*}; }; f"
    st = status -sb
    # show all of my commits since yesterday
    standup = log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cD) %C(bold blue)<%an>%Creset' --since yesterday --author mike.funk@internetbrands.com
    stash-unapply = !git stash show -p | git apply -R
    sync = "!f() { echo 'Syncing current branch with develop' && git checkout develop && git pull && git checkout - && git rebase develop; }; f"
    # uncommit the last commit
    undo = reset HEAD~1 --mixed
    unstage = reset HEAD
    # who has contributed to a project
    who = shortlog -n -s --no-merges
    wiff = diff --color-words
    # work in progress commit
    wip = !git add -u && git commit -m "WIP"
    # uncommit the last commit... but make a backup ref first just in case
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
    rbd = rebase -i develop
# }}}

# Color and visual settings {{{
[color]
    branch = true
    diff = true
    status = true
    showbranch = true
    ui = true
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
    ui = true
[format]
    ; sets the git log format to be one line
    ; pretty = '%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
[log]
    date = short
# }}}

# Core settings {{{
[core]
    editor = vim
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
    trustctime = false
    ; if you want to specify a custom global gitignore location
    excludesfile = /Users/mfunk/.gitignore
    ; autocrlf = input
    ; autocrlf = true
    autocrlf = false
    ignorecase = false
    preloadindex = true
    pager = less -FRSX
# }}}

# diff and mergetool {{{
[diff]
    ; tool = opendiff
    tool = vimdiff
[merge]
    ; tool = opendiff
    tool = vimdiff
[mergetool]
    keepBackup = false
# }}}

# rebasing, squashing, pushing, fetching {{{
[branch]
    autosetuprebase = always
[rebase]
    autosquash = true
[push]
    default = current
[rerere]
    enabled = 1
[fetch]
    prune = true
# }}}
