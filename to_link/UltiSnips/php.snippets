extends html

snippet prt "print_r true"
print_r(${1}, true)${2}
endsnippet

snippet markTestIncomplete "phpunit incomplete test"
$this->markTestIncomplete();${1}
endsnippet

snippet codingStandardsIgnore "magical docblock to make phpcs shut up!"
/**
 * @codingStandardsIgnoreFile
 */
endsnippet

snippet author

/**
 * ${1}
 *
 * @package ${2}
 * @author Michael Funk <mike.funk@internetbrands.com>
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */

endsnippet

snippet top "File-level PHP docblock"
/**
 * ${1:Description}
 *
 * @package ${2:AutoClassifiedsPlatform}
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */
endsnippet

snippet mock
$1 = Mockery::mock('$2');
$1->shouldReceive('$3')
    ->once()
    ->andReturn(${4:true});
endsnippet

snippet constr "laravel 4 DI construct"

/**
 * dependency injection
 *
 * @param $1 $$2
 */
public function __construct(${1:UserRepositoryInterface} $${2:user})
{
    $this->$2 = $$2;
}
endsnippet

snippet datapro "PHPUnit Data Provider function"
public function $1DataProvider()
{
    return array(
        array(
            $2
        ),
    );
}
endsnippet

snippet php "opening php tag"
<?php
$1
endsnippet

snippet cla "mike's class with namespace, file and class docblocks"
<?php
/**
 * ${1:Description}
 *
 * @package ${2:AutoClassifiedsPlatform}
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */
namespace InternetBrands\AutoClassifiedsPlatform\\$3;

/**
 * ${4:`!v expand("%:t:r")`}
 *
 * @author `!v g:snips_author`
 */
class $4 $5
{
    $6
}
endsnippet

snippet pucla "mike's phpunit test template with docblocks"
<?php
/**
 * ${1:Unit Tests}
 *
 * @package ${2:AutoClassifiedsPlatform}
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */

/**
 * ${3:ClassName}Test
 *
 * @author `!v g:snips_author`
 */
class $3Test extends \PHPUnit_Framework_TestCase
{
    public function setUp()
    {

    }

    public function tearDown()
    {

    }

    $4
}
endsnippet

snippet meth "php method"

/**
 * ${1:Description}
 *
 * @return ${4:void}
 */
public function ${2:functionname}(${3})
{
    $5
}
endsnippet

snippet stp "phpunit setup"

/**
 * phpunit setup
 */
public function setUp()
{
    parent::setUp();
    $1
}
endsnippet

snippet inte
<?php
/**
 * ${1:Description}
 *
 * @package ${2:AutoClassifiedsPlatform}
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */
namespace InternetBrands\AutoClassifiedsPlatform\\$3;

/**
 * ${4:ClassName}
 *
 * @author `!v g:snips_author`
 */
interface $4 $5
{
	$6
}
endsnippet

snippet va "var with docblock"

/**
 * ${1:Description}
 *
 * @var ${2:mixed}
 */
protected ${3:$myvar};
endsnippet

snippet cst "constant with docblock"

/**
 * ${1:Description}
 */
const ${2:MY_CONST};
endsnippet

snippet varblock "var docblock"
/**
 * ${1:description}
 *
 * @var ${2:mixed}
 * @access ${3:public}
 */
endsnippet

snippet pageblock "page level docblock"
/**
 * @package ${2:Template}
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */
$3
endsnippet

snippet classblock "class level docblock"
/**
 * ${1:title}
 *
 * @author `!v g:snips_author`
 */$3
endsnippet


snippet methodblock "method level docblock"
/**
 * ${1:title}
 *
 * @param ${2:string $myvar my description here}
 */
endsnippet

snippet lng "laravel Lang::get()"
Lang::get('$1')
endsnippet

snippet vw "View::make"
return View::make('$1');
endsnippet

snippet rdr "Redirect::route"
return Redirect::route('$1');
endsnippet

snippet -- "// ---"
// ------------------------------------------------------------------------
endsnippet

snippet me "@author"
@author Michael Funk <mike.funk@internetbrands.com>
endsnippet

snippet hm "@author home address"
@author Michael Funk <mike@mikefunk.com>
endsnippet

snippet uns "Laravel Unsigned Integer"
$table->unsignedInteger('$1');
endsnippet

snippet forn "Laravel Foreign Key"
$table->foreign('$1')->references('id')->on('$2');
endsnippet

snippet sft "Laravel Soft Delete"
$table->softDeletes();
endsnippet

snippet vd "var_dump and exit"
var_dump($1); exit;
endsnippet

snippet cl "Laravel http call"
$this->call('${1:GET}', ${2:myurl});
endsnippet

snippet zmodule "Zend Framework Module class"
<?php
/**
 * @package ${1:Package}
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */
namespace ${2:Namespace};

/**
 * Module
 *
 * @author Michael Funk <mike.funk@internetbrands.com>
 */
class Module
{

    /**
     * use composer instead of Zend's autoloader
     *
     * @return null
     */
    public function getAutoloaderConfig()
    {
    }

    /**
     * get module config
     *
     * @return array
     */
    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php';
    }
}
endsnippet

snippet zendbootstrap "Zend Framework Unit Testing Bootstrap File"
<?php

namespace AlbumTest;

use Zend\Loader\AutoloaderFactory;
use Zend\Mvc\Service\ServiceManagerConfig;
use Zend\ServiceManager\ServiceManager;
use RuntimeException;

error_reporting(E_ALL | E_STRICT);
chdir(__DIR__);

/**
 * Test bootstrap, for setting up autoloading
 */
class Bootstrap
{
    protected static $serviceManager;

    public static function init()
    {
        $zf2ModulePaths = array(dirname(dirname(__DIR__)));
        if (($path = static::findParentPath('vendor'))) {
            $zf2ModulePaths[] = $path;
        }
        if (($path = static::findParentPath('module')) !== $zf2ModulePaths[0]) {
            $zf2ModulePaths[] = $path;
        }

        static::initAutoloader();

        // use ModuleManager to load this module and it's dependencies
        $config = array(
            'module_listener_options' => array(
                'module_paths' => $zf2ModulePaths,
            ),
            'modules' => array(
                '${1:MyModuleName}'
            )
        );

        $serviceManager = new ServiceManager(new ServiceManagerConfig());
        $serviceManager->setService('ApplicationConfig', $config);
        $serviceManager->get('ModuleManager')->loadModules();
        static::$serviceManager = $serviceManager;
    }

    public static function getServiceManager()
    {
        return static::$serviceManager;
    }

    protected static function initAutoloader()
    {
        $vendorPath = static::findParentPath('vendor');

        $zf2Path = getenv('ZF2_PATH');
        if (!$zf2Path) {
            if (defined('ZF2_PATH')) {
                $zf2Path = ZF2_PATH;
            } elseif (is_dir($vendorPath . '/ZF2/library')) {
                $zf2Path = $vendorPath . '/ZF2/library';
            } elseif (is_dir($vendorPath . '/zendframework/zendframework/library')) {
                $zf2Path = $vendorPath . '/zendframework/zendframework/library';
            }
        }

        if (!$zf2Path) {
            throw new RuntimeException('Unable to load ZF2. Run "php composer.phar install" or define a ZF2_PATH environment variable.');
        }

        include $zf2Path . '/Zend/Loader/AutoloaderFactory.php';
        AutoloaderFactory::factory(array(
            'Zend\Loader\StandardAutoloader' => array(
                'autoregister_zf' => true,
                'namespaces' => array(
                    __NAMESPACE__ => __DIR__ . '/' . __NAMESPACE__,
                ),
            ),
        ));
    }

    protected static function findParentPath($path)
    {
        $dir = __DIR__;
        $previousDir = '.';
        while (!is_dir($dir . '/' . $path)) {
            $dir = dirname($dir);
            if ($previousDir === $dir) return false;
            $previousDir = $dir;
        }
        return $dir . '/' . $path;
    }
}

Bootstrap::init();
endsnippet

snippet zendmodule "Zend Framework module config"
<?php
return array(
    'controllers' => array(
        'invokables' => array(
            '${1:ZendSkeletonModule\Controller\Skeleton}' => '$1Controller',
        ),
    ),
    'router' => array(
        'routes' => array(
            'module-name-here' => array(
                'type'    => 'Literal',
                'options' => array(
                    // Change this to something specific to your module
                    'route'    => '${2:/module-specific-root}',
                    'defaults' => array(
                        // Change this value to reflect the namespace in which
                        // the controllers for your module are found
                        '__NAMESPACE__' => '$1',
                        'controller'    => '${4:Skeleton}',
                        'action'        => 'index',
                    ),
                ),
                'may_terminate' => true,
                'child_routes' => array(
                    // This route is a sane default when developing a module;
                    // as you solidify the routes for your module, however,
                    // you may want to remove it and replace it with more
                    // specific routes.
                    'default' => array(
                        'type'    => 'Segment',
                        'options' => array(
                            'route'    => '/[:controller[/:action]]',
                            'constraints' => array(
                                'controller' => '[a-zA-Z][a-zA-Z0-9_-]*',
                                'action'     => '[a-zA-Z][a-zA-Z0-9_-]*',
                            ),
                            'defaults' => array(
                            ),
                        ),
                    ),
                ),
            ),
        ),
    ),
    'view_manager' => array(
        'template_path_stack' => array(
            'ZendSkeletonModule' => __DIR__ . '/../view',
        ),
    ),
);
endsnippet

snippet mit "MIT License"
@license MIT License <http://opensource.org/licenses/mit-license.html>
endsnippet
