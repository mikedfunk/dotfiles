extends html

global !p

def namespace(snip, path):
    import os
    namespace = pathToNamespace(path)
    if (len(namespace) == 0):
        return ''
    return os.linesep + snip.mkline('namespace ' + namespace + ';') + os.linesep

def pathToNamespace(path):
    import re
    path = path.replace('\\', '/')

    parts = []
    for part in path.split('/'):
        if re.match('^[A-Z]', part):
            parts.append(part)
        else:
            parts = []
    parts.pop()

    return '\\'.join(parts)

endglobal

snippet sg "PHP Class Setter Getter" !b

/**
 * setter
 *
 * @param ${2:mixed} $$1
 * @return void
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;
}

/**
 * getter
 *
 * @return $2
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;
}
endsnippet

snippet prt "print_r true"
print_r(${1}, true)${2}
endsnippet

snippet mti "phpunit incomplete test"
$this->markTestIncomplete();${1}
endsnippet

snippet codingStandardsIgnore "magical docblock to make phpcs shut up!"
/**
 * @codingStandardsIgnoreFile
 */
endsnippet

snippet authr

/**
 * ${1}
 *
 * @package ${2}
 * @author Michael Funk <`!v g:snips_author`>
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */

endsnippet

snippet top "File-level PHP docblock"
/**
 * ${1:Description}
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */
endsnippet

snippet mck
$$1Mock = Mockery::mock('${1/\w+\s*/\u$0/}');
$$1Mock->shouldReceive('$3')
    ->once()
    ->andReturn(${4:true});
endsnippet

snippet cstr "laravel 4 DI construct"

/**
 * dependency injection
 *
 * @param ${1/\w+\s*/\u$0/}Interface $$1
 * @return void
 */
public function __construct(${1/\w+\s*/\u$0/}Interface $$1)
{
    $this->$1 = $$1;
}
endsnippet

snippet datapro "PHPUnit Data Provider function"
public function $1DataProvider()
{
    return array(
        array(
            $2
        ),
    );
}
endsnippet

snippet php "opening php tag"
<?php
$1
endsnippet

snippet cla "mike's class with namespace, file and class docblocks"
<?php
/**
 * ${1:Description}
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */`!p snip.rv = namespace(snip, path)`

/**
 * `!v expand("%:t:r")`
 *
 * @author `!v g:snips_author`
 */
class $4
{
    $6
}
endsnippet

snippet trt "mike's trait with namespace, file and class docblocks"
<?php
/**
 * ${1:Description}
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */`!p snip.rv = namespace(snip, path)`
/**
 * `!v expand("%:t:r")`
 *
 * @author `!v g:snips_author`
 */
trait `!v expand("%:t:r")`
{
    $6
}
endsnippet

snippet mdl "ACP laravel model"
<?php
/**
 * ${1:`!v expand("%:t:r")`} model
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */`!p snip.rv = namespace(snip, path)`
use InternetBrands\AutoClassifiedsPlatform\Common\Models\BaseModel;
use InternetBrands\AutoClassifiedsPlatform\\${2:PackageName}\Interfaces\\$1ModelInterface;

/**
 * `!v expand("%:t:r")`
 *
 * @author `!v g:snips_author`
 */
class `!v expand("%:t:r")` extends BaseModel implements `!v expand("%:t:r")`ModelInterface
{
    /**
     * the name of the table this model represents
     *
     * @var string
     */
    protected $table = '${4:table_name}';

    /**
     * whether to use created_at and updated_at
     *
     * @var boolean
     */
    public $timestamps = false;

    /**
     * fillable fields whitelist
     *
     * @var array
     */
    protected $fillable = [
        $5
    ];

    /**
     * these fields should return a Carbon date object
     *
     * @var array
     */
    protected $dates = [
        $6
    ];
}
endsnippet

snippet mdli "ACP laravel model interface"
<?php
/**
 * ${1:Listing} model interface
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */`!p snip.rv = namespace(snip, path)`
use InternetBrands\AutoClassifiedsPlatform\Common\Interfaces\BaseModelInterface;

/**
 * `!v expand("%:t:r")`
 *
 * @author `!v g:snips_author`
 */
interface `!v expand("%:t:r")` extends BaseModelInterface
{
    $6
}
endsnippet

snippet rps "ACP laravel repository"
<?php
/**
 * ${1:Listing} repository for data access
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */`!p snip.rv = namespace(snip, path)`
use InternetBrands\AutoClassifiedsPlatform\Common\Repositories\EloquentRepository;
use InternetBrands\AutoClassifiedsPlatform\\${2:PackageName}\Interfaces\\$1ModelInterface;
use InternetBrands\AutoClassifiedsPlatform\\$2\Interfaces\\$1RepositoryInterface;

/**
 * `!v expand("%:t:r")`
 *
 * @author `!v g:snips_author`
 */
class `!v expand("%:t:r")` extends EloquentRepository implements `!v expand("%:t:r")`Interface
{

    /**
     * validation rules
     *
     * @var array
     */
    public $rules = array(
        ${3:'title' => 'required',}
    );

    /**
     * dependency injection
     *
     * @param $1ModelInterface \$${1/\w+/\l$0/}Model
     */
    public function __construct(
        $1ModelInterface \$${1/\w+/\l$0/}Model
    ) {
        $this->setModel(\$${1/\w+/\l$0/}Model);
    }
}
endsnippet

snippet rpsi "ACP laravel repository interface"
<?php
/**
 * ${1:Listing} repository interface
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */`!p snip.rv = namespace(snip, path)`
use InternetBrands\AutoClassifiedsPlatform\Common\Interfaces\EloquentRepositoryInterface;

/**
 * `!v expand("%:t:r")`
 *
 * @author `!v g:snips_author`
 */
interface `!v expand("%:t:r")` extends EloquentRepositoryInterface
{
    $6
}
endsnippet

snippet rpst "ACP laravel repository test"
<?php
/**
 * ${1:Listing} repository test
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */
namespace InternetBrands\AutoClassifiedsPlatform\\${2:PackageName}\Tests;

use InternetBrands\AutoClassifiedsPlatform\Common\Tests\Support\BaseRepositoryTest;
use InternetBrands\AutoClassifiedsPlatform\\$2\Repositories\\$1Repository;
use InternetBrands\AutoClassifiedsPlatform\\$2\Models\\$1;
use Mockery;

/**
 * `!v expand("%:t:r")`
 *
 * @author `!v g:snips_author`
 */
class `!v expand("%:t:r")` extends BaseRepositoryTest
{

    /**
     * $1 model instance
     *
     * @var $1
     */
    protected \$${1/\w+/\l$0/}Model;

    /**
     * $1 repository instance
     *
     * @var $1RepositoryInterface
     */
    protected \$${1/\w+/\l$0/}Repository;

    /**
     * phpunit setup
     *
     * @return void
     */
    public function setUp()
    {
        parent::setUp();

        // set up some shared mocks and dependencies
        $ns = "InternetBrands\AutoClassifiedsPlatform\\$2\Models\\$1";
        $this->${1/\w+/\l$0/}Model = Mockery::mock($ns);

        // voltron assemble!
        $this->${1/\w+/\l$0/}Repository = new $1Repository(
            $this->${1/\w+/\l$0/}Model
        );
    }

    /**
     * data that will successfully update
     *
     * @return array
     */
    public function tryUpdateSuccessDataProvider()
    {
        return [
            [
                ${3:'name' => 'Hyundai',
                'aces_name_id' => 1,}
            ],
        ];
    }

    /**
     * data that will fail validation
     *
     * @return array
     */
    public function invalidValuesDataProvider()
    {
        return [
            [
                'values' => [
                    ${4:'name' => '',}
                ],
            ],
        ];
    }
    $5
}
endsnippet

snippet sp "ACP Service Provider"
<?php
/**
 * ${1:Listing} service provider. Used for defining IoC bindings, event
 * listeners, etc.
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */`!p snip.rv = namespace(snip, path)`
use Illuminate\Support\ServiceProvider;

/**
 * `!v expand("%:t:r")`
 *
 * @author `!v g:snips_author`
 */
class `!v expand("%:t:r")` extends ServiceProvider
{

    /**
     * Indicates if loading of the provider is deferred.
     *
     * @var bool
     */
    protected $defer = false;

    /**
     * Bootstrap the application events.
     *
     * @return void
     */
    public function boot()
    {
        // manually defined the real path of the package
        $this->package('internet-brands/${1/\w+\s*/\l$0/}', null, __DIR__.'/../../../');
    }

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {

        // bind the controller
        $this->app->bind(
            'InternetBrands\AutoClassifiedsPlatform\\$1\Interfaces\\$1ControllerInterface',
            'InternetBrands\AutoClassifiedsPlatform\\$1\Controllers\\$1Controller'
        );

        // bind the repository
        $this->app->bind(
            'InternetBrands\AutoClassifiedsPlatform\\$1\Interfaces\\$1RepositoryInterface',
            'InternetBrands\AutoClassifiedsPlatform\\$1\Repositories\\$1Repository'
        );

        // bind the model
        $this->app->bind(
            'InternetBrands\AutoClassifiedsPlatform\\$1\Interfaces\\$1ModelInterface',
            'InternetBrands\AutoClassifiedsPlatform\\$1\Models\\$1'
        );
    }

    /**
     * Get the services provided by the provider.
     *
     * @return array
     */
    public function provides()
    {
        return array();
    }
}
endsnippet

snippet ctl "ACP laravel controller"
<?php
/**
 * ${1:Listing} controller
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */`!p snip.rv = namespace(snip, path)`
use Config;
use InternetBrands\AutoClassifiedsPlatform\Common\Controllers\BaseController;
use InternetBrands\AutoClassifiedsPlatform\\$1\Interfaces\\$1RepositoryInterface;
use InternetBrands\AutoClassifiedsPlatform\\$1\Interfaces\\$1ControllerInterface;
use Input;
use Lang;
use MikeFunk\BustersPhp\BustersPhpInterface;
use Notification;
use Redirect;
use URL;
use Validator;
use View;

/**
 * `!v expand("%:t:r")`
 *
 * @author `!v g:snips_author`
 */
class `!v expand("%:t:r")` extends BaseController implements `!v expand("%:t:r")`Interface
{

    /**
     * $1 repository instance
     *
     * @var $1RepositoryInterface
     */
    protected \$${1/\w+/\l$0/}Repository;

    /**
     * Dependency Injection
     *
     * @param BustersPhpInterface $bustersPhp
     * @param $1RepositoryInterface \$${1/\w+/\l$0/}Repository
     */
    public function __construct(
        BustersPhpInterface $bustersPhp,
        $1RepositoryInterface \$${1/\w+/\l$0/}Repository
    ) {
        parent::__construct($bustersPhp);
        $this->${1/\w+/\l$0/}Repository = \$${1/\w+/\l$0/}Repository;
    }
    $5
}
endsnippet

snippet ctli "ACP laravel controller interface"
<?php
/**
 * `!v expand("%:t:r")`
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */`!p snip.rv = namespace(snip, path)`
use InternetBrands\AutoClassifiedsPlatform\Common\Interfaces\BaseControllerInterface;

/**
 * `!v expand("%:t:r")`
 *
 * @author `!v g:snips_author`
 */
interface `!v expand("%:t:r")` extends BaseControllerInterface
{
    $6
}
endsnippet

snippet ctlt "ACP laravel controller test"
<?php
/**
 * ${1:Listing} controller test
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */
namespace InternetBrands\AutoClassifiedsPlatform\\${2:Package}\Tests;

use Auth;
use Config;
use Input;
use InternetBrands\AutoClassifiedsPlatform\Common\Tests\Support\BaseControllerTest;
use InternetBrands\AutoClassifiedsPlatform\\$2\Controllers\\$1Controller;
use Lang;
use Mockery;
use Notification;
use Redirect;
use URL;
use Validator;
use View;

/**
 * `!v expand("%:t:r")`
 *
 * @author `!v g:snips_author`
 */
class `!v expand("%:t:r")` extends BaseControllerTest
{

    /**
     * $1 repository instance
     *
     * @var $1RepositoryInterface
     */
    protected \$${1/\w+/\l$0/}Repository;

    /**
     * $1 controller instance
     *
     * @var $1ControllerInterface
     */
    protected \$${1/\w+/\l$0/}Controller;

    /**
     * phpunit setup
     *
     * @return void
     */
    public function setUp()
    {

        // add some new package providers
        $newProvider = 'InternetBrands\AutoClassifiedsPlatform\\$2\\$2ServiceProvider';
        $this->addServiceProviders($newProvider);

        parent::setUp();

        // set up some shared mocks and dependencies
        $ns = 'MikeFunk\BustersPhp\BustersPhpInterface';
        $bustersPhp = Mockery::mock($ns);

        $ns = "InternetBrands\AutoClassifiedsPlatform\\$1\Interfaces\\$1RepositoryInterface";
        $this->${1/\w+/\l$0/}Repository = Mockery::mock($ns);

        // voltron assemble!
        $this->${1/\w+/\l$0/}Controller = new $1Controller(
            $bustersPhp,
            $this->${1/\w+/\l$0/}Repository
        );
    }
    $3
}
endsnippet

snippet mgt "laravel migration"
<?php
/**
 * $1 initial migration
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */

use Illuminate\Database\Migrations\Migration;

/**
 * Create${1:Whatever}Table
 *
 * @author `!v g:snips_author`
 */
class Create$1Table extends Migration
{

    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create(
            '${3:table_name}',
            function ($table) {
                $table->increments('id');
                $4
                // $table->integer('member_ad_id')->index();
                // $table->string('city', 255)->nullable();
                // $table->enum(
                //     'status', array(
                //         "unfinished",
                //         "inactive",
                //     )
                // )->default("inactive")->index();
                // $table->timestamp('start_date')->default("0000-00-00 00:00:00");
                // $table->text('body');
                // $table->decimal('price', 12, 2)->nullable();
                // $table->date('featured_expiration_date')->nullable();
                // $table->boolean('is_bigger');
                // $table->timestamps();
            }
        );
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::drop('$3');
    }
}
endsnippet

snippet sdr "Auto Classifieds Platform laravel seeder"
<?php

/**
 * $4
 *
 * @link https://github.com/fzaninotto/Faker use this library to provide fake
 * data to the seeder
 *
 * @package   AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */`!p snip.rv = namespace(snip, path)`
use InternetBrands\AutoClassifiedsPlatform\Common\Seeds\BaseSeeder;
use Str;

/**
 * ${4:`!v expand("%:t:r")`}
 *
 * @author `!v g:snips_author`
 */
class $4 extends BaseSeeder
{

    /**
     * getTableName
     *
     * @return string
     */
    protected function getTableName()
    {
        return '${5:table_name}';
    }

    /**
     * run seeder
     *
     * @return void
     */
    public function run()
    {
        $this->seedFakeRows(10);
        $this->command->info('$5 table seeded!');
    }

    /**
     * provide one fake row
     *
     * @return array
     */
    protected function provideOneRow()
    {
        return array(
            $6
            // 'title' => Str::limit($this->faker()->sentence(3), 45),
            // 'price' => $this->faker()->randomNumber(5),
            // 'fax' => $this->faker()->phoneNumber(),
            // 'additional_notes' => $this->faker()->text(),
            // 'other_payment_method' => $this->faker()->text(20),
            // 'height' => $this->faker()->randomNumber(),
            // 'current_step' => $this->faker()->word(),
            // 'is_exclusive' => $this->faker()->boolean(),
            // 'exclusive_expiration_date' => $this->faker()->dateTimeThisYear()->format('Y-m-d G:i:s'),
        );
    }
}
endsnippet

snippet pucla "mike's phpunit test template with docblocks"
<?php
/**
 * ${1:Unit Tests}
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */

/**
 * ${4:`!v expand("%:t:r")`}
 *
 * @author `!v g:snips_author`
 */
class $4 extends \PHPUnit_Framework_TestCase
{
    /**
     * phpunit setup
     *
     * @return void
     */
    public function setUp()
    {

    }

    /**
     * phpunit teardown
     *
     * @return void
     */
    public function tearDown()
    {

    }

    $4
}
endsnippet

snippet meth "php method"

/**
 * ${1:Description}
 *
 * @return ${4:void}
 */
public function ${2:functionname}(${3})
{
    $5
}
endsnippet

snippet pumeth "phpunit method"

/**
 * $2
 *
 * @return void
 */
public function ${2:functionName}()
{
    $3
}
endsnippet

snippet stp "phpunit setup"

/**
 * phpunit setup
 */
public function setUp()
{
    parent::setUp();
    $1
}
endsnippet

snippet inte
<?php
/**
 * ${1:Description}
 *
 * @package AutoClassifiedsPlatform
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */`!p snip.rv = namespace(snip, path)`

/**
 * ${4:`!v expand("%:t:r")`}
 *
 * @author `!v g:snips_author`
 */
interface $4 $5
{
    $6
}
endsnippet

snippet va "var with docblock"

/**
 * ${1:Description}
 *
 * @var ${2:mixed}
 */
protected ${3:$myvar};
endsnippet

snippet cst "constant with docblock"

/**
 * ${1:Description}
 */
const ${2:MY_CONST};
endsnippet

snippet varblock "var docblock"
/**
 * ${1:description}
 *
 * @var ${2:mixed}
 * @access ${3:public}
 */
endsnippet

snippet pageblock "page level docblock"
/**
 * @package ${2:Template}
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */
$3
endsnippet

snippet classblock "class level docblock"
/**
 * ${1:title}
 *
 * @author `!v g:snips_author`
 */
endsnippet


snippet methodblock "method level docblock"
/**
 * ${1:title}
 *
 * @param ${2:string $myvar my description here}
 */
endsnippet

snippet lng "laravel Lang::get()"
Lang::get('$1')
endsnippet

snippet vw "View::make"
return View::make('$1');
endsnippet

snippet rdr "Redirect::route"
return Redirect::route('$1');
endsnippet

snippet if "php if" !b
if (${1}) {
    ${2}
}
endsnippet

snippet ife "php if/else" !b
if (${1}) {
    ${2}
} else {

}
endsnippet

snippet foreach "php foreach"
foreach (${1:$things as $thing}) {
    $2
}
endsnippet

snippet /** "php comment block" b
/**
 * ${1}
 */
endsnippet

snippet -- "// ---"
// ------------------------------------------------------------------------
endsnippet

snippet me "@author"
@author Michael Funk <`!v g:snips_author`>
endsnippet

snippet hm "@author home address"
@author Michael Funk <mike@mikefunk.com>
endsnippet

snippet uns "Laravel Unsigned Integer"
$table->unsignedInteger('$1');
endsnippet

snippet forn "Laravel Foreign Key"
$table->foreign('$1')->references('id')->on('$2');
endsnippet

snippet sft "Laravel Soft Delete"
$table->softDeletes();
endsnippet

snippet vd "var_dump and exit"
var_dump($1); exit;
endsnippet

snippet cl "Laravel http call"
$this->call('${1:GET}', ${2:myurl});
endsnippet

snippet zmodule "Zend Framework Module class"
<?php
/**
 * @package ${1:Package}
 * @copyright `date +%Y` Internet Brands, Inc. All Rights Reserved.
 */
namespace ${2:Namespace};

/**
 * Module
 *
 * @author Michael Funk <`!v g:snips_author`>
 */
class Module
{

    /**
     * use composer instead of Zend's autoloader
     *
     * @return null
     */
    public function getAutoloaderConfig()
    {
    }

    /**
     * get module config
     *
     * @return array
     */
    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php';
    }
}
endsnippet

snippet zendbootstrap "Zend Framework Unit Testing Bootstrap File"
<?php

namespace AlbumTest;

use Zend\Loader\AutoloaderFactory;
use Zend\Mvc\Service\ServiceManagerConfig;
use Zend\ServiceManager\ServiceManager;
use RuntimeException;

error_reporting(E_ALL | E_STRICT);
chdir(__DIR__);

/**
 * Test bootstrap, for setting up autoloading
 */
class Bootstrap
{
    protected static $serviceManager;

    public static function init()
    {
        $zf2ModulePaths = array(dirname(dirname(__DIR__)));
        if (($path = static::findParentPath('vendor'))) {
            $zf2ModulePaths[] = $path;
        }
        if (($path = static::findParentPath('module')) !== $zf2ModulePaths[0]) {
            $zf2ModulePaths[] = $path;
        }

        static::initAutoloader();

        // use ModuleManager to load this module and it's dependencies
        $config = array(
            'module_listener_options' => array(
                'module_paths' => $zf2ModulePaths,
            ),
            'modules' => array(
                '${1:MyModuleName}'
            )
        );

        $serviceManager = new ServiceManager(new ServiceManagerConfig());
        $serviceManager->setService('ApplicationConfig', $config);
        $serviceManager->get('ModuleManager')->loadModules();
        static::$serviceManager = $serviceManager;
    }

    public static function getServiceManager()
    {
        return static::$serviceManager;
    }

    protected static function initAutoloader()
    {
        $vendorPath = static::findParentPath('vendor');

        $zf2Path = getenv('ZF2_PATH');
        if (!$zf2Path) {
            if (defined('ZF2_PATH')) {
                $zf2Path = ZF2_PATH;
            } elseif (is_dir($vendorPath . '/ZF2/library')) {
                $zf2Path = $vendorPath . '/ZF2/library';
            } elseif (is_dir($vendorPath . '/zendframework/zendframework/library')) {
                $zf2Path = $vendorPath . '/zendframework/zendframework/library';
            }
        }

        if (!$zf2Path) {
            throw new RuntimeException('Unable to load ZF2. Run "php composer.phar install" or define a ZF2_PATH environment variable.');
        }

        include $zf2Path . '/Zend/Loader/AutoloaderFactory.php';
        AutoloaderFactory::factory(array(
            'Zend\Loader\StandardAutoloader' => array(
                'autoregister_zf' => true,
                'namespaces' => array(
                    __NAMESPACE__ => __DIR__ . '/' . __NAMESPACE__,
                ),
            ),
        ));
    }

    protected static function findParentPath($path)
    {
        $dir = __DIR__;
        $previousDir = '.';
        while (!is_dir($dir . '/' . $path)) {
            $dir = dirname($dir);
            if ($previousDir === $dir) return false;
            $previousDir = $dir;
        }
        return $dir . '/' . $path;
    }
}

Bootstrap::init();
endsnippet

snippet zendmodule "Zend Framework module config"
<?php
return array(
    'controllers' => array(
        'invokables' => array(
            '${1:ZendSkeletonModule\Controller\Skeleton}' => '$1Controller',
        ),
    ),
    'router' => array(
        'routes' => array(
            'module-name-here' => array(
                'type'    => 'Literal',
                'options' => array(
                    // Change this to something specific to your module
                    'route'    => '${2:/module-specific-root}',
                    'defaults' => array(
                        // Change this value to reflect the namespace in which
                        // the controllers for your module are found
                        '__NAMESPACE__' => '$1',
                        'controller'    => '${4:Skeleton}',
                        'action'        => 'index',
                    ),
                ),
                'may_terminate' => true,
                'child_routes' => array(
                    // This route is a sane default when developing a module;
                    // as you solidify the routes for your module, however,
                    // you may want to remove it and replace it with more
                    // specific routes.
                    'default' => array(
                        'type'    => 'Segment',
                        'options' => array(
                            'route'    => '/[:controller[/:action]]',
                            'constraints' => array(
                                'controller' => '[a-zA-Z][a-zA-Z0-9_-]*',
                                'action'     => '[a-zA-Z][a-zA-Z0-9_-]*',
                            ),
                            'defaults' => array(
                            ),
                        ),
                    ),
                ),
            ),
        ),
    ),
    'view_manager' => array(
        'template_path_stack' => array(
            'ZendSkeletonModule' => __DIR__ . '/../view',
        ),
    ),
);
endsnippet

snippet mit "MIT License"
@license MIT License <http://opensource.org/licenses/mit-license.html>
endsnippet

snippet asr "assert equals expected and actual"
$this->assertEquals($expected, $actual);
endsnippet

snippet if "php if statement"
if ($1) {
    $2
}
endsnippet

snippet ie "php if/else statement"
if ($1) {
    $2
} else {
    $3
}
endsnippet

snippet fe "php foreach"
foreach ($1) {
    $2
}
endsnippet

snippet asn "assign variable to instance variable"
$this->${1:listingModel} = \$$1;
endsnippet

snippet exp "$expected common line in unit tests"
$expected = '${1:random string}';

// call and verify
$actual = $this->${2:listingRepository}->${3:myMethod()};
$this->assertEquals($expected, $actual);
endsnippet
