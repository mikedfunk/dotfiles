" Modeline and Notes {{{
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmethod=marker filetype=vim:
"
"  ___  ____ _         ______           _
"  |  \/  (_) |        |  ___|         | |
"  | .  . |_| | _____  | |_ _   _ _ __ | | __
"  | |\/| | | |/ / _ \ |  _| | | | '_ \| |/ /
"  | |  | | |   <  __/ | | | |_| | | | |   <
"  \_|  |_/_|_|\_\___| \_|  \__,_|_| |_|_|\_\
"
" vim plugins with [vim-plug](https://github.com/junegunn/vim-plug). Lazy
" loaded whenever possible.
"
" more info at http://mikefunk.com
" }}}

" Vim-plug setup {{{

" Install Vim-plug on new systems
if empty(glob("~/.vim/autoload/plug.vim"))
    execute "!curl -fLo $HOME/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
endif

call plug#begin('~/.vim/plugged')

" }}}

" from spf13-vim {{{

" General {{{
Plug 'tpope/vim-sensible'
" Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'scrooloose/nerdtree'
" I had trouble getting this to work for some reason
" Plug 'jistr/vim-nerdtree-tabs', { 'on': ['NERDTreeMirrorToggle', 'NERDTreeTabsToggle', 'NERDTreeTabs'] }
" Used for NERDTreeMirrorToggle with <c-e>
Plug 'jistr/vim-nerdtree-tabs'
" change surrounding quotes, etc.
Plug 'tpope/vim-surround'
" make some stuff repeatable that usually isn't
Plug 'tpope/vim-repeat'
" Plug 'spf13/vim-autoclose'
" Plug 'tacahiroy/ctrlp-funky'
" Plug 'terryma/vim-multiple-cursors'
" better supported fork to do sublime-style multiple cursors
" <c-n> to select the current word, then again for the next match
" I just never use it.
" Plug 'kristijanhusak/vim-multiple-cursors'
" I am trying to switch to tpope/vim-obsession
" Plug 'vim-scripts/sessionman.vim', { 'on': ['SessionList', 'SessionSave', 'SessionClose'] }
" I use a different one further down
" Plug 'matchit.zip'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Plug 'bling/vim-bufferline'
" It's great and all but I just don't use it.
" Plug 'Lokaltog/vim-easymotion'
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
" Plug 'nathanaelkane/vim-indent-guides'
" show verticle lines for levels of indentions like an IDE
Plug 'Yggdroot/indentLine'
" I think airline or something does this already
" Plug 'vim-scripts/restore_view.vim'
" show added/modified/removed lines in version control in the signs column
" SLOW
" Plug 'mhinz/vim-signify'
" Plug 'tpope/vim-abolish', { 'on': 'Abolish' }
" :Subvert or :S
Plug 'tpope/vim-abolish'
" Preview command line actions
" I never use this
" Plug 'osyo-manga/vim-over'
" create your own text objects - required by some other text object plugins
" I use
Plug 'kana/vim-textobj-user'
" Plug 'kana/vim-textobj-indent'
" press enter to grow selection, backspace to shrink.
" I never use this
" Plug 'gcmt/wildfire.vim'
" }}}

" General Programming {{{
Plug 'scrooloose/syntastic', { 'for': ['vim', 'php', 'python', 'javascript', 'javascript.jsx', 'css'] }
if executable('git')
    Plug 'tpope/vim-fugitive'
endif
if executable('curl')
    Plug 'mattn/webapi-vim'
    Plug 'mattn/gist-vim', { 'on': 'Gist' }
endif
" Comment toggle with
" <leader>C<space>
Plug 'scrooloose/nerdcommenter'
" Plug 'tpope/vim-commentary'
" Align operators like this
" one   = 1
" two   = 2
" three = 3
" four  = 4
" I never use this because of teamwork and git
" Plug 'godlygeek/tabular'
" }}}

" Completion {{{
if has("python")
    Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
    Plug 'SirVer/ultisnips'

    " lazy load ultisnips and youcompleteme on insert mode
    " https://github.com/junegunn/vim-plug/wiki/faq#loading-plugins-manually

    " Plug 'SirVer/ultisnips', {'on': [] }

    " augroup load_us_ycm
      " autocmd!
    " augroup END
    " autocmd load_us_ycm InsertEnter * call plug#load('ultisnips', 'YouCompleteMe')
                     " \| call youcompleteme#Enable() | autocmd! load_us_ycm

    " These are cool but I'd rather define every one of my snippets so I know
    " what they do. Also my 'next completion block' key is the same as my
    " complete this key so i often end up accidentally completing when I mean
    " to skip to the next block.
    " Plug 'honza/vim-snippets'

    " Much simpler and faster tab completion for vim
    " Maybe too simple... also is nearly useless on large projects due to slow
    " omnicomplete in php.
    " Plug 'ajh17/VimCompletesMe'
endif

" give neocomplete a try...
" won't work with neovim unless they get that viml->lua transcoder working
" if has('lua')
    " Plug 'Shougo/neocomplete.vim'
    " Plug 'violetyk/neocomplete-php.vim'
" endif
" }}}

" Python {{{
Plug 'yssource/python.vim', { 'for': 'python' }
Plug 'klen/python-mode', { 'for': 'python' }
Plug 'python_match.vim', { 'for': 'python' }
Plug 'pythoncomplete', { 'for': 'python' }
" }}}

" JavaScript {{{

" typescript syntax
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
" typescript completion
Plug 'Quramy/tsuquyomi', { 'for': 'typescript' }

" preview current js transpiled to babel!
Plug 'jbgutierrez/vim-babel', { 'for': 'javascript' }

" json formatting
Plug 'elzr/vim-json', { 'for': 'json' }

" better javascript syntax highlighting/indenting
Plug 'pangloss/vim-javascript', { 'for': ['javscript', 'javascript.jsx'] }

" react jsx - requires pangloss/vim-javascript
Plug 'mxw/vim-jsx', { 'for': 'javascript.jsx' }

" Enhanced JavaScript Syntax for Vim
" Plug 'jelera/vim-javascript-syntax', { 'for': 'javascript' }
" yet another... supposed to be better than jelera.
" includes es6 support, web apis, and dom keywords.
" Plug 'othree/yajs.vim', { 'for': 'javascript' }
" Plug 'briancollins/vim-jst'
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }

" aj provides a text object for the outermost JSON object, array, string, number, or keyword.
" gqaj 'pretty prints' (wraps/indents/sorts keys/otherwise cleans up) the JSON construct under the cursor.
" gwaj takes the JSON object on the clipboard and extends it into the JSON object under the cursor.
" There are also ij variants that target innermost rather than outermost JSON construct.
" I don't use this
" Plug 'tpope/vim-jdaddy', { 'for': ['json', 'javascript'] }

" adds some tools to jump to definition, look up docs, find type, etc.
" I don't use it and it's been giving me weird errors when trying to reinstall.
" if has('npm')
" Plug 'marijnh/tern_for_vim', { 'for': 'javascript', 'do': 'npm install' }
" endif
" }}}

" HTML {{{
" auto close tags by typing </
Plug 'docunext/closetag.vim', { 'for': ['html', 'xml', 'html.twig', 'blade', 'php'] }
Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'less', 'sass', 'scss'] }

if has('python')
    " always highlight the current html opening and closing tag you're in
    Plug 'Valloric/MatchTagAlways', { 'for': ['html', 'xml', 'blade', 'html.twig', 'php'] }
else
    Plug 'gregsexton/MatchTag', { 'for': ['html', 'xml', 'blade', 'html.twig', 'php'] }
endif
" }}}

" Ruby {{{
Plug 'tpope/vim-rails', { 'for': 'ruby' }
" }}}

" Puppet {{{
Plug 'rodjek/vim-puppet', { 'for': 'puppet' }
" }}}

" Go {{{
Plug 'fatih/vim-go', { 'for': 'go' }
" }}}

" Markdown {{{
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
" }}}

" }}}

" not from spf13-vim {{{

" General {{{

" Does this project use tabs or spaces? etc.
Plug 'editorconfig/editorconfig-vim'

" show enabled plugins in macvim in a menu at the top
" I hardly ever use gui
" if has("gui_running")
    " Plug 'mbadran/headlights'
" endif

" syntastic, youcompleteme, ctrlp, etc. for c#/asp.net
" after installing mono, cloning submodules, and building, still can't find csc.exe
" Plug 'OmniSharp/omnisharp-vim', { 'for': ['aspx', 'cs'], 'do': 'git submodule update --init --recursive && cd server && xbuild', 'on': [] }

" rename a file with :Rename mynewname
" I use NERDTree
" Plug 'AlexJF/rename.vim', { 'on': 'Rename' }

" rogue in vim? sure why not
" Plug 'katono/rogue.vim'

" repl for php, coffee, js, mysql, etc.
" I don't use this
" Plug 'zweifisch/pipe2eval'

" open a scratch buffer with :Scratch that will not ask you to save and
" will go away when closing vim
" I don't use this
" Plug 'duff/vim-scratch'

" Turn vim options on and off - with tab complete
" :onoff <tab> to get options
" I don't use it.
" Plug 'vitalk/vim-onoff'

" open url
" nnoremap <leader>gu <Plug>(openbrowser-open)
" Plug 'tyru/open-browser.vim'
" I don't need this, I have a one-line mapping that works great on mac.
" Plug 'vim-scripts/open-browser.vim'

" Deal with swap files better, automatically. Really helpful!
" opens a terminal window whenever this script triggers. annoying.
" Plug 'vim-scripts/autoswap.vim'

" create files and parent dirs at the same time
" :e my/non-existent/dir/file.php
" I use nerdtree
" Plug 'dockyard/vim-easydir'

" share registers across vim installations
" sets the updatetime to 200ms. bad.
" I just don't need this functionality
" Plug 'ardagnir/united-front'

" Add some unix stuff like :Chmod, :Unlink, etc.
" :Unlink[!]
" :Remove[!]
" :Move[!] {file}
" :Rename[!] {file}
" :Chmod {mode}
" :Mkdir {dir}
" :Mkdir! {dir}
" :Mkdir[!]
" :Find[!] {args}
" :Locate[!] {args}
" :SudoEdit [file]
" :SudoWrite
" :W
" I don't use it. I tend to use NERDTree for moving, deleting, etc.
" Plug 'tpope/vim-eunuch'

" used for auto-update ctags on save and other stuff
" I just use a custom dispatch command for this now instead of a plugin.
" nnoremap <silent> <Leader>ut
" So much more reliable.
Plug 'tpope/vim-dispatch', { 'on': 'Dispatch' }

if has('nvim')
    " help for neovim. requires vimproc.
    Plug 'p0deje/vim-dispatch-vimshell', { 'on': 'Dispatch' }
endif

" Debug problematic vim plugins
" :Bisectly to start
" :Zombies if problem still exists (lol)
" :Unicorns if problem is fixed (lol)
Plug 'dahu/bisectly', { 'on': 'Bisectly' }

" }}}

" Copy and paste {{{

" display a persistent view of vim :registers in a sidebar window
" :LOTROpen
" :LOTRClose
" :LOTRToggle also available through <PLUG>LOTRToggle which is mapped to <leader>cr by default.
" error: Vim version is too old, LOTR requires at least 7.4, patch 392
" This is cool but I don't use it
" Plug 'dahu/vim-lotr'

" no more pastetoggle!
" I think because I use screen-256-color this messes up and types some chars
" in command mode
" Plug 'ConradIrwin/vim-bracketed-paste'

" toggle most recent yanks backward and forward in history
" By default, the keys to toggle the paste are mapped to <c-n> and <c-p>
" (similar to yankring). For example, executing p<c-p> will paste, then
" toggle it to the most recent yank before that.
"
" dangit, just too complicated right now. I like the idea. I'll try it
" some other time. p<c-p> doesn't work, haven't figured out why yet.
" Another plugin interfering maybe?
" Plug 'svermeulen/vim-easyclip'

" paste with context-sensitive indenting
Plug 'sickill/vim-pasta'

" Move a line up or down
" <C-k>   Move current line/selection up
" <C-j>   Move current line/selection down
" Plug 'matze/vim-move'

" }}}

" Keyboard {{{

" Toggle the location list and quickfix list windows
" <leader>qq
" <leader>ll
Plug 'milkypostman/vim-togglelist'

" No more caps lock troubles in normal mode!
" Not supported on OSX yet
" Plug 'suxpert/vimcaps'

" adds extra intuitive keyboard shortcuts
" *[a*     |:previous|
" *]a*     |:next|
" *[A*     |:first|
" *]A*     |:last|
" *[b*     |:bprevious|
" *]b*     |:bnext|
" *[B*     |:bfirst|
" *]B*     |:blast|
" *[l*     |:lprevious|
" *]l*     |:lnext|
" *[L*     |:lfirst|
" *]L*     |:llast|
" *[<C-L>* |:lpfile|
" *]<C-L>* |:lnfile|
" *[q*     |:cprevious|
" *]q*     |:cnext|
" *[Q*     |:cfirst|
" *]Q*     |:clast|
" *[<C-Q>* |:cpfile| (Note that <C-Q> only works in a terminal if you disable
" *]<C-Q>* |:cnfile| flow control: stty -ixon)
" *[t*     |:tprevious|
" *]t*     |:tnext|
" *[T*     |:tfirst|
" *]T*     |:tlast|
Plug 'tpope/vim-unimpaired'

" show pretty formatted table of leader shortcuts
Plug 'ktonga/vim-follow-my-lead'

" alias commands to other commands, even in lowercase
" :call CmdAlias('runtime', 'Runtime')
" or simply,
" :Alias runtime Runtime
" I don't use this
" Plug 'vim-scripts/cmdalias.vim'

" temporary caps lock in insert mode with <c-g>c. Good if you remap
" capslock.
" Plug 'tpope/vim-capslock'

" }}}

" Completion and Snippets {{{

" enable . repeat in certain plugins
" I don't notice when it's turned off
" Plug 'tpope/vim-repeat'

" zen coding / emmett integration
" div#page>div.logo+ul#navigation>li*5>a<c-y>, to get html
" <c-y>n and <c-y>N to go to next and previous insert points
Plug 'mattn/emmet-vim', { 'for': ['phtml', 'html', 'html.twig', 'twig', 'blade', 'xml'] }

" much better than snipmate or neosnippet
" :UltiSnipsEdit to edit the snippets file for the current file type
" YouCompleteMe will autocomplete your snippets. <c-j> to complete.
" spf13-vim already includes this with YouCompleteMe
" Plug 'SirVer/ultisnips'

" vim-autoclose causes problems with youcompleteme, it says use this instead
" automatically closes [], (), '', etc.
" This breaks <s-tab> in youcompleteme. use a different one instead
" Plug 'Raimondi/delimitMate'

" this was recommended on reddit instead of delimitmate or autoclose
" Insert or delete brackets, parens, quotes in pair.
Plug 'jiangmiao/auto-pairs'

" Similar to emmett but also can autoclose
" <c-x>/ close latest html tag
" Not really that useful for php
" Plug 'tpope/vim-ragtag', { 'for': ['html', 'html.twig', 'blade', 'xml', 'php'] }

" use c-n and c-p to complete from your buffers in search or command mode
" I've never used this
" Plug 'vim-scripts/CmdlineComplete'

" Match html/xml tags with %
" Plug 'tmhedberg/matchit'
Plug 'edsono/vim-matchit', { 'for': ['html', 'html.twig', 'blade', 'xml', 'php'] }

" symfony completion
" See above. phpcomplete-extended is a pain in the ass.
" Plug 'm2mdas/phpcomplete-extended-symfony'

" This plugin handles:
" symfony routing autocompletion
" symfony DIC autocompletion
" symfony console
" php stack trace navigation using quickfix list
" none of which I care about
" Plug 'docteurklein/vim-symfony', { 'for': 'php' }

" }}}

" Syntax {{{

" fish shell
Plug 'dag/vim-fish'

" api blueprint
Plug 'kylef/apiblueprint.vim', { 'for': 'apiblueprint' }

" restful api modeling language
Plug 'kennethzfeng/vim-raml', { 'for': 'raml' }

" view files for Zend, Symfony, CakePHP, etc.
Plug 'vim-scripts/phtml.vim', { 'for': 'html' }

" Dockerfile syntax highlighting
Plug 'ekalinin/Dockerfile.vim', { 'for': 'Dockerfile' }

" asp.net/c# enhanced
Plug 'OrangeT/vim-csharp', { 'for': ['aspx.html', 'cs'] }

" rust
Plug 'rust-lang/rust.vim', { 'for': 'rust' }

" Hide portions from syntax highlighting. Useful for when syntax coloring
" gets messed up by html in php or markdown quotes/underscores/dashes
" cool but I don't use it
" Plug 'vim-scripts/SyntaxRange', { 'on': ['SyntaxIgnore', 'SyntaxInclude'] }

" nested levels of parentheses are all different colors
Plug 'junegunn/rainbow_parentheses.vim', { 'on': ['RainbowParentheses', 'RainbowParenthesesColors'] }

" preview images in vim via ascii conversion
" NOTE: Requires python library PIL installed via pip:
" sudo pip install Pillow
" this is kind of silly
" if has('python')
    " Plug 'ashisha/image.vim', { 'for': ['png', 'jpg', 'jpeg', 'gif'] }
" endif

" syntax highlighting for twig templates
Plug 'beyondwords/vim-twig', { 'for': 'twig' }

" facebook hhvm hack highlight support
Plug 'hhvm/vim-hack', { 'for': 'hack' }

" syntastic plugin for vimrc
Plug 'dbakker/vim-lint', { 'for': 'vim' }

Plug 'tpope/vim-git', { 'for': 'git' }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }

" Laravel Blade Syntax Highlighting
Plug 'xsbeats/vim-blade', { 'for': 'blade' }

" the only misc bundles I use
" (spf13-vim puts these in there anyway)
" syntax highlighting for markdown and puppet
" Plug 'tpope/vim-markdown'
" Plug 'Puppet-Syntax-Highlighting'

" .tmux.conf syntax hilighting
Plug 'vimez/vim-tmux', { 'for': 'tmux' }

" }}}

" Css {{{
" Update the bult-in CSS complete function to latest CSS standard.
Plug 'othree/csscomplete.vim', { 'for': 'css' }
Plug 'groenewege/vim-less', { 'for': 'less' }

" colorize css colors without causing $VIMRC reload problems
Plug 'ap/vim-css-color', { 'for': ['css', 'scss', 'sass', 'less'] }
" breaks horribly
" Plug 'chrisbra/Colorizer', { 'for': ['css', 'scss', 'sass', 'less'] }

" color designer tool
" View colors
" :ColorV (<leader>cv): show ColorV window
" :ColorVView (<leader>cw): show ColorV window with color text under cursor.
" :ColorVPreview (<leader>cpp): Preview colors in current buffer
" Edit colors
" :ColorVEdit (<leader>ce): Edit color text under cursor
" :ColorVEditAll (<leader>cE): Edit color text under cursor and change all in current buffer.
" :ColorVInsert (<leader>cii): Insert color with ColorV window.
" Design Colors
" :ColorVName (<leader>cn): show color name list window.
" :ColorVList Hue (<leader>cgh) generate Hue list with color text under cursor.
" :ColorVTurn2 {hex1} {hex2} (<leader>cgg) generate Hue list from hex1 to hex2.
" :ColorVPicker (<leader>cd): show a GUI color picker.
" Design Schemes
" :ColorVScheme (<leader>css) Fetch scheme from Kuler or ColourLover
" :ColorVSchemeFav (<leader>csf) Show Faved schemes
" :ColorVSchemeNew (<leader>csn) Create a new scheme
" Cool but I never use it
" Plug 'Rykka/colorv.vim', { 'for': ['html', 'blade', 'css', 'scss', 'less', 'sass', 'html.twig', 'smarty'] }

" }}}

" Php {{{

" update php syntax for 5.3-5.6
Plug 'StanAngeloff/php.vim', { 'for': 'php' }

" php manual in vim - get def of word under cursor with shift-K
Plug 'alvan/vim-php-manual', { 'for': ['php', 'blade'] }

" highlight all occurences of php variable under cursor
" Plug 'vim-scripts/vawa.vim', { 'for': 'php' }

" Just for code coverage highlighting
" :Phpcc - show code coverage (will ask for a clover XML file if not set)
" <Leader>qc  " Show/hide code coverage markers
" I don't care much about coverage right now. I may re-enable it sometime.
" Plug 'joonty/vim-phpqa', { 'for': 'php' }

" customizable php folding
" I don't use folding but this is cool when it's on
Plug 'swekaj/php-foldexpr.vim', { 'for': 'php' }

" was used in PIV for php folding
" <space> toggle fold
" za toggle fold
" <leader>f[number] set the fold level to this number
" zR open all folds
" Plug 'rayburgemeestre/phpfolding.vim'

" apparently better php indenting for PHP 5.4+
Plug '2072/PHP-Indenting-for-VIm', { 'for': 'php' }

" improved phpdoc implementation. documents the function/class/var below the
" cursor
" Plug 'tobyS/pdv', { 'for': 'php' }
" fork that works better with phpcomplete.vim to update @var variables
" nnoremap <buffer> <leader>pd :call pdv#DocumentWithSnip()<CR>
" Plug 'FlickerBean/pdv', { 'for': 'php' }
" doesn't want to work lazy loaded
Plug 'FlickerBean/pdv'
" required for FlickerBean/pdv. Only needed for pdv.
Plug 'tobyS/vmustache', { 'for': 'php' }
" fork that supposedly works better...
" Plug 'Rican7/php-doc-modded', { 'for': 'php' }

" I think this is entirely different but it actually works which is nice
" au BufRead,BufNewFile *.php inoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
" au BufRead,BufNewFile *.php nnoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
" au BufRead,BufNewFile *.php vnoremap <buffer> <leader>pd :call PhpDocRange()<CR>
" I use a different one above
" Plug 'sumpygump/php-documentor-vim', { 'for': 'php' }

" better php ctags in tagbar
" <leader>tt to toggle tagbar. This makes it look prettier
" Plug 'techlivezheng/vim-plugin-tagbar-phpctags'
if executable('phpctags')
    Plug 'vim-php/tagbar-phpctags.vim', { 'for': 'php', 'do': 'make' }
endif

" php namespace and use block autocomplete. sometimes buggy.
" inoremap <Leader><Leader>u <C-O>:call PhpInsertUse()<CR>
" noremap <Leader><Leader>u :call PhpInsertUse()<CR>
" inoremap <Leader><Leader>e <C-O>:call PhpExpandClass()<CR>
" noremap  <Leader><Leader>e :call PhpExpandClass()<CR>
Plug 'arnaud-lb/vim-php-namespace', { 'for': 'php' }

" xdebug integration
" Step over <F2>
" Step in <F3>
" Step out <F4>
" Run <F5>
" Run to cursor <F9>
" Detach <F7>
" Stop/close <F6>
" :VdebugEval <code>

" can also debug nodejs
" Plug 'joonty/vdebug', { 'for': [ 'php', 'javascript' ] }
Plug 'joonty/vdebug', { 'for': 'php' }

" improved php omnicompletion
Plug 'shawncplus/phpcomplete.vim', { 'for': 'php' }

" Padawan.vim is a vim plugin for padawan.php server , a smart PHP code completion server for Composer projects.
" This plugin includes:
" * Omnifunc
" * Commands for index generation and index saving
" * Commands for starting, stopping and restarting the server
" In your php composer project folder, run the following vim command to generate an index:
" `:PadawanGenerateIndex`
" Start Padawan.php server with:
" `:PadawanStartServer`
" Enjoy smart completion
" Index generation can take a while, but needs to be performed only once per project.
" MUUUUUUUCH faster than phpcomplete!!!
" disabled because it fails to parse on a codebase I'm working on. :(
" Plug 'mkusher/padawan.vim', { 'for': 'php' }

" required for phpcomplete-extended
" required for tsuqyomi
" required for vim-dispatch-vimshell
" And perhaps other packages...
Plug 'Shougo/vimproc', { 'do': 'make' }

" php completion for composer projects
" php-complete-extended breaks horribly with any php files with multiple
" classes. I reported the bug and the author does not want to fix that. It
" also asks 'composer project detected. Do you want to index?' every time
" you open a composer project. And it takes longer to load the index when
" it works. And it causes crazy problems sometimes with YouCompleteMe. And
" it sometimes experiences PHP sytax errors, which it barfs into the vim
" window in weird places. Combination of these means forget about it
" for now.
" Plug 'm2mdas/phpcomplete-extended'

" laravel completion
" See above
" Plug 'm2mdas/phpcomplete-extended-laravel'

" php getters and setters
" map <buffer> <leader>sg <Plug>PhpgetsetInsertGetterSetter
" I use ultisnips instead -- more customizable and no need for yet another
" plugin
" Plug 'docteurklein/php-getter-setter.vim'

" coding standards fixer integration
" nnoremap <silent><leader>pcd :call PhpCsFixerFixDirectory()<CR>
" nnoremap <silent><leader>pcf :call PhpCsFixerFixFile()<CR>
Plug 'stephpy/vim-php-cs-fixer', { 'for': 'php' }

" phpunit integration
" Plug 'joonty/vim-phpunitqf.git'
" Works but kind of lame. Can't specify the window size.
" I replaced this with my own Dispatch commands.
" nnoremap <leader>pf :VimuxPHPUnitRunCurrentFile<cr>
" nnoremap <leader>pu :call VimuxRunCommand("phpunit")<cr>
" nnoremap <leader>pp :VimuxRunLastCommand<cr>
" Plug 'jonyamo/phpunit.vim'

" more flexible phpunit integration with vimux. combine this with my own
" phpunit command for all tests and I can rerun the latest vimux command,
" set the window size, adjust size and it will stick, run arbitrary
" commands and filters from vim, etc.
" see above for commands
" I just pasted this into my .vimrc.local - it was only like 5 lines.
" Plug 'thiagoalessio/vimux-phpunit'



" whoa, cool. change variable names, extract code to a function, extract
" local var to instance var.
"
" doesn't work very well. Can only extract a visual selection to a method.
" Everything else says 'not enough parameters'. Maybe I can get it to work
" someday.
"
" EXTRACT METHOD
" Go into visual mode and select the code you want to extract to a new
" method the press <Leader>rem You will be prompted for the name of the new
" method.
"
" RENAME LOCAL VARIABLE
" In normal mode move the cursor so it's inside the name of the variable
" which you want to rename. Press <Leader>rlv
"
" LOCAL VARIABLE TO INSTANCE VARIABLE
" In normal mode move the cursor so it's inside the name of the variable
" which you want to rename. Press <Leader>rli
"
" OPTIMIZE USE
" Simple press <Leader>rou to run the optimize use refactoring.
" The Qafoo labs cli tool does have active development on this, which is nice.
" Kind of dumb extract method. Someday I hope to find a good refactoring tool.
" Plug 'vim-php/vim-php-refactoring', { 'for': 'php' }



" php refactor tools
" nnoremap <unique> <Leader>rlv :call PhpRenameLocalVariable()<CR>
" nnoremap <unique> <Leader>rcv :call PhpRenameClassVariable()<CR>
" nnoremap <unique> <Leader>rm :call PhpRenameMethod()<CR>
" nnoremap <unique> <Leader>eu :call PhpExtractUse()<CR>
" vnoremap <unique> <Leader>ec :call PhpExtractConst()<CR>
" nnoremap <unique> <Leader>ep :call PhpExtractClassProperty()<CR>
" vnoremap <unique> <Leader>em :call PhpExtractMethod()<CR>
" nnoremap <unique> <Leader>np :call PhpCreateProperty()<CR>
" nnoremap <unique> <Leader>du :call PhpDetectUnusedUseStatements()<CR>
" vnoremap <unique> <Leader>== :call PhpAlignAssigns()<CR>
" nnoremap <unique> <Leader>sg :call PhpCreateSettersAndGetters()<CR>
" nnoremap <unique> <Leader>da :call PhpDocAll()<CR>

" My biggest problem with this plugin is that when I extract a method, it
" thinks I need _all_ of the variables defined. It returns them all and
" assigns them to a var with list(). This is almost never what I want. All the
" other ones are pretty cool though.
" currently removed because of the useless extract_method
" Plug 'adoy/vim-php-refactoring-toolbox', { 'for': 'php' }
" Using my fork because of the unique mapping bullcrap
Plug 'mikedfunk/vim-php-refactoring-toolbox', { 'for': 'php' }

" A totally different one that doesn't work very well
" Plug 'beberlei/vim-php-refactor'

" }}}

" Looks {{{

" hide all ui elements and focus on the block you're in
" :DistractionFreeToggle
" :DistractionsOn
" :DistractionsOff
" Cool but I never use it
" Plug 'DanielFGray/DistractionFree.vim'

" hyper-focus on the current paragraph visually. works with distraction free.
" :Limielight!! toggle
" Cool but I never use it
" Plug 'junegunn/limelight.vim'

" higlight an interesting word in the doc, in a unique color
" <leader>1 higlight in first color
" <leader>2 higlight in second color (etc...)
" <leader>0 clear all highlights
" Plug 'pydave/vim-hiinterestingword'
" alternative
" Plug 'idbrii/vim-mark'
" superset of this concept
" Plug 'vim-scripts/Mark--Karkat'

" crosshairs on parens and such. Easier to find where you're currently at...?
" buggy. not always on parens.
" Plug 'chreekat/vim-paren-crosshairs'

" highlight matching words under cursor all the time. Can be adjusted with
" highlight group and with filetype whitelist/blacklist. I like it - the
" highlight group is nice and subtle and it works well.
" It's quite slow though - 1.5 seconds to load!
Plug 'osyo-manga/vim-brightest'

" highlights in bright red any trailing whitespace
" I whitelisted this pretty much just so I could get ascii art on startify :P
Plug 'ntpeters/vim-better-whitespace', { 'for': ['php', 'python', 'javascript', 'javascript.jsx', 'css', 'less', 'coffee', 'xml', 'json'] }

" If I'm on a project that uses tabs instead of spaces, highlight starting
" spaces
" Plug 'guiniol/vim-showspaces'

" pulse the background on search to find the currently found item. Really
" helpful pretty UI addition.
" works great... in some color schemes. In others it's just annoying.
" Plug 'inside/vim-search-pulse'

" Highlight the current word throughout the doc
" I use a autocmd for this that works better instead in my .vimrc.local
"
" Occasionally I use that autocmd but I usually get annoyed by it after
" a while. It clobbers all other highlights like syntax highlighting and
" search highlights, which is a bummer.
" Plug 'OrelSokolov/HiCursorWords'

" show all 256 colors and their numbers. useful for assigning colors in
" different color schemes.
Plug 'guns/xterm-color-table.vim', { 'on': 'XtermColorTable' }

" a bunch of color schemes to try. Most don't work in 256.
" Plug 'flazz/vim-colorschemes'

" Color schemes that don't look good in screen-256-colors
" --------------
" Plug '29decibel/codeschool-vim-theme'
" Plug 'tpope/vim-vividchalk'
" Plug 'morhetz/gruvbox'
" this needs the following iterm2 themes: chriskempson/base16-iterm2
" Plug 'chriskempson/base16-vim'
" Plug 'daylerees/colour-schemes', { 'rtp': 'vim/' }
" Plug 'endel/vim-github-colorscheme'
" Plug 'ricardovaleriano/vim-github-theme'
" Plug '29decibel/codeschool-vim-theme'
" grb256 color scheme
" Plug 'garybernhardt/dotfiles', { 'rtp': '.vim/' }
Plug 'morhetz/gruvbox'
" Plug 'vim-scripts/guardian'
" Plug 'vim-scripts/herald.vim'
" Plug 'vim-scripts/moria'
" Plug 'matthewtodd/vim-twilight'
" Plug 'tpope/vim-vividchalk'
" Plug 'vim-scripts/Zenburn'
" Plug 'reedes/vim-colors-pencil'
" Plug 'modess/vim-phpcolors'
" Plug 'vim-scripts/desert256.vim'
" Plug 'vim-scripts/xoria256.vim'
" Plug 'noahfrederick/vim-noctu'
" Plug 'zenorocha/dracula-theme', {'rtp': 'vim/'}
" Plug 'Slava/vim-colors-tomorrow'
" Plug 'vim-scripts/blackdust.vim'
" Plug 'vim-scripts/peaksea'
" Plug 'therubymug/vim-pyte'
" Plug 'ercolanelli-leo/candyVirus'
" Plug 'sandeepsinghmails/Dev_Delight'
" Plug 'vim-scripts/forest'
" Plug 'vim-scripts/ecostation'
" Plug 'Marslo/marslo.vim'
" Plug 'vim-scripts/sonoma.vim'
" Plug 'vim-scripts/Gummybears'
" Plug 'vim-scripts/Cleanroom'
" Plug 'veloce/vim-aldmeris'
" Plug 'rainux/vim-desert-warm-256'
" Plug 'vim-scripts/summerfruit256.vim'
" Plug 'trapd00r/neverland-vim-theme'
" Plug 'vim-scripts/robokai'
" Plug 'zaiste/Atom'
" Plug 'joschka/Smyck-Color-Scheme'
" Plug 'michalbachowski/vim-wombat256mod'
" gets messed up when switching background
" Plug 'noahfrederick/vim-hemisu'
" Plug 'blueshirts/darcula'
" Plug 'jdkanani/vim-material-theme'
" Plug 'NLKNguyen/papercolor-theme'

" just for testing some of the top color schemes - lots of gui-only here
" Plug 'vim-scripts/Colour-Sampler-Pack'

" a ton of 256 color schemes that mostly look like crap on my setup
" Plug 'noah/vim256-color'

" Schemes that look good in 256 colors:
" Some of these I have commented out just because I don't currently use them
" --------------
Plug 'nanotech/jellybeans.vim'
" Plug 'zeis/vim-kolor'
Plug 'tomasr/molokai'
" Plug 'Lokaltog/vim-distinguished'
Plug 'junegunn/seoul256.vim'
Plug 'jnurmine/Zenburn'
" Plug 'cocopon/iceberg.vim'
" Plug 'w0ng/vim-hybrid'
" Plug 'nielsmadan/harlequin'
" Plug 'hickop/vim-hickop-colors'
Plug 'sjl/badwolf'
" Plug 'jonathanfilip/vim-lucius'
" lucius fork to include fugitive colors
Plug 'MarioRicalde/vim-lucius'
Plug 'whatyouhide/vim-gotham'
Plug 'chriskempson/tomorrow-theme', { 'rtp': 'vim/' }
" Plug 'jonathanpatt/vim-koala'
" Plug 'baskerville/bubblegum'
" the light version looks good except for the colorcolumn
" dark version has an ugly pink colorcolumn
Plug 'freeo/vim-kalisi'
" Plug 'vim-scripts/The-Vim-Gardener'
" Plug 'ciaranm/inkpot'
Plug 'fmoralesc/molokayo'
Plug 'romainl/Apprentice'

" Can I please have some trouble
" Plug 'godlygeek/csapprox'

" custom bash prompt in sync with airline
" :PromptlineSnapshot! ~/.dotfiles/to_link/promptline.theme.bash
" I can turn if off until I need to customize it
Plug 'edkolev/promptline.vim', { 'on': ['Promptline', 'PromptlineSnapshot'] }

" smooth vertical scrolling
" This is AWESOME. One of my favorite plugins. animates scrolling.
Plug 'yonchu/accelerated-smooth-scroll'

" Plug 'blueyed/vim-colors-solarized'
" Plug 'https://github.com/jwhitley/vim-colors-solarized.git'
" different fork of solarized that fixes stuff. USE THIS ONE BELOW
" Plug 'jwhitley/vim-colors-solarized'

" easy way to scroll through color schemes
" cycle, rotate
" Turned off until I need it
Plug 'vim-scripts/ScrollColors', { 'on': 'SCROLL' }

" highlight matches for word, current line, etc.
" doesn't work after switching to light mode or re-sourcing vimrc
"<c-h><c-h> to sticky highlight a selection. <c-h><c-n> to remove all
" highlights.
" I just don't use this. It also doesn't do much in Lucius.
" Plug 'vim-scripts/highlight.vim'

" check what highlights are on the current line with :HLT! and :HLTm to
" disable until needed. Useful for debugging highlight groups
" Plug 'kergoth/vim-hilinks'
Plug 'kergoth/vim-hilinks', { 'on': ['HLT', 'HLTm'] }

" Set background to light or dark automatically at sunrise/sunset
" does what it says but I like to set bg to whatever i want whenever i want
" Plug 'amdt/sunset'

" What it sounds like!
" slows things down a bit
" Plug 'atimholt/spiffy_foldtext'

" }}}

" Text Manipulation and Selection {{{

" Peekaboo will show you the contents of the registers on the sidebar when you
" hit " or @ in normal mode or <CTRL-R> in insert mode. The sidebar is
" automatically closed on subsequent key strokes.
" This is cool but I've never bothered to look at it. 99% of the time I only
" use one register.
" Plug 'junegunn/vim-peekaboo'

" use :Switch to swap between 2 or more paired definitions in .vimrc
" Cool but I've never used it
Plug 'AndrewRadev/switch.vim', { 'on': 'Switch' }

" take a bunch of zeroes and make them sequential. (rengbang is some japanese
" word for doing this)
" from visual mode: :`<, `>RengBang
" Plug 'deris/vim-rengbang'
Plug 'deris/vim-rengbang', { 'on': 'RengBang' }

" make changes in the quickfix window, save, and your changes are made in
" the original files! Awesome when paired with :Ag!
Plug 'stefandtw/quickfix-reflector.vim'
" similar plugins:
" Plug 'jceb/vim-editqf'
" Plug 'thinca/vim-qfreplace'

" Automatically detect indentation and set it
" BUT it sets expandtab on php by default! Lame!
Plug 'tpope/vim-sleuth'

" put html tags from one line to multiline or the opposite
" works for practically any language. just wish it worked in function
" definitions! I would use the shit out of that to make function params
" multiline or back to single line.
"
" gS to split
" gJ to join
Plug 'AndrewRadev/splitjoin.vim'

" The plugin defines two commands, :SidewaysLeft and :SidewaysRight, which move
" the item under the cursor left or right, where an 'item' is defined by a
" delimiter.
" used to move function arguments
Plug 'AndrewRadev/sideways.vim', { 'on': ['SidewaysLeft', 'SidewaysRight'] }

" Align in columns
" Too much crossover with tabularize
" Plug 'junegunn/vim-easy-align'

" Move vertically without changing the cursor column in block edit mode
Plug 'bruno-/vim-vertical-move'

" this makes blank line with spaces only the end of a paragraph
Plug 'justinmk/vim-ipmotion'

" expand the visual selection with + and _
" I'd rather be specific about my selection. this is about the same as
" wildfire.vim
" Plug 'terryma/vim-expand-region'

" swap blocks of code with cx (c then x) example: cxiw to mark a word,
" then go to another word and cxiw. The words will swap. Very exciting.
" I hardly ever use this
" Plug 'tommcdo/vim-exchange'

" increment/decrement dates
" I like long runs on the beach and holding hands in the movie theatre
" <c-b> on date. I remapped vim's default <c-a> to <c-b> because of tmux.
" I have never used this
" Plug 'tpope/vim-speeddating'

" smart search, replace, abbreviation fixer
" :%S/mixed_case_thing/other_thing/g replaces MixedCaseThing in context as
" well. Also camel-case, etc.
"
" coerce to a different case:
" crs convert to snake_case
" crm MixedCase
" crc camelCase
" cru UPPER_CASE
" I already have this in spf13-vim plugin definitions
" Plug 'tpope/vim-abolish'

" auto add comma or semicolon to end of line
" <leader>;
" I don't use it. typing 'A,' is just as good it seems
" Plug 'lfilho/cosco.vim'

" expand things like {foo,bar} with :Expand in visual mode
" I never use this
" Plug 'Wolfy87/vim-expand', { 'on': 'Expand' }

" }}}

" Navigation and Search {{{

" show search results instantly even with regex searches
Plug 'haya14busa/incsearch.vim'

" make vim understand line and column numbers from xdebug and the like
" I've never actually used this
" Plug 'kopischke/vim-fetch'

" motions based on indent depths
" [- : Move to previous line of lesser indent than the current line.
" [+ : Move to previous line of greater indent than the current line.
" [= : Move to previous line of same indent as the current line that is separated from the current line by lines of different indents.
" ]- : Move to next line of lesser indent than the current line.
" ]+ : Move to next line of greater indent than the current line.
" ]= : Move to next line of same indent as the current line that is separated from the current line by lines of different indents.

" In addition, you can navigate directly to a line of a particular indent-level using:

" {count}[_ : Move to previous line with indent-level of {count}.
" {count}]_ : Move to next line with indent-level of {count}.
" Cool but I don't use it
" Plug 'jeetsukumaran/vim-indentwise'

" show a tags sidebar window like nerdtree
" :TagExplorer
" Cool but I don't use it
" Plug 'vim-scripts/tagexplorer.vim', { 'on': 'TagExplorer' }

" highlight f and t searches, use same motion to ; or \
" this just annoys me
" Plug 'rhysd/clever-f.vim'

" sublime-style minimap.
" Not working yet. Maybe it will someday?
" It follows the cursor but it is buggy. And clicking breaks horribly.
" Plug 'severin-lemaignan/vim-minimap'

" Make links, folds, emails, files clickable
" Not working yet - still experimental
" Plug 'Rykka/clickable.vim'

" focus on only the selected text with :NR<cr>
" I don't use this. It doesn't set the file type right!
" Plug 'chrisbra/NrrwRgn', { 'on': 'NR' }

" set up automated test running per project via vim-dispatch, jumping to
" tests from classes and vice-versa, etc.
" In addition to any navigation commands provided by your projections (which
" take the form :Efoo, :Sfoo, :Vfoo, :Tfoo, and :Dfoo), the following commands
" are available.
" Most awesome thing ever for TDD!!!
" :A                      Edit the alternate file for the current buffer, as
                        " defined by the alternate key.
" :AS [file]              Like :A, but open in a split.
" :AV [file]              Like :A, but open in a vertical split.
" :AT [file]              Like :A, but open in a tab.
Plug 'tpope/vim-projectionist'
" alternative to projectionist that adds more fancy stuff
" Plug 'dsawardekar/portkey'

" TagBar support for coffeescript? Yes please!
" @note requires CoffeeScript ruby gem
" I don't need this
" Plug 'lukaszkorecki/CoffeeTags', { 'for': 'coffee' }

" move between function arguments and stuff
" Shifting arguments with <, and >,
" Moving between argument boundaries with [, and ],
" New text objects a, and i,
" Cool idea but I don't need it. besides I already have a , object.
" Plug 'PeterRincker/vim-argumentative'

" replace search functions to do cool stuff. My favorite is removing the
" highlight when moving the cursor!
" errors out :(
" Plug 'junegunn/vim-oblique'

" search and replace across multiple files!
" example:
" :GitGrep foo.*bar (or :Ag! mysearchterm)
" :Qdo %s/foo.*bar/baz/g | update
" I can just edit the quickfix window with another plugin. Disabled.
" Plug 'henrik/vim-qargs', { 'on': ['GitGrep', 'Qdo'] }

" vim search and replace in directory
" Plug 'vim-scripts/Greplace.vim'

" jump to definition even if tags file doesn't exist
" I use ctags so this is redundant and adds clutter to ctrlp
" Plug 'tacahiroy/ctrlp-funky'

" The missing link in ctrlp navigation: switch tabs
if isdirectory(expand("~/.vim/plugged/ctrlp.vim"))
    Plug 'DavidEGx/ctrlp-smarttabs'
endif

" open directory in finder
" <gof> opens the file manager at the directory of the file you are currently
" editing in Vim.
"
" <got> opens the terminal at the directory of the file you are currently
" editing in Vim. Works with tmux - makes a vertical split!
" I generally don't need to do this
" Plug 'justinmk/vim-gtfo'

" better than Ack
" :Ag! 'my search' [options]
if executable('ag')
    if has('nvim')
        " neovim support
        Plug 'Numkil/ag.nvim'
    else
        " Plug 'rking/ag.vim', { 'on': 'Ag' }
        " lazy loading only worked sporadically
        Plug 'rking/ag.vim'
    endif
endif

" allow to star search from a visual selection
" viw *
Plug 'thinca/vim-visualstar', { 'on': ['<Plug>visualstar-*', '<Plug>visualstar-#', '<Plug>visualstar-g*', '<Plug>visualstar-g#'] }

" faster ctrlp matcher
" still not instantaneous like ag
" if has('python') && isdirectory(expand("~/.vim/plugged/ctrlp.vim"))
    " NOTE: if you change this you have to change the matcher in .vimrc
    " Plug 'FelikZ/ctrlp-py-matcher'
" endif

" even faster ctrlp matcher
" still not instantaneous like ag
" but I've had some problems with it not finding stuff. Maybe I'll try it
" again later.
" if has('python') && isdirectory(expand("~/.vim/plugged/ctrlp.vim"))
    " NOTE: if you change this you have to change the matcher in .vimrc
    " Plug 'nixprime/cpsm', { 'do': './install.sh' }
" endif

" better tag selector with ctrlp
" <c-]> will open ctrl-p with possible links if more than one is available
" This has trouble opening in vsplits or tabs
" Plug 'ivalkeen/vim-ctrlp-tjump'

" different fork of ctrlp that accepts pull requests
Plug 'ctrlpvim/ctrlp.vim'

" only for added sources for phpcomplete_extended
" which I currently do NOT use
" Plug 'Shougo/unite.vim'

" better vim start screen
Plug 'mhinz/vim-startify'

" smart jump to project root
" nnoremap <silent> <Leader>pr <Plug>RooterChangeToRootDirectory
" Plug 'dbakker/vim-projectroot'
" this one does it automatically
" Startify does this
" Plug 'airblade/vim-rooter'

" wget menu item in NERDTree!
" m then w, then type url
" I don't use this. I'll enable it if I do.
" Plug 'markgandolfo/nerdtree-wget.vim'

" extra git stuff in nerdtree
" I don't need this
" Plug 'low-ghost/nerdtree-fugitive'

" makes folds only recalculate on save, making completion faster (right?)
" this is fine and all but I disable folding. This re-enables it.
" Plug 'Konfekt/FastFold'

" }}}

" Windows and Tabs {{{

" accidentally didn't type the whole file name, expecting tab complete to
" finish it? This will help.
Plug 'EinfachToll/DidYouMean'

" Swap windows just like cxiw. Mark the first window with <leader>ww. Then
" switch to the second window and do <leader>ww again. The windows will
" swap. Simple!
" cool but I usually don't have more than 2 splits
" Plug 'wesQ3/vim-windowswap'

" :BD to load previous buffer in current window
" :BB and :BF to move backwards and forwards in buffer history of current
" window
" :BUN to unload a buffer without closing window
" :BW to wipe a buffer without closing window
" I don't use it
" Plug 'vim-scripts/bufkill.vim'

" reopen closed window, mapping in .vimrc.local
" nnoremap <leader>uc :UcwRestoreWindow<cr>
Plug 'tyru/undoclosewin.vim'
" doesn't want to lazy load
" Plug 'tyru/undoclosewin.vim', { 'on': 'UcwRestoreWindow' }

" Zoom toggle current window like tmux pane zooming
" Plug 'vim-scripts/ZoomWin'
" Latest version someone hosted
" <c-w>z to toggle zoom
Plug 'regedarek/ZoomWin'

" allow to close all buffers but the current one
" :BufOnly
Plug 'vim-scripts/BufOnly.vim', { 'on': ['BufOnly', 'Bufonly'] }

" }}}

" Git {{{

" u save lot but no commit. Y u no commit??
if executable('git')
    Plug 'esneider/YUNOcommit.vim'
endif

" comment on the last commit on this line on github!
if executable('git')
    Plug 'mmozuras/vim-github-comment', {'on': ['GHComment'] }
endif

" github and fugitive together from tim pope
" * enables :Gbrowse by fugitive for github repos
" * autocompletes issue numbers in commit messages
Plug 'tpope/vim-rhubarb'

" Gitk clone in vim. ,gv and ,gV to view, <cr> to view commits in a
" split or view diffs.
" I might remove this... I don't use it
" Plug 'gregsexton/gitv'

" Look up a github issue with :Gissues . You can also autocomplete issues
" in fugitive window by typing #[issue number]<c-space>.
" I don't use it at the moment
" Plug 'jaxbot/github-issues.vim'

" Fugitive extension to show branch list and stuff.
" R Refresh the buffer list.
" C/cc Checkout the branch under the cursor.
" A/aa Create a new branch from the currently checked out branch. You'll be prompted to enter a name for the new branch.
" D/dd Delete the branch under the cursor.
" M/mm Merge the branch under the cursor into the currently checked out branch. If there are merge conflicts, the merge conflicts buffer will open in place of the branch list buffer.
" mf Merge the branch under the cursor into the currently checked out branch using Fugitive's :Gmerge command.
" rb Rebase the currently checked out branch against the branch under the cursor. If there are rebase conflicts, the rebase conflicts buffer will open in place of the branch list buffer.
" ps Prompt to choose a remote to push the branch under the cursor.
" pl Prompt to choose a remote to pull the branch under the cursor.
" pf Prompt to choose a remote to fetch the branch under the cursor.
" gd Diff against the branch under the cursor.
" I don't really use this
" Plug 'idanarye/vim-merginal'

" a github dashboard in vim? Let's see how I like it...
" :GHD to see dashboard
" answer: why? web is better.
" Plug 'junegunn/vim-github-dashboard', { 'on': ['GHDashboard', 'GHActivity'] }

" }}}

" Text Objects {{{

" entire document
" vae, vie
" I use this all the time!
Plug 'kana/vim-textobj-entire'

" last search pattern:
" va/, vi/, va?, vi?
" I don't remember ever using this
" Plug 'kana/vim-textobj-lastpat'

" line
" al, il
" I can just use V
" Plug 'kana/vim-textobj-line'

" selection in/around underscore
" a_, i_
Plug 'kana/vim-textobj-underscore'

" vai and vii text indent objects - REALLY useful
" Plug 'kana/vim-textobj-indent'
" ^ this one gets used by default
Plug 'michaeljsmith/vim-indent-object'

" adds more text objects such as in' and ip' (in next and in previous ' )
" I never use this
" Plug 'wellle/targets.vim'

" }}}

" Markdown {{{

" instant markdown preview
" :InstantMarkdownPreview to enable as-you-type preview for markdown files
" I rarely use it and it requires an additional command line tool. Instead of
" this there's a chrome plugin to preview markdown files. Much simpler!
" Usually I don't need to preview them anyway - markdown is readable enough.
"if executable('redcarpet') && executable('instant-markdown-d') && executable('pygmentize')
    "Plug 'suan/vim-instant-markdown', { 'for': 'markdown' }
"endif

" }}}

" Ctags {{{

if executable('ctags')
    " Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
    " tagbar is SLOW so only use it where you need it.
    " Plug 'majutsushi/tagbar', { 'for': ['php', 'css'] }
    " Plug 'majutsushi/tagbar', { 'for': ['php', 'coffee', 'css'] }
    Plug 'majutsushi/tagbar', { 'for': ['php'] }
endif

" auto generate ctags on save
" I have never been able to get one of these working right. It has to:
" 1. use my .ctags file
" 2. update project root -> tags file
" 3. update asynchronously
" Otherwise I'll just use my <leader>ut to update tags manually and
" asynchronously
" Plug 'szw/vim-tags'

" Underline ctags. Sometimes works.
" Plug 't9md/vim-underlinetag'
" this one makes them purple instead... except it takes WAY too much config to
" work.
" Plug 'vim-scripts/TagHighlight'

" auto update ctags on pause
" see above
" EXTREMELY SLOW FUCK THIS
" Plug 'xolox/vim-misc'
" Plug 'xolox/vim-easytags'
" until he makes tag indexing non-blocking (asynchronous)
" Plug 'mikedfunk/vim-easytags'

" auto update tags... please... i want to believe...
if executable('ctags')
    " Plug 'ludovicchabant/vim-gutentags', { 'for': ['php', 'css'] }
    Plug 'ludovicchabant/vim-gutentags', { 'for': ['php'] }
endif

" }}}

" Project and Task Management {{{

" scratch window that autohides when not being used. gs to open. gs in visual
" mode will paste the contents of the selection into the scratch window.
Plug 'mtth/scratch.vim', { 'on': 'Scratch' }

" review pull requests in vim
" Plug 'codegram/vim-codereview'

" show @TODOs and stuff
" I just made an alias for this now with Ag. Simpler and more capable.
" Plug 'vim-scripts/TaskList.vim'
" nnoremap <leader>td :TaskList<CR>
" nnoremap <leader>tl :TaskList<CR>
" Plug 'mikedfunk/TaskList.vim'

" open jira under cursor. MAC ONLY.
" <leader>jo
" I never use this
"Plug 'markabe/vim-jira-open', { 'on': 'TaskList' }

" autocomplete jira task numbers
" requires 'pip install requests' to work, otherwise fails gracefully
" Never worked and I never cared
" Plug 'mnpk/vim-jira-complete'
" fork
" Plug 'LucHermitte/vim-jira-complete'

" continuously update session files, autosave, etc.
" I can do this with startify!
" let g:startify_session_persistence = 1
" Plug 'tpope/vim-obsession'

" required for vim-notes
Plug 'xolox/vim-misc'

" Easy note taking in vim
" Starting a new note: Execute the :Note command to create a new buffer and
" load the appropriate file type and syntax
" You can also start a note with Vim commands like :edit, :tabedit and :split
" by starting the filename with note:, as in :edit note:todo (the part after
" note: doesn't have to be the complete note title and if it's empty a new
" note will be created)
" You can start a new note with the selected text as title in the current
" window using the \en mapping or :NoteFromSelectedText command (there are
" similar mappings and commands for opening split windows and tab pages)
" Saving notes: Just use Vim's :write and :update commands, you don't need to
" provide a filename because it will be set based on the title (first line) of
" your note (you also don't need to worry about special characters, they'll be
" escaped)
" Editing existing notes: Execute :Note anything to edit a note containing
" anything in its title (if no notes are found a new one is created with its
" title set to anything)
" The :Note and :DeleteNote commands support tab completion of note titles
" Deleting notes: The :DeleteNote command enables you to delete the current note
"
" more at https://github.com/xolox/vim-notes
Plug 'xolox/vim-notes'

" }}}

" Database and API {{{

" anlytics on languages, usage times, etc.
" @link http://wakatime.com
Plug 'wakatime/vim-wakatime'

" real-time collaborative editing like etherpad but with native editors
" @link http://floobits.com
if has('nvim')
    " after installing run :UpdateRemotePlugins and restart neovim
    " do the same when removing this plugin
    Plug 'Floobits/floobits-neovim'
    " Plug 'Floobits/floobits-neovim', { 'do': function('UpdateRemotePlugins') }
else
    Plug 'Floobits/floobits-vim'
endif

" DB tools in vim
" A little too complex right now, I am good with SequelPro or
" MySQLWorkbench
" also takes over 3 seconds to load
" Plug 'vim-scripts/dbext.vim'

" Like postman for vim
" Key binds

" from a normal/any buffer

" QQ opens a new request window
" QH opens the recent request history
" QCO opens the collection list
" QCC change current collection
" QCN add a new collection
" QG opens a new request window with URL under cursor as URL

" from a REQUEST buffer

" QQ executes the current request as defined in the buffer
" QP adds the JSON pretty-printing option to the current request
" QF adds the follow option to current request (follows HTTP redirects)
" QAB adds basic authentication to the current request
" QAO adds oAuth2 to the current request
" from a RESPONSE buffer

" QQ returns to the previous REQUEST buffer
" q closes the buffer

" from a HISTORY buffer

" <CR> loads previous request into REQUEST buffer
" q closes the buffer

" from a COLLECTIONS buffer

" <CR> open collection under cursor and set as current
" q closes the buffer
" Plug 'nicwest/QQ.vim', { 'on': ['QQ', 'QH', 'QCO', 'QCC', 'QCN', 'QG', 'QP', 'QF', 'QAB', 'QAO'] }
" It's easier to just use postman. This is a lot to remember.
" Plug 'nicwest/QQ.vim'

" }}}

" Tmux {{{
if executable('tmux')

    " makes vim focus events work inside of tmux
    Plug 'tmux-plugins/vim-tmux-focus-events'

    " :Tmux (command) with tab complete
    " :Tyank
    " :Tput
    " :Twrite to another window or tab
    " :Tattach to a session
    " I never use this
    " Plug 'tpope/vim-tbone'

    " tmux custom statusline in sync with airline
    " :TmuxlineSnapshot! ~/.dotfiles/support/tmuxline.conf
    " I have :MyTmuxline and :MyConfFiles defined too
    Plug 'edkolev/tmuxline.vim'
    " can't get it to lazy load - it keeps trying to activate from airline
    " Plug 'edkolev/tmuxline.vim', { 'on': ['MyTmuxline', 'MyConfFiles', 'TmuxlineSnapshot', 'Tmuxline'] }

    " query surrounding tmux splits to add to autocomplete, automatically
    Plug 'buztard/vim-nomad'

    " create tmux window with a command from vim
    " nnoremap <leader>vp :VimuxPromptCommand<cr>
    " nnoremap <leader>vc :VimuxPromptCommand<cr>cd $PWD<cr>:VimuxInspectRunner<cr>
    " nnoremap <leader>vl :VimuxRunLastCommand<cr>
    " nnoremap <leader>vr :VimuxRunLastCommand<cr>
    " nnoremap <leader>vi :VimuxInspectRunner<cr>
    " nnoremap <leader>vx :VimuxCloseRunner<cr>
    "
    " nnoremap <leader>pf :VimuxPHPUnitRunCurrentFile<cr>
    " nnoremap <leader>pu :call VimuxRunCommand("phpunit")<cr>
    " nnoremap <leader>pp :VimuxRunLastCommand<cr>
    Plug 'benmills/vimux'

endif

if $TERM == 'screen-256color' || $TERM == 'xterm-256color'
    " fix broken terminal keys when we use xterm-256-color in iterm prefs and
    " screen-256-color in tmux.conf prefs
    Plug 'nacitar/terminalkeys.vim'

    " Terminus enhances Vim's integration with the terminal in four ways,
    " particularly when using tmux (https://tmux.github.io/) and iTerm
    " (https://www.iterm2.com/), closing the gap between terminal and GUI Vim:

    " 1. Cursor shape change in insert mode ~

    " In insert mode, the cursor shape changes to a thin vertical bar. On leaving
    " inset mode, it reverts to the standard "block" shape.

    " 2. Improved mouse support ~

    " Activates 'mouse' support in all modes and additionally tries to activate
    " |sgr-mouse| support, which allows the mouse to work "even in columns beyond
    " 223".

    " 3. Focus reporting ~

    " Allows Vim to receive |FocusGained| and |FocusLost| events, even in the
    " terminal and inside tmux. This is in turn used to fire the |:checktime|
    " command, which, in conjunction with the 'autoread', allows Vim to
    " automatically pick up changes made by other processes when switching to and
    " from Vim.

    " 4. "Bracketed Paste" mode ~

    " Sets up "Bracketed Paste" mode, which means you can forget about manually
    " setting the 'paste' option and simply go ahead and paste in any mode.
    Plug 'wincent/terminus'
endif

" }}}

" Marks {{{

" show marks in the sign column and a lot more
" m,           Place the next available mark
" m.           If no mark on line, place the next available mark. Otherwise,
             " remove (first) existing mark.
" m-           Delete all marks from the current line
" m<Space>     Delete all marks from the current buffer
" ]`           Jump to next mark
" [`           Jump to prev mark
" ]'           Jump to start of next line containing a mark
" ['           Jump to start of prev line containing a mark
" `]           Jump by alphabetical order to next mark
" `[           Jump by alphabetical order to prev mark
" ']           Jump by alphabetical order to start of next line having a mark
" '[           Jump by alphabetical order to start of prev line having a mark
" '?           Open location list and display local marks

" m[0-9]       Toggle the corresponding marker !@#$%^&*()
" m<S-[0-9]>   Remove all markers of the same type
" ]-           Jump to next line having a marker of the same type
" [-           Jump to prev line having a marker of the same type
" ]=           Jump to next line having a marker of any type
" [=           Jump to prev line having a marker of any type
" m<BS>        Remove all markers
" Plug 'kshenoy/vim-signature'

" mark quickfix locations and marks in the sign column
" works great but it clobbers everything else in the sign column like git
" changes and syntastic errors
" Plug 'tomtom/quickfixsigns_vim'

" :MarksBrowser
" <cr> to go to a mark
" d to delete
" I don't use this, Marks in the sidebar is fine
" Plug 'vim-scripts/Marks-Browser'

" auto ls after :cd
" Plug 'b4b4r07/vim-autocdls'

" }}}

" }}}

" Vim-plug close {{{
call plug#end()
" }}}
