" Modeline and Notes {{{
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmethod=marker:
"
"  ___  ____ _         ______           _
"  |  \/  (_) |        |  ___|         | |
"  | .  . |_| | _____  | |_ _   _ _ __ | | __
"  | |\/| | | |/ / _ \ |  _| | | | '_ \| |/ /
"  | |  | | |   <  __/ | | | |_| | | | |   <
"  \_|  |_/_|_|\_\___| \_|  \__,_|_| |_|_|\_\
"
" vim plugins, finally free of spf13-vim!
" more info at http://mikefunk.com
" }}}

" Vim-plug setup {{{

" Install Vim-plug on new systems
if empty(glob("~/.vim/autoload/plug.vim"))
    execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/plugged')

" }}}

" from spf13-vim {{{

" General {{{
" Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'scrooloose/nerdtree'
" I had trouble getting this to work for some reason
" Plug 'jistr/vim-nerdtree-tabs', { 'on': ['NERDTreeMirrorToggle', 'NERDTreeTabsToggle', 'NERDTreeTabs'] }
Plug 'jistr/vim-nerdtree-tabs'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'spf13/vim-autoclose'
" Plug 'tacahiroy/ctrlp-funky'
" Plug 'terryma/vim-multiple-cursors'
" better supported fork
Plug 'kristijanhusak/vim-multiple-cursors'
Plug 'vim-scripts/sessionman.vim', { 'on': ['SessionList', 'SessionSave', 'SessionClose'] }
Plug 'matchit.zip'
Plug 'bling/vim-airline'
" Plug 'bling/vim-bufferline'
Plug 'Lokaltog/vim-easymotion'
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
" Plug 'nathanaelkane/vim-indent-guides'
Plug 'Yggdroot/indentLine'
Plug 'vim-scripts/restore_view.vim'
Plug 'mhinz/vim-signify'
" Plug 'tpope/vim-abolish', { 'on': 'Abolish' }
Plug 'tpope/vim-abolish'
Plug 'osyo-manga/vim-over'
Plug 'kana/vim-textobj-user'
" Plug 'kana/vim-textobj-indent'
" Plug 'gcmt/wildfire.vim'
" }}}

" General Programming {{{
Plug 'scrooloose/syntastic', { 'for': ['vim', 'php', 'python', 'javascript', 'css'] }
if executable('git')
    Plug 'tpope/vim-fugitive'
endif
if executable("curl")
    Plug 'mattn/webapi-vim'
    Plug 'mattn/gist-vim', { 'on': 'Gist' }
endif
Plug 'scrooloose/nerdcommenter'
" Plug 'tpope/vim-commentary'
Plug 'godlygeek/tabular'
if executable('ctags')
    " Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
    Plug 'majutsushi/tagbar'
endif
" }}}

" Completion {{{
" if has('python')
    Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
" endif

" I saw some posts recently saying youcompleteme is faster for php. Well yes,
" but it doesn't complete methods inside of object instances.
" if has('lua')
    " Plug 'Shougo/neocomplete.vim'
    " Plug 'violetyk/neocomplete-php.vim'
" endif
" }}}

" Python {{{
Plug 'klen/python-mode', { 'for': 'python' }
Plug 'yssource/python.vim', { 'for': 'python' }
Plug 'python_match.vim', { 'for': 'python' }
Plug 'pythoncomplete', { 'for': 'python' }
" }}}

" JavaScript {{{
Plug 'elzr/vim-json', { 'for': 'json' }
Plug 'groenewege/vim-less', { 'for': 'less' }
" this one makes weird artifacts show up while I type
" Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
" this one works better
Plug 'jelera/vim-javascript-syntax', { 'for': 'javascript' }
" Plug 'briancollins/vim-jst'
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'marijnh/tern_for_vim', { 'for': 'javascript', 'do': 'sudo npm install' }
" }}}

" HTML {{{
" auto close tags by typing </
Plug 'docunext/closetag.vim', { 'for': ['html', 'xml'] }
Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'less', 'sass', 'scss'] }
" }}}

" Ruby {{{
Plug 'tpope/vim-rails', { 'for': 'ruby' }
let g:rubycomplete_buffer_loading = 1
" }}}

" Puppet {{{
Plug 'rodjek/vim-puppet', { 'for': 'puppet' }
" }}}

" Go {{{
Plug 'fatih/vim-go', { 'for': 'go' }
" }}}

" Misc {{{
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
" }}}

" }}}

" not from spf13-vim {{{

" General {{{

" rename a file with :Rename mynewname
Plug 'AlexJF/rename.vim', { 'on': 'Rename' }

" rogue in vim? sure why not
" Plug 'katono/rogue.vim'

" repl for php, coffee, js, mysql, etc.
" I don't use this
" Plug 'zweifisch/pipe2eval'

" open a scratch buffer with :Scratch that will not ask you to save and
" will go away when closing vim
" I don't use this
" Plug 'duff/vim-scratch'

" Turn vim options on and off - with tab complete
" :onoff <tab> to get options
" I don't use it.
" Plug 'vitalk/vim-onoff'

" open url
" nnoremap <leader>gu <Plug>(openbrowser-open)
" Plug 'tyru/open-browser.vim'
" I don't need this, I have a one-line mapping that works great on mac.
" Plug 'vim-scripts/open-browser.vim'

" Deal with swap files better, automatically. Really helpful!
Plug 'vim-scripts/autoswap.vim'

" create files and parent dirs at the same time
" :e my/non-existent/dir/file.php
Plug 'dockyard/vim-easydir'

" share registers across vim installations
" sets the updatetime to 200ms. bad.
Plug 'ardagnir/united-front'

" Add some unix stuff like :Chmod, :Unlink, etc.
" :Unlink[!]
" :Remove[!]
" :Move[!] {file}
" :Rename[!] {file}
" :Chmod {mode}
" :Mkdir {dir}
" :Mkdir! {dir}
" :Mkdir[!]
" :Find[!] {args}
" :Locate[!] {args}
" :SudoEdit [file]
" :SudoWrite
" :W
" I don't use it. I tend to use NERDTree for moving, deleting, etc.
" Plug 'tpope/vim-eunuch'

" used for auto-update ctags on save and other stuff
" I just use a custom dispatch command for this now instead of a plugin.
" nnoremap <silent> <Leader>ut
" So much more reliable.
Plug 'tpope/vim-dispatch', { 'on': 'Dispatch' }

" auto generate ctags on save
" Plug 'szw/vim-tags'
" }}}

" Copy and paste {{{

" no more pastetoggle!
Plug 'ConradIrwin/vim-bracketed-paste'

" toggle most recent yanks backward and forward in history
" By default, the keys to toggle the paste are mapped to <c-n> and <c-p>
" (similar to yankring). For example, executing p<c-p> will paste, then
" toggle it to the most recent yank before that.
"
" dangit, just too complicated right now. I like the idea. I'll try it
" some other time. p<c-p> doesn't work, haven't figured out why yet.
" Another plugin interfering maybe?
" Plug 'svermeulen/vim-easyclip'

" paste with context-sensitive indenting
Plug 'sickill/vim-pasta'

" }}}

" Keyboard {{{

" Toggle the location list and quickfix list windows
" <leader>qq
" <leader>ll
Plug 'milkypostman/vim-togglelist'

" No more caps lock troubles in normal mode!
" Not supported on OSX yet
" Plug 'suxpert/vimcaps'

" adds extra intuitive keyboard shortcuts
" *[a*     |:previous|
" *]a*     |:next|
" *[A*     |:first|
" *]A*     |:last|
" *[b*     |:bprevious|
" *]b*     |:bnext|
" *[B*     |:bfirst|
" *]B*     |:blast|
" *[l*     |:lprevious|
" *]l*     |:lnext|
" *[L*     |:lfirst|
" *]L*     |:llast|
" *[<C-L>* |:lpfile|
" *]<C-L>* |:lnfile|
" *[q*     |:cprevious|
" *]q*     |:cnext|
" *[Q*     |:cfirst|
" *]Q*     |:clast|
" *[<C-Q>* |:cpfile| (Note that <C-Q> only works in a terminal if you disable
" *]<C-Q>* |:cnfile| flow control: stty -ixon)
" *[t*     |:tprevious|
" *]t*     |:tnext|
" *[T*     |:tfirst|
" *]T*     |:tlast|
Plug 'tpope/vim-unimpaired'

" alias commands to other commands, even in lowercase
" :call CmdAlias('runtime', 'Runtime')
" or simply,
" :Alias runtime Runtime
" I don't use this
" Plug 'vim-scripts/cmdalias.vim'

" temporary caps lock in insert mode with <c-g>c. Good if you remap
" capslock.
" Plug 'tpope/vim-capslock'

" }}}

" Completion and Snippets {{{

" enable . repeat in certain plugins
" Plug 'tpope/vim-repeat'

" zen coding / emmett integration
" div#page>div.logo+ul#navigation>li*5>a<c-y>, to get html
" <c-y>n and <c-y>N to go to next and previous insert points
Plug 'mattn/emmet-vim', { 'for': ['html', 'twig', 'blade'] }

" much better than snipmate or neosnippet
" :UltiSnipsEdit to edit the snippets file for the current file type
" YouCompleteMe will autocomplete your snippets. <c-j> to complete.
" spf13-vim already includes this with YouCompleteMe
" Plug 'SirVer/ultisnips'

" vim-autoclose causes problems with youcompleteme, it says use this instead
" automatically closes [], (), '', etc.
" This breaks <s-tab> in youcompleteme
" Plug 'Raimondi/delimitMate'

" Similar to emmett but also can autoclose
" <c-x>/ close latest html tag
" Not really that useful for php
" Plug 'tpope/vim-ragtag'

" use c-n and c-p to complete from your buffers in search or command mode
Plug 'vim-scripts/CmdlineComplete'

" Match html/xml tags with %
" Plug 'tmhedberg/matchit'
Plug 'edsono/vim-matchit'

" symfony completion
" See above
" Plug 'm2mdas/phpcomplete-extended-symfony'

" }}}

" Syntax {{{

" syntax highlighting for twig templates
Plug 'beyondwords/vim-twig', { 'for': 'twig' }

" facebook hhvm hack highlight support
Plug 'hhvm/vim-hack', { 'for': 'hack' }

" syntastic plugin for vimrc
Plug 'dbakker/vim-lint', { 'for': 'vim' }

Plug 'tpope/vim-git', { 'for': 'git' }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }

" Laravel Blade Syntax Highlighting
Plug 'xsbeats/vim-blade', { 'for': 'blade' }

" the only misc bundles I use
" (spf13-vim puts these in there anyway)
" syntax highlighting for markdown and puppet
" Plug 'tpope/vim-markdown'
" Plug 'Puppet-Syntax-Highlighting'

" .tmux.conf syntax hilighting
Plug 'vimez/vim-tmux', { 'for': 'tmux' }

" }}}

" Css {{{

" colorize css colors without causing $VIMRC reload problems
" Plug 'ap/vim-css-color'
Plug 'chrisbra/Colorizer', { 'for': ['css', 'scss', 'sass', 'less'] }

" color designer tool
" View colors
" :ColorV (<leader>cv): show ColorV window
" :ColorVView (<leader>cw): show ColorV window with color text under cursor.
" :ColorVPreview (<leader>cpp): Preview colors in current buffer
" Edit colors
" :ColorVEdit (<leader>ce): Edit color text under cursor
" :ColorVEditAll (<leader>cE): Edit color text under cursor and change all in current buffer.
" :ColorVInsert (<leader>cii): Insert color with ColorV window.
" Design Colors
" :ColorVName (<leader>cn): show color name list window.
" :ColorVList Hue (<leader>cgh) generate Hue list with color text under cursor.
" :ColorVTurn2 {hex1} {hex2} (<leader>cgg) generate Hue list from hex1 to hex2.
" :ColorVPicker (<leader>cd): show a GUI color picker.
" Design Schemes
" :ColorVScheme (<leader>css) Fetch scheme from Kuler or ColourLover
" :ColorVSchemeFav (<leader>csf) Show Faved schemes
" :ColorVSchemeNew (<leader>csn) Create a new scheme
Plug 'Rykka/colorv.vim'

" }}}

" Php {{{

" Just for code coverage highlighting
" :Phpcc - show code coverage (will ask for a clover XML file if not set)
" <Leader>qc  " Show/hide code coverage markers
Plug 'joonty/vim-phpqa', { 'for': 'php' }

" customizable php folding
" I don't use folding
" Plug 'swekaj/php-foldexpr.vim', { 'for': 'php' }

" was used in PIV for php folding
" <space> toggle fold
" za toggle fold
" <leader>f[number] set the fold level to this number
" zR open all folds
" Plug 'rayburgemeestre/phpfolding.vim'

" apparently better php indenting for PHP 5.4+
Plug '2072/PHP-Indenting-for-VIm', { 'for': 'php' }

" improved phpdoc implementation
" Plug 'tobyS/pdv', { 'for': 'php' }
" fork that works better with phpcomplete.vim to update @var variables
" Plug 'FlickerBean/pdv', { 'for': 'php' }
" required for pdv. Only needed for pdv.
" Plug 'tobyS/vmustache', { 'for': 'php' }

" I think this is entirely different but it actually works which is nice
" au BufRead,BufNewFile *.php inoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
" au BufRead,BufNewFile *.php nnoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
" au BufRead,BufNewFile *.php vnoremap <buffer> <leader>pd :call PhpDocRange()<CR>
Plug 'sumpygump/php-documentor-vim', { 'for': 'php' }

" better php ctags in tagbar
" <leader>tt to toggle tagbar. This makes it look prettier
" Plug 'techlivezheng/vim-plugin-tagbar-phpctags'
if executable('ctags')
    Plug 'vim-php/tagbar-phpctags.vim', { 'for': 'php' }
endif

" php namespace and use block autocomplete
" inoremap <Leader><Leader>u <C-O>:call PhpInsertUse()<CR>
" noremap <Leader><Leader>u :call PhpInsertUse()<CR>
Plug 'arnaud-lb/vim-php-namespace', { 'for': 'php' }
" Plug 'mikedfunk/vim-php-namespace'

" xdebug integration
" Run <F5>
" Step over <F2>
" Step in <F3>
" Step out <F4>
" Run to cursor <F9>
" Detach <F7>
" Stop/close <F6>
" :VdebugEval <code>
Plug 'joonty/vdebug', { 'for': 'php' }

" improved php omnicompletion
Plug 'shawncplus/phpcomplete.vim', { 'for': 'php'}

" required for phpcomplete-extended
" And perhaps other packages...
" Plug 'Shougo/vimproc'

" php completion for composer projects
" php-complete-extended breaks horribly with any php files with multiple
" classes. I reported the bug and the author does not want to fix that. It
" also asks 'composer project detected. Do you want to index?' every time
" you open a composer project. And it takes longer to load the index when
" it works. And it causes crazy problems sometimes with YouCompleteMe. And
" it sometimes experiences PHP sytax errors, which it barfs into the vim
" window in weird places. Combination of these means forget about it
" for now.
" Plug 'm2mdas/phpcomplete-extended'

" laravel completion
" See above
" Plug 'm2mdas/phpcomplete-extended-laravel'

" php getters and setters
" map <buffer> <leader>sg <Plug>PhpgetsetInsertGetterSetter
" I use ultisnips instead -- more customizable and no need for yet another
" plugin
" Plug 'docteurklein/php-getter-setter.vim'

" coding standards fixer integration
" nnoremap <silent><leader>pcd :call PhpCsFixerFixDirectory()<CR>
" nnoremap <silent><leader>pcf :call PhpCsFixerFixFile()<CR>
Plug 'stephpy/vim-php-cs-fixer', { 'for': 'php' }

" phpunit integration
" Plug 'joonty/vim-phpunitqf.git'
" Works but kind of lame. Can't specify the window size.
" I replaced this with my own Dispatch commands.
" nnoremap <leader>pf :VimuxPHPUnitRunCurrentFile<cr>
" nnoremap <leader>pu :call VimuxRunCommand("phpunit")<cr>
" nnoremap <leader>pp :VimuxRunLastCommand<cr>
" Plug 'jonyamo/phpunit.vim'

" more flexible phpunit integration with vimux. combine this with my own
" phpunit command for all tests and I can rerun the latest vimux command,
" set the window size, adjust size and it will stick, run arbitrary
" commands and filters from vim, etc.
" see above for commands
" I just pasted this into my .vimrc.local - it was only like 5 lines.
" Plug 'thiagoalessio/vimux-phpunit'

" whoa, cool. change variable names, extract code to a function, extract
" local var to instance var.
"
" doesn't work very well. Can only extract a visual selection to a method.
" Everything else says 'not enough parameters'. Maybe I can get it to work
" someday.
"
" EXTRACT METHOD
" Go into visual mode and select the code you want to extract to a new
" method the press <Leader>rem You will be prompted for the name of the new
" method.
"
" RENAME LOCAL VARIABLE
" In normal mode move the cursor so it's inside the name of the variable
" which you want to rename. Press <Leader>rlv
"
" LOCAL VARIABLE TO INSTANCE VARIABLE
" In normal mode move the cursor so it's inside the name of the variable
" which you want to rename. Press <Leader>rli
"
" OPTIMIZE USE
" Simple press <Leader>rou to run the optimize use refactoring.
" Plug 'vim-php/vim-php-refactoring', { 'for': 'php' }

" php refactor tools
" nnoremap <unique> <Leader>rlv :call PhpRenameLocalVariable()<CR>
" nnoremap <unique> <Leader>rcv :call PhpRenameClassVariable()<CR>
" nnoremap <unique> <Leader>rm :call PhpRenameMethod()<CR>
" nnoremap <unique> <Leader>eu :call PhpExtractUse()<CR>
" vnoremap <unique> <Leader>ec :call PhpExtractConst()<CR>
" nnoremap <unique> <Leader>ep :call PhpExtractClassProperty()<CR>
" vnoremap <unique> <Leader>em :call PhpExtractMethod()<CR>
" nnoremap <unique> <Leader>np :call PhpCreateProperty()<CR>
" nnoremap <unique> <Leader>du :call PhpDetectUnusedUseStatements()<CR>
" vnoremap <unique> <Leader>== :call PhpAlignAssigns()<CR>
" nnoremap <unique> <Leader>sg :call PhpCreateSettersAndGetters()<CR>
" nnoremap <unique> <Leader>da :call PhpDocAll()<CR>
" Plug 'adoy/vim-php-refactoring-toolbox', { 'rtp': 'plugins', 'for': 'php' }
" i could not load the plugin even with the rtp set above, so I forked
" it and changed the plugins dir to plugin.
Plug 'mikedfunk/vim-php-refactoring-toolbox', { 'for': 'php' }
" Plug 'beberlei/vim-php-refactor'

" }}}

" Looks {{{

" higlight an interesting word in the doc, in a unique color
" <leader>1 higlight in first color
" <leader>2 higlight in second color (etc...)
" <leader>0 clear all highlights
Plug 'pydave/vim-hiinterestingword'

" crosshairs on parens and such. Much easier to find where you're
" currently at!
" removed because on my crappy loaner mac it seems to be slowing things
" down
" Plug 'chreekat/vim-paren-crosshairs'

" highlights in bright red any trailing whitespace
" I disabled this pretty much just so I could get ascii art on startify :P
Plug 'ntpeters/vim-better-whitespace', { 'for': ['php', 'python', 'javascript', 'css', 'less', 'coffee', 'xml', 'json'] }

" pulse the background on search to find the currently found item. Really
" helpful pretty UI addition.
" works great... in some color schemes. In others it's just annoying.
" Plug 'inside/vim-search-pulse'

" Highlight the current word throughout the doc
" I use a autocmd for this that works better instead in my .vimrc.local
"
" Occasionally I use that autocmd but I usually get annoyed by it after
" a while. It clobbers all other highlights like syntax highlighting and
" search highlights, which is a bummer.
" Plug 'OrelSokolov/HiCursorWords'

" show all 256 colors and their numbers. useful for assigning colors in
" different color schemes.
" Plug 'guns/xterm-color-table.vim', { 'on': 'XtermColorTable' }

" a bunch of color schemes to try. Most don't work in 256.
" Plug 'flazz/vim-colorschemes'

" Color schemes that don't look good in xterm-256-colors
" --------------
" Plug '29decibel/codeschool-vim-theme'
" Plug 'tpope/vim-vividchalk'
" Plug 'morhetz/gruvbox'
" this needs the following iterm2 themes: chriskempson/base16-iterm2
" Plug 'chriskempson/base16-vim'
" Plug 'daylerees/colour-schemes', { 'rtp': 'vim/' }
" Plug 'endel/vim-github-colorscheme'
" Plug 'ricardovaleriano/vim-github-theme'
" Plug '29decibel/codeschool-vim-theme'
" grb256 color scheme
" Plug 'garybernhardt/dotfiles', { 'rtp': '.vim/' }
" Plug 'morhetz/gruvbox'
" Plug 'vim-scripts/guardian'
" Plug 'vim-scripts/herald.vim'
" Plug 'vim-scripts/moria'
" Plug 'matthewtodd/vim-twilight'
" Plug 'tpope/vim-vividchalk'
" Plug 'vim-scripts/Zenburn'
" Plug 'reedes/vim-colors-pencil'
" Plug 'modess/vim-phpcolors'
" Plug 'noahfrederick/vim-hemisu'
" Plug 'vim-scripts/desert256.vim'
" Plug 'vim-scripts/xoria256.vim'
" Plug 'noahfrederick/vim-noctu'
" Plug 'zenorocha/dracula-theme', {'rtp': 'vim/'}
" Plug 'Slava/vim-colors-tomorrow'
" Plug 'vim-scripts/blackdust.vim'
" Plug 'vim-scripts/peaksea'
" Plug 'therubymug/vim-pyte'
" Plug 'ercolanelli-leo/candyVirus'
" Plug 'sandeepsinghmails/Dev_Delight'
" Plug 'vim-scripts/forest'
" Plug 'vim-scripts/ecostation'
" Plug 'Marslo/marslo.vim'
" Plug 'vim-scripts/sonoma.vim'
" Plug 'vim-scripts/Gummybears'
" Plug 'vim-scripts/Cleanroom'
" Plug 'veloce/vim-aldmeris'
" Plug 'rainux/vim-desert-warm-256'
" Plug 'vim-scripts/summerfruit256.vim'
" Plug 'trapd00r/neverland-vim-theme'
" Plug 'vim-scripts/robokai'
" Plug 'zaiste/Atom'
" Plug 'joschka/Smyck-Color-Scheme'
" Plug 'michalbachowski/vim-wombat256mod'

" Schemes that look good in 256 colors:
Plug 'nanotech/jellybeans.vim'
Plug 'zeis/vim-kolor'
Plug 'tomasr/molokai'
Plug 'Lokaltog/vim-distinguished'
Plug 'junegunn/seoul256.vim'
Plug 'jnurmine/Zenburn'
Plug 'cocopon/iceberg.vim'
Plug 'w0ng/vim-hybrid'
Plug 'nielsmadan/harlequin'
Plug 'hickop/vim-hickop-colors'
Plug 'sjl/badwolf'
" lucius fork to include fugitive colors
" Plug 'jonathanfilip/vim-lucius'
Plug 'MarioRicalde/vim-lucius'
" Plug 'noah/vim256-color'
Plug 'whatyouhide/vim-gotham'
Plug 'chriskempson/tomorrow-theme', { 'rtp': 'vim/' }
Plug 'jonathanpatt/vim-koala'
Plug 'baskerville/bubblegum'
" the light version looks good except for the colorcolumn
" dark version has an ugly pink colorcolumn
Plug 'freeo/vim-kalisi'
Plug 'vim-scripts/The-Vim-Gardener'
Plug 'ciaranm/inkpot'

" Can I please have some trouble
" Plug 'godlygeek/csapprox'

" just for testing some of the top color schemes
" Plug 'vim-scripts/Colour-Sampler-Pack'

" custom bash prompt in sync with airline
" :PromptlineSnapshot! ~/.dotfiles/to_link/promptline.theme.bash
" Turn if off until I need to customize it
Plug 'edkolev/promptline.vim', { 'on': ['Promptline', 'PromptlineSnapshot'] }

" smooth vertical scrolling
" This is AWESOME. One of my favorite plugins. animates scrolling.
Plug 'yonchu/accelerated-smooth-scroll'

" different fork of solarized that fixes stuff
" Plug 'blueyed/vim-colors-solarized'
Plug 'https://github.com/jwhitley/vim-colors-solarized.git'

" easy way to scroll through color schemes
" cycle, rotate
" Turned off until I need it
Plug 'vim-scripts/ScrollColors', { 'on': 'SCROLL' }

" highlight matches for word, current line, etc.
" doesn't work after switching to light mode or resourcing vimrc
"<c-h><c-h> to sticy highlight a selection. <c-h><c-n> to remove all
" highlights.
" I just don't use this. It also doesn't do much in Lucius.
" Plug 'vim-scripts/highlight.vim'

" check what highlights are on the current line with :HLT! and :HLTm to
" disable. Useful for debugging highlight groups
" Plug 'kergoth/vim-hilinks'

" Set background to light or dark automatically at sunrise/sunset
" Plug 'amdt/sunset'

" What it sounds like!
" Plug 'atimholt/spiffy_foldtext'

" }}}

" Text Manipulation and Selection {{{

" take a bunch of zeroes and make them sequential. (rengbang is some japanese
" word for doing this)
" from visual mode: :`<, `>RengBang
Plug 'deris/vim-rengbang'

" make changes in the quickfix window, save, and your changes are made in
" the original files! Awesome when paired with :Ag!
Plug 'stefandtw/quickfix-reflector.vim'

" Automatically detect indentation and set it
" BUT it sets expandtab on php by default! Lame!
Plug 'tpope/vim-sleuth'

" put html tags from one line to multiline or the opposite
" works for practically any language. just wish it worked in function
" definitions!
" gS to split
" gJ to join
Plug 'AndrewRadev/splitjoin.vim'

" Align in columns
" Too much crossover with tabularize
" Plug 'junegunn/vim-easy-align'

" Move vertically without changing the cursor column in block edit mode
Plug 'bruno-/vim-vertical-move'

" this makes blank line with spaces only the end of a paragraph
Plug 'justinmk/vim-ipmotion'

" expand the visual selection with + and _
" I'd rather be specific about my selection
" Plug 'terryma/vim-expand-region'

" swap blocks of code with cx (c then x) example: cxiw to mark a word,
" then go to another word and cxiw. The words will swap. Very exciting.
Plug 'tommcdo/vim-exchange'

" increment/decrement dates
" <c-b> on date. I remapped vim's default <c-a> to <c-b> because of tmux.
Plug 'tpope/vim-speeddating'

" smart search, replace, abbreviation fixer
" :%S/mixed_case_thing/other_thing/g replaces MixedCaseThing in context as
" well. Also camel-case, etc.
"
" coerce to a different case:
" crs convert to snake_case
" crm MixedCase
" crc camelCase
" cru UPPER_CASE
" Plug 'tpope/vim-abolish'

" auto add comma or semicolon to end of line
" <leader>;
" I don't use it. A, is just as good it seems
" Plug 'lfilho/cosco.vim'

" }}}

" Navigation and Search {{{

" highlight f and t searches, use same motion to ; or \
" this just annoys me
" Plug 'rhysd/clever-f.vim'

" sublime-style minimap. Not working yet.
" Plug 'severin-lemaignan/vim-minimap'

" Make links, folds, emails, files clickable
" Not working yet - still experimental
" Plug 'Rykka/clickable.vim'

" focus on only the selected text with :NR<cr>
" I don't use this. It doesn't set the file type right!
" Plug 'chrisbra/NrrwRgn', { 'on': 'NR' }

" set up automated test running per project via vim-dispatch, jumping to
" tests from classes and vice-versa, etc.
" In addition to any navigation commands provided by your projections (which
" take the form :Efoo, :Sfoo, :Vfoo, :Tfoo, and :Dfoo), the following commands
" are available.
" Most awesome thing ever for TDD!!!
" :A                      Edit the alternate file for the current buffer, as
                        " defined by the alternate key.
" :AS [file]              Like :A, but open in a split.
" :AV [file]              Like :A, but open in a vertical split.
" :AT [file]              Like :A, but open in a tab.
Plug 'tpope/vim-projectionist'

" TagBar support for coffeescript? Yes please!
" @note requires CoffeeScript ruby gem
Plug 'lukaszkorecki/CoffeeTags', { 'for': 'coffee' }

" move between function arguments and stuff
" Shifting arguments with <, and >,
" Moving between argument boundaries with [, and ],
" New text objects a, and i,
" Cool idea but I don't need it. besides I already have a , object.
" Plug 'PeterRincker/vim-argumentative'

" replace search functions to do cool stuff. My favorite is removing the
" highlight when moving the cursor!
" errors out :(
" Plug 'junegunn/vim-oblique'

" search and replace across multiple files!
" example:
" :GitGrep foo.*bar (or :Ag! mysearchterm)
" :Qdo %s/foo.*bar/baz/g | update
Plug 'henrik/vim-qargs', { 'on': ['GitGrep', 'Qdo'] }

" vim search and replace in directory
" Plug 'vim-scripts/Greplace.vim'

" jump to definition even if tags file doesn't exist
" I use ctags so this is redundant and adds clutter to ctrlp
" Plug 'tacahiroy/ctrlp-funky'

" open directory in finder
" <gof> opens the file manager at the directory of the file you are currently
" editing in Vim.
"
" <got> opens the terminal at the directory of the file you are currently
" editing in Vim. Works with tmux - makes a vertical split!
" I generally don't need to do this
" Plug 'justinmk/vim-gtfo'

" better than Ack
" :Ag! 'my search' [options]
if executable('ag')
    Plug 'rking/ag.vim', { 'on': ['Ag'] }
endif

" allow to star search from a visual selection
" viw *
Plug 'thinca/vim-visualstar', { 'on': ['<Plug>visualstar-*', '<Plug>visualstar-#', '<Plug>visualstar-g*', '<Plug>visualstar-g#'] }

" faster ctrlp matcher
if has('python')
    Plug 'FelikZ/ctrlp-py-matcher'
endif

" better tag selector with ctrlp
" <c-]> will open ctrl-p with possible links if more than one is available
" Plug 'ivalkeen/vim-ctrlp-tjump'

" different fork of ctrlp that accepts pull requests
Plug 'https://github.com/ctrlpvim/ctrlp.vim.git'

" only for added sources for phpcomplete_extended
" Plug 'Shougo/unite.vim'

" better vim start screen
Plug 'mhinz/vim-startify'

" smart jump to project root
" nnoremap <silent> <Leader>pr <Plug>RooterChangeToRootDirectory
" Plug 'dbakker/vim-projectroot'
Plug 'airblade/vim-rooter'

" wget menu item in NERDTree!
" m then w, then type url
" I don't use this
" Plug 'markgandolfo/nerdtree-wget.vim'

" makes folds only recalculate on save, making completion faster (right?)
" this is fine and all but I disable folding. This re-enables it.
" Plug 'Konfekt/FastFold'

" }}}

" Windows and Tabs {{{

" Swap windows just like cxiw. Mark the first window with <leader>ww. Then
" switch to the second window and do <leader>ww again. The windows will
" swap. Simple!
" cool but I usually don't have more than 2 splits
" Plug 'wesQ3/vim-windowswap'

" :BD to load previous buffer in current window
" :BB and :BF to move backwards and forwards in buffer history of current
" window
" :BUN to unload a buffer without closing window
" :BW to wipe a buffer without closing window
" I don't use it
" Plug 'vim-scripts/bufkill.vim'

" reopen closed window, mapping in .vimrc.local
" nnoremap <leader>uc :UcwRestoreWindow<cr>
Plug 'tyru/undoclosewin.vim'
" doesn't want to lazy load
" Plug 'tyru/undoclosewin.vim', { 'on': 'UcwRestoreWindow' }

" Zoom toggle current window like tmux pane zooming
" Plug 'vim-scripts/ZoomWin'
" Latest version someone hosted
" <c-w>z to toggle zoom
Plug 'regedarek/ZoomWin'

" allow to close all buffers but the current one
" :BufOnly
Plug 'vim-scripts/BufOnly.vim', { 'on': ['BufOnly', 'Bufonly'] }

" }}}

" Git {{{

" u save lot but no commit. Y u no commit??
if executable('git')
    Plug 'esneider/YUNOcommit.vim'
endif

" github and fugitive together from tim pope
" I hardly use fugitive and I don't need any github-specific features.
" Plug 'tpope/vim-rhubarb'

" Gitk clone in vim. ,gv and ,gV to view, <cr> to view commits in a
" split or view diffs.
" I might remove this... I don't use it
" Plug 'gregsexton/gitv'

" Look up a github issue with :Gissues . You can also autocomplete issues
" in fugitive window by typing #[issue number]<c-space>.
" I don't use it at the moment
" Plug 'jaxbot/github-issues.vim'

" Fugitive extension to show branch list and stuff.
" R Refresh the buffer list.
" C/cc Checkout the branch under the cursor.
" A/aa Create a new branch from the currently checked out branch. You'll be prompted to enter a name for the new branch.
" D/dd Delete the branch under the cursor.
" M/mm Merge the branch under the cursor into the currently checked out branch. If there are merge conflicts, the merge conflicts buffer will open in place of the branch list buffer.
" mf Merge the branch under the cursor into the currently checked out branch using Fugitive's :Gmerge command.
" rb Rebase the currently checked out branch against the branch under the cursor. If there are rebase conflicts, the rebase conflicts buffer will open in place of the branch list buffer.
" ps Prompt to choose a remote to push the branch under the cursor.
" pl Prompt to choose a remote to pull the branch under the cursor.
" pf Prompt to choose a remote to fetch the branch under the cursor.
" gd Diff against the branch under the cursor.
" I don't really use this
" Plug 'idanarye/vim-merginal'

" a github dashboard in vim? Let's see how I like it...
" :GHD to see dashboard
" answer: why? web is better.
" Plug 'junegunn/vim-github-dashboard', { 'on': ['GHDashboard', 'GHActivity'] }

" }}}

" Text Objects {{{

" entire document
" vae, vie
Plug 'kana/vim-textobj-entire'

" last search pattern:
" va/, vi/, va?, vi?
Plug 'kana/vim-textobj-lastpat'

" al, il
Plug 'kana/vim-textobj-line'

" selection in/around underscore
" a_, i_
Plug 'kana/vim-textobj-underscore'

" vai and vii text indent objects - REALLY useful
" Plug 'kana/vim-textobj-indent'
" ^ this one gets used by default
Plug 'michaeljsmith/vim-indent-object'

" adds more text objects such as in' and ip' (in next and in previous ' )
Plug 'wellle/targets.vim'

" }}}

" Markdown {{{

" instant markdown preview
" :InstantMarkdownPreview to enable as-you-type preview for markdown files
if executable('redcarpet') && executable('instant-markdown-d') && executable('pygmentize')
    Plug 'suan/vim-instant-markdown', { 'for': 'markdown' }
endif

" }}}

" Ctags {{{

" Underline ctags. Sometimes works.
" Plug 't9md/vim-underlinetag'
" Plug 'vim-scripts/TagHighlight'

" auto update ctags on pause
" see above
" Plug 'xolox/vim-misc'
" Plug 'xolox/vim-easytags'
" until he makes tag indexing non-blocking (asynchronous)
" Plug 'mikedfunk/vim-easytags'

" }}}

" Project and Task Management {{{

" show @TODOs and stuff
" I just made an alias for this now with Ag. Simpler and more capable.
" Plug 'vim-scripts/TaskList.vim'
" nnoremap <leader>td :TaskList<CR>
" nnoremap <leader>tl :TaskList<CR>
" Plug 'mikedfunk/TaskList.vim'

" open jira under cursor. MAC ONLY.
" <leader>jo
Plug 'markabe/vim-jira-open'

" autocomplete jira task numbers
Plug 'mnpk/vim-jira-complete'

" }}}

" Database {{{

" DB tools in vim
" A little too complex right now, I am good with SequelPro or
" MySQLWorkbench
" Plug 'vim-scripts/dbext.vim'

" }}}

" Tmux {{{
if executable("tmux")

    " :Tmux (command) with tab complete
    " :Tyank
    " :Tput
    " :Twrite to another window or tab
    " :Tattach to a session
    Plug 'tpope/vim-tbone'

    " tmux custom statusline in sync with airline
    " :TmuxlineSnapshot! ~/.dotfiles/support/tmuxline.conf
    " Turn if off until I need to customize it
    Plug 'edkolev/tmuxline.vim'

    " query surrounding tmux splits to add to autocomplete
    Plug 'buztard/vim-nomad'

    " create tmux window with a command from vim
    " nnoremap <leader>vp :VimuxPromptCommand<cr>
    " nnoremap <leader>vc :VimuxPromptCommand<cr>cd $PWD<cr>:VimuxInspectRunner<cr>
    " nnoremap <leader>vl :VimuxRunLastCommand<cr>
    " nnoremap <leader>vr :VimuxRunLastCommand<cr>
    " nnoremap <leader>vi :VimuxInspectRunner<cr>
    " nnoremap <leader>vx :VimuxCloseRunner<cr>
    "
    " nnoremap <leader>pf :VimuxPHPUnitRunCurrentFile<cr>
    " nnoremap <leader>pu :call VimuxRunCommand("phpunit")<cr>
    " nnoremap <leader>pp :VimuxRunLastCommand<cr>
    Plug 'benmills/vimux'

endif

" fix broken terminal keys when we use xterm-256-color in iterm prefs and
" screen-256-color in tmux.conf prefs
Plug 'nacitar/terminalkeys.vim'

" }}}

" Marks {{{

" show marks in the sign column and a lot more
" m,           Place the next available mark
" m.           If no mark on line, place the next available mark. Otherwise,
             " remove (first) existing mark.
" m-           Delete all marks from the current line
" m<Space>     Delete all marks from the current buffer
" ]`           Jump to next mark
" [`           Jump to prev mark
" ]'           Jump to start of next line containing a mark
" ['           Jump to start of prev line containing a mark
" `]           Jump by alphabetical order to next mark
" `[           Jump by alphabetical order to prev mark
" ']           Jump by alphabetical order to start of next line having a mark
" '[           Jump by alphabetical order to start of prev line having a mark
" '?           Open location list and display local marks

" m[0-9]       Toggle the corresponding marker !@#$%^&*()
" m<S-[0-9]>   Remove all markers of the same type
" ]-           Jump to next line having a marker of the same type
" [-           Jump to prev line having a marker of the same type
" ]=           Jump to next line having a marker of any type
" [=           Jump to prev line having a marker of any type
" m<BS>        Remove all markers
" Plug 'kshenoy/vim-signature'

" mark quickfix locations and marks in the sign column
Plug 'tomtom/quickfixsigns_vim'

" :MarksBrowser
" <cr> to go to a mark
" d to delete
" I don't use this, Marks in the sidebar is fine
" Plug 'vim-scripts/Marks-Browser'

" auto ls after :cd
Plug 'b4b4r07/vim-autocdls'

" }}}

" }}}

" Vim-plug close {{{
call plug#end()
" }}}
