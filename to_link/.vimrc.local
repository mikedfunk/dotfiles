" Modeline {{{
" vim:fdm=marker
"
"  ___  ____ _         ______           _
"  |  \/  (_) |        |  ___|         | |
"  | .  . |_| | _____  | |_ _   _ _ __ | | __
"  | |\/| | | |/ / _ \ |  _| | | | '_ \| |/ /
"  | |  | | |   <  __/ | | | |_| | | | |   <
"  \_|  |_/_|_|\_\___| \_|  \__,_|_| |_|_|\_\
"
" My customizations to spf13.com.
" http://mikefunk.com
" }}}
" General {{{
    let g:snips_author = 'Michael Funk <mfunk@internetbrands.com>'

    " this ensures it doesn't say hit enter to continue
    command! -nargs=1 Silent
                \ | execute ':silent !'.<q-args>
                \ | execute ':redraw!'

    " use php documentation with <shift>K from pear package pman"
    augroup phpman_autogroup
        " autocmd FileType php set keywordprg=pman
        autocmd FileType php nnoremap K :Silent pman <cword> <CR>
    augroup END

    " do not redraw while running macros - faster
    " set lazyredraw

    " auto source vimrc
    " augroup vimrc_augroup
        " autocmd BufWritePost .vimrc.local,.vimrc.bundles.local,.vimrc.before.local,.vimrc.custom.local source $MYVIMRC
    " augroup END

    " allow interactive shell commands to source my .bash_profile
    " set shell=/bin/bash\ -i

    " disable auto folding
    " set nofoldenable
    " and in PIV
    let g:DisableAutoPHPFolding = 1

    " highlight matching words in underline automatically
    hi WordMatch cterm=underline
    augroup highlight_augroup
        " autocmd!
        autocmd CursorMoved * exe printf('match WordMatch /\V\<%s\>/', escape(expand('<cword>'), '/\'))
    augroup END

    " enable the preview window for omnicompletion - doesn't work for some reason
    " set completeopt+=preview
    " set previewheight=15

    " supposed to make vim faster in tmux
    set notimeout
    set ttimeout
    set timeoutlen=50

    " also supposed to make vim faster
    " set nocursorline

    " turn off relative line numbering
    set nornu
    set number

    " disable spellcheck
    " set nospell

    " if the last window is a quickfix, close it
    augroup qfclose_augroup
        " autocmd!
        autocmd WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
    augroup END

    " 2 space indent in html
    augroup highlight_augroup
        " autocmd!
        autocmd FileType smarty,blade,html setlocal shiftwidth=2 tabstop=2 softtabstop=2
    augroup END

    " visually select a search result
    nnoremap g/ //e<Enter>v??<Enter>

    " my version of fast tabs
    nnoremap gh gT
    nnoremap gl gt
    nnoremap gn :tabnew<cr>

    " open tag in tab
    :nnoremap <silent><Leader><C-]> <C-w><C-]><C-w>T

    " go to next/previous closed fold
    nnoremap <silent> <leader>zj :call NextClosedFold('j')<cr>
    nnoremap <silent> <leader>zk :call NextClosedFold('k')<cr>
    function! NextClosedFold(dir)
        let cmd = 'norm!z' . a:dir
        let view = winsaveview()
        let [l0, l, open] = [0, view.lnum, 1]
        while l != l0 && open
            exe cmd
            let [l0, l] = [l, line('.')]
            let open = foldclosed(l) < 0
        endwhile
        if open
            call winrestview(view)
        endif
    endfunction
" }}}

" Key Mapping {{{
    " soft wrapping
    command! -nargs=* Wrap set wrap linebreak nolist

    " copy all
    nnoremap <leader>a mmggVGy`m

    " find all todos
    noremap <Leader>td :noautocmd vimgrep /TODO/j **/*.php<CR>:cw<CR>

    " remap keys
    inoremap jj <Esc>

    " resize splits, consistent with tmux bindings
    map <c-w><c-j> :resize +10<cr>
    map <c-w><c-k> :resize -10<cr>
    map <c-w><c-l> :vertical resize +10<cr>
    map <c-w><c-h> :vertical resize -10<cr>

    " maximize split
    nnoremap <C-L> <C-W>l<C-W><bar>
    nnoremap <C-H> <C-W>h<C-W><bar>

    " open all buffers in new tabs
    " map <leader>bt :tab sball<CR>
    " map <leader>bt :bufdo tab split<CR>
    map <leader>bt cd :BufOnly<CR>:args ./*.*<CR>:tab sball<CR>

    " open existing buffer in a newtab
    map <leader>te :ls<cr>:tabedit #

    " omnicompletion like Visual Studio or NetBeans
    imap <C-Space> <C-x><C-o>
    " imap <C-@> <C-Space>

    " put cursor at end of text on y and p
    vnoremap <silent> y y`]
    vnoremap <silent> p p`]
    nnoremap <silent> p p`]
" }}}

" Theme {{{
    set colorcolumn=80

    " custom indent guide colors
    let g:indent_guides_auto_colors = 0
    " augroup indent_guides_augroup
        " autocmd!
        " autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=black
        " autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black
    " augroup END

    " hi IndentGuidesOdd ctermbg=235
    " hi IndentGuidesEven ctermbg=236
    hi IndentGuidesOdd ctermbg=black
    hi IndentGuidesEven ctermbg=black

    "toggle between day and night theme
    call togglebg#map("<leader>bg")

    " change the default EasyMotion shading to something more readable with Solarized
    hi link EasyMotionTarget ErrorMsg
    hi link EasyMotionShade  Comment

    " vim-gitgutter better background
    highlight clear SignColumn
" }}}

" Plugins {{{
    " NERDTree {{{
        " extra space in NERDCommenter comments
        let g:NERDSpaceDelims="1"

        " NERDTree expand dirs with one child
        " let NERDTreeCasadeOpenSingleChildDir=1

        " NERDTree change keyboard shortcuts to use vim-nerdtree-tabs
        " map <C-e> :NERDTreeTabsToggle<CR>:NERDTreeMirrorOpen<CR>
        " map <C-e> :NERDTreeTabs<CR>:NERDTreeMirrorOpen<CR>
        " map <C-e> :NERDTreeTabsToggle<CR>
        map <C-e> :NERDTreeMirrorToggle<CR>
    " }}}

    " cd to project root
    nnoremap <leader>dp :ProjectRootCD<cr>

    " tabular
    nmap <leader>a> :Tabularize /=><cr>
    vmap <leader>a> :Tabularize /=><cr>

    " PDV comment parameters
    let g:pdv_cfg_Package   = "Example"
    let g:pdv_cfg_Author    = "Michael Funk <mfunk@internetbrands.com>"
    let g:pdv_cfg_Copyright = "Copyright 2013 Internet Brands, Inc. All Rights Reserved."
    let g:pdv_cfg_License   = ""
    let g:pdv_cfg_Version   = ""
    let g:pdv_cfg_ClassTags = ["author"]

    augroup fugitive_augroup
        " autocmd!
        " reset file to HEAD in fugitive commit window
        autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>
        " open quickfix window on git grep
        autocmd QuickFixCmdPost *grep* cwindow
    augroup END

    " for mouseterm
    if has("mouse")
        set mouse=a
    endif

    " turn off neosnippet mapping
    let g:spf13_no_neosnippet_expand=1

    " phpcomplete omni complete for neocomplcache
    augroup phpcomplete_augroup
        " autocmd!
        autocmd BufNewFile,BufRead *.blade.php,*.tpl set filetype=html
        autocmd FileType php set omnifunc=phpcomplete_extended#CompletePHP
        " autocmd FileType php set omnifunc=phpcomplete#CompletePHP
    augroup END

    " neocomplcache disable auto popup
    " let g:neocomplcache_disable_auto_complete = 1

    " c-j and c-k go down and up in the list for neocomplcache
    " inoremap <expr> <C-j> pumvisible() ? '\<C-n>' : '\<C-j>'
    " inoremap <expr> <C-k> pumvisible() ? '\<C-p>' : '\<C-k>'

    " preview breaks youcompleteme
    " set completeopt-=preview

    " Syntastic {{{
        let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['html'] }
        " let g:syntastic_auto_loc_list = 1

        " underlining errors slows it down, it's in the sidebar already
        let g:syntastic_enable_highlighting = 0
        let g:syntastic_php_phpmd_post_args = '~/.dotfiles/support/phpmd_ruleset.xml'
    " }}}

    " filename
    hi default link User1 Identifier"blue
    " flags
    hi default link User2 Statement"green
    " errors
    hi default link User3 Error"orange
    " fugitive
    hi default link User4 Special

    " set quickfix window height min and max  automatically
    augroup quickfix_augroup
        " autocmd!
        autocmd FileType qf call AdjustWindowHeight(3, 5)
    augroup END

    function! AdjustWindowHeight(minheight, maxheight)
        exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
    endfunction

    " ctrlp extensions
    " let g:ctrlp_extensions = ['tag']

    " since , replaces leader, use \ to go back in a [f]ind
    noremap \ ,

    " ultisnips start with my ultisnips
    let g:UltiSnipsDontReverseSearchPath="1"
    let g:UltiSnipsEditSplit="vertical"
    " let g:UltiSnipsListSnippets='<c-L>'
    let g:UltiSnipsExpandTrigger='<c-J>'
    let g:UltiSnipsJumpForwardTrigger='<c-l>'
    let g:UltiSnipsJumpBackwardTrigger='<c-h>'

    augroup phpdoc_augroup
        autocmd!
        au BufRead,BufNewFile *.php inoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
        au BufRead,BufNewFile *.php nnoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
        au BufRead,BufNewFile *.php vnoremap <buffer> <leader>pd :call PhpDocRange()<CR>
    augroup END

    " vim-airline
    let g:airline_theme = 'solarized'
    " warning this is really slow
    " let g:airline#extensions#tagbar#enabled = 1
    let g:airline#extensions#tagbar#enabled = 0
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    " unicode symbols
    " let g:airline_left_sep = '»'
    " let g:airline_left_sep = '▶'
    " let g:airline_right_sep = '«'
    " let g:airline_right_sep = '◀'
    " let g:airline_symbols.linenr = '␊'
    " let g:airline_symbols.linenr = '␤'
    " let g:airline_symbols.linenr = '¶'
    " let g:airline_symbols.branch = '⎇'
    " let g:airline_symbols.paste = 'ρ'
    " let g:airline_symbols.paste = 'Þ'
    " let g:airline_symbols.paste = '∥'
    " let g:airline_symbols.whitespace = 'Ξ'
    let g:airline_powerline_fonts=0
    " let g:airline#extensions#hunks#non_zero_only = 1
    let g:airline#extensions#bufferline#enabled = 0
    " vim-bufferline prevent from showing in command bar *and* statusline
    let g:bufferline_echo = 0

    " unicode symbols
    " let g:airline_left_sep = '»'
    " let g:airline_left_sep = '▶'
    " let g:airline_right_sep = '«'
    " let g:airline_right_sep = '◀'
    " let g:airline_symbols.linenr = '␊'
    " let g:airline_symbols.linenr = '␤'
    " let g:airline_symbols.linenr = '¶'
    " let g:airline_symbols.branch = '⎇'
    " let g:airline_symbols.paste = 'ρ'
    " let g:airline_symbols.paste = 'Þ'
    " let g:airline_symbols.paste = '∥'
    " let g:airline_symbols.whitespace = 'Ξ'

    " advanced tabline vertical separators
    " let g:airline#extensions#tabline#enabled = 1
    " let g:airline#extensions#tabline#left_sep = ' '
    " let g:airline#extensions#tabline#left_alt_sep = '|'
    " let g:airline#extensions#tabline#left_alt_sep = ' '

    " tagbar autofocus is the whole point of tagbar
    let g:tagbar_autofocus = 1

    " phpctags
    " let g:tagbar_phpctags_memory_limit = '512M'

    " vim-ctrlp-tjump
    nnoremap <c-]> :CtrlPtjump<cr>

    " vdebug
    let g:vdebug_options = {}
    let g:vdebug_options['server'] = '192.168.56.1'
    let g:vdebug_options['port'] = '9001'
    " guest: host
    let g:vdebug_options['path_maps'] = {'/var/www': '/media/sf_ubuntubox'}
    let g:vdebug_options["break_on_open"] = 0

    " composer install command for phpcomplete
    let g:phpcomplete_index_composer_command = "composer"
    let g:phpcomplete_parse_docblock_comments = 1

    " vim-startify"
    let g:startify_session_dir = '~/.vim/sessions'
    let g:startify_bookmarks = [ '~/.vimrc.local' ]
    " let g:startify_change_to_vcs_root = 1

    " don't open a split for ctrlp or nerdtree
    augroup startify_augroup
        " autocmd!
        autocmd FileType startify setlocal buftype=
    augroup END

    " make session autoload work in vim-startify
    " let NERDTreeHijackNetrw = 0

    " disable common but unimportant files
    let g:startify_skiplist = [
           \ 'COMMIT_EDITMSG',
           \ '\.DS_Store'
           \ ]

    " php add use statement for current class
    inoremap <Leader><Leader>u <C-O>:call PhpInsertUse()<CR>
    noremap <Leader><Leader>u :call PhpInsertUse()<CR>

" }}}
" Include Custom vimrc if exists {{{
    if filereadable($HOME . "/.vimrc.custom.local")
        source ~/.vimrc.custom.local
    endif
" }}}
