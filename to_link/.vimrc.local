" Modeline and Notes {{{
" vim:fdm=marker
"
"  ___  ____ _         ______           _
"  |  \/  (_) |        |  ___|         | |
"  | .  . |_| | _____  | |_ _   _ _ __ | | __
"  | |\/| | | |/ / _ \ |  _| | | | '_ \| |/ /
"  | |  | | |   <  __/ | | | |_| | | | |   <
"  \_|  |_/_|_|\_\___| \_|  \__,_|_| |_|_|\_\
"
" My customizations to spf13.com.
" http://mikefunk.com
" }}}

" General {{{
    let g:snips_author = 'Michael Funk <mfunk@internetbrands.com>'

    " since , replaces leader, use \ to go back in a [f]ind
    noremap \ ,

    " {{{ format json
    nnoremap <leader>fj :%!python -m json.tool<cr>
    " }}}

    " {{{ quickfix window
    " set quickfix window height min and max  automatically
    augroup quickfix_augroup
        " autocmd!
        autocmd FileType qf call AdjustWindowHeight(3, 5)
    augroup END

    function! AdjustWindowHeight(minheight, maxheight)
        exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
    endfunction
    " }}}"

    " {{{ change tab width
    function! MyTabWidth(fromwidth, towidth)
        " change every 4 spaces to a tab character
        exe "setlocal sw=".a:fromwidth." ts=".a:fromwidth." sts=".a:fromwidth." et"
        exe 'retab!'

        " change tab length to 2 spaces, expandtab, retab
        exe "setlocal sw=".a:towidth." ts=".a:towidth." sts=".a:towidth." et"
        exe 'retab'
    endfunction
    " }}}

    " {{{ Concept - load underlying class for Laravel
    function! FacadeLookup()
        let facade = input('Facade Name: ')
        let classes = {
\       'Eloquent': 'Database/Eloquent/Model.php'
\       'File': 'Filesystem/Filesystem.php',
\       'Form': 'Html/FormBuilder.php',
\       'Html': 'Html/HtmlBuilder.php',
\       'View': 'View/View.php',
\   }
        execute ":edit vendor/laravel/framework/src/Illuminate/" . classes[facade]
    endfunction
    nmap ,lf :call FacadeLookup()<cr>
    " }}}

    " {{{ Add a new dependency to a PHP class - doesn't work
    function! AddDependency()
        let dependency = input('Var Name: ')
        let namespace = input('Class Path: ')

        let segments = split(namespace, '\')
        let typehint = segments[-1]

        exec 'normal gg/construct^M:H^Mf)i, ' . typehint . ' $' . dependency . '^[/}^>O$this->^[a' . dependency . ' = $' . dependency . ';^[?{^MkOprotected $' . dependency . ';^M^[?{^MOuse ' . namespace . ';^M^['

        " Remove opening comma if there is only one dependency
        exec 'normal :%s/(, /(/g'
    endfunction
    " nmap <leader>2  :call AddDependency()<cr>
    " }}}

    " for mouseterm
    if has("mouse")
        set mouse=a
    endif

    " this ensures it doesn't say hit enter to continue
    command! -nargs=1 Silent
                \ | execute ':silent !'.<q-args>
                \ | execute ':redraw!'

    " use php documentation with <shift>K from pear package pman"
    augroup phpman_autogroup
        autocmd FileType php set keywordprg=pman\ -P\ less
        " autocmd FileType php nnoremap K :Silent pman <cword> <CR>
        " autocmd FileType php nnoremap K :Silent /usr/local/php5/bin/pman <cword> <CR>
        " autocmd FileType php nnoremap K <Plug>(phpcomplete-extended-doc)
    augroup END

    " do not redraw while running macros - faster
    set lazyredraw

    " auto source vimrc
    " augroup vimrc_augroup
        " autocmd BufWritePost .vimrc.local,.vimrc.bundles.local,.vimrc.before.local,.vimrc.custom.local source $MYVIMRC
    " augroup END

    " allow interactive shell commands to source my .bash_profile
    " set shell=/bin/bash\ -i

    " disable auto folding
    " set nofoldenable
    " and in PIV
    let g:DisableAutoPHPFolding = 1

    " underline matching words automatically
    " hi WordMatch cterm=underline
    " augroup highlight_augroup
        " " autocmd!
        " autocmd CursorMoved * exe printf('match WordMatch /\V\<%s\>/', escape(expand('<cword>'), '/\'))
    " augroup END

    " enable the preview window for omnicompletion - doesn't work for some reason
    " set completeopt+=preview
    " set previewheight=15

    " supposed to make vim faster in tmux
    set notimeout
    set ttimeout
    set timeoutlen=50

    " also supposed to make vim faster
    " set nocursorline

    " turn off relative line numbering because it fucking sucks
    set nornu
    set number

    " disable spellcheck
    set nospell

    " Abbreviations
    abbrev pft PHPUnit_Framework_TestCase
    abbrev gm !php artisan generate:model
    abbrev gc !php artisan generate:controller
    abbrev gmig !php artisan generate:migration

    " if the last window is a quickfix, close it
    augroup qfclose_augroup
        " autocmd!
        autocmd WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
    augroup END

    " 2 space indent in front-end
    augroup highlight_augroup
        " autocmd!
        autocmd FileType smarty,blade,html,javascript,css :call Tab2()
    augroup END

    " sets everything to 2 spaces. For some reason just calling all this in
    " one line does not set shiftwidth, but sets the others fine.
    function! Tab2()
        setlocal shiftwidth=2
        setlocal tabstop=2
        setlocal softtabstop=2
        setlocal expandtab
    endfunction
" }}}

" Key Mapping {{{
    " soft wrapping
    command! -nargs=* Wrap set wrap linebreak nolist

    " dotfile updates
    command! Dotupdates :Dispatch cd $HOME/.dotfiles && git add -A && git commit -am 'updates' && git push &&cd -

    " spf13-vim updates
    command! Spfupdate :Dispatch cd ~/.spf13-vim-3 && git pull && cd -

    " working commit
    command! Working :Dispatch cd $(git rev-parse --show-toplevel) && git add --all .; git commit -am "fixup!" && cd -

    " source vimrc
    command! Source :so $MYVIMRC

    " remove trailing spaces
    command! StripTrailingWhitespace :%s/\s\+$//

    " covert dos line endings to unix line endings
    command! Dos2unix :%s///g

    " change tab width from 4 to 2 spaces and retab
    nnoremap <leader>t2 :call MyTabWidth(4,2)<cr>

    " change tab width from 2 to 4 spaces and retab
    nnoremap <leader>t4 :call MyTabWidth(2,4)<cr>

    " vertical and horizontal splits like tmux
    nnoremap <c-w>" :sp<cr>
    nnoremap <c-w>% :vsp<cr>

    " go to next/previous closed fold
    nnoremap <silent> <leader>zj :call NextClosedFold('j')<cr>
    nnoremap <silent> <leader>zk :call NextClosedFold('k')<cr>

    " Vundle actions
    nnoremap <leader>bi :so $MYVIMRC<cr> :BundleInstall<cr>
    nnoremap <leader>bc :so $MYVIMRC<cr> :BundleClean!<cr>
    nnoremap <leader>bu :so $MYVIMRC<cr> :BundleUpdate<cr>

    " function to use above key maps
    function! NextClosedFold(dir)
        let cmd = 'norm!z' . a:dir
        let view = winsaveview()
        let [l0, l, open] = [0, view.lnum, 1]
        while l != l0 && open
            exe cmd
            let [l0, l] = [l, line('.')]
            let open = foldclosed(l) < 0
        endwhile
        if open
            call winrestview(view)
        endif
    endfunction

    " {{{ foldmethod toggle between indent and marker
    let g:FoldMethod = 0
    map <leader>fm :call ToggleFold()<cr>
    fun! ToggleFold()
        if g:FoldMethod == 0
            exe 'set foldmethod=indent'
            exe 'set foldcolumn=4'
            let g:FoldMethod = 1
        else
            exe 'set foldmethod=marker'
            exe 'set foldcolumn=0'
            let g:FoldMethod = 0
        endif
    endfun
    " }}}

    " {{{ Laravel framework commons
    nmap <leader>lr :e app/routes.php<cr>
    nmap <leader>lca :e app/config/app.php<cr>81Gf(%O
    nmap <leader>lcd :e app/config/database.php<cr>
    nmap <leader>lc :e composer.json<cr>
    " }}}

    " {{{ map space to toggle folds
    nnoremap <space> za
    vnoremap <space> zf
    " }}}

    " open new lines without entering insert mode
    " just use unimpaired intead: ]<space> and [<space>
    " nnoremap <leader>o o<esc>
    " nnoremap <leader>O O<esc>

    " increment with c-b
    nnoremap <C-B> <C-A>

    " copy all
    nnoremap <leader>ya mzggVGy`z

    " visually select a search result
    nnoremap g/ //e<Enter>v??<Enter>

    " my version of fast tabs
    nnoremap gh gT
    nnoremap gl gt
    " nnoremap gn :tabnew<cr>

    " open tag in tab
    nnoremap <silent><Leader><C-]> <C-w><C-]><C-w>T

    " find all todos
    " noremap <Leader>td :noautocmd vimgrep /TODO/j **/*.php<CR>:cw<CR>

    " remap keys
    inoremap jj <Esc>

    " resize splits, consistent with tmux bindings
    nnoremap <c-w><c-j> :resize +10<cr>
    nnoremap <c-w><c-k> :resize -10<cr>
    nnoremap <c-w><c-l> :vertical resize +10<cr>
    nnoremap <c-w><c-h> :vertical resize -10<cr>

    " maximize split
    nnoremap <C-L> <C-W>l<C-W><bar>
    nnoremap <C-H> <C-W>h<C-W><bar>

    " open all buffers in new tabs
    " map <leader>bt :tab sball<CR>
    " map <leader>bt :bufdo tab split<CR>
    nnoremap <leader>bt cd :BufOnly<CR>:args ./*.*<CR>:tab sball<CR>
    nnoremap <leader>bo :BufOnly<cr>

    " open existing buffer in a newtab
    nnoremap <leader>te :ls<cr>:tabedit #

    " omnicompletion like Visual Studio or NetBeans
    inoremap <C-Space> <C-x><C-o>
    " imap <C-@> <C-Space>

    " open link under cursor in browser
    nnoremap <leader>ou yiW:!open <c-r>" &<cr><cr>

    " {{{ put cursor at end of text on y and p
    vnoremap <silent> y y`]
    vnoremap <silent> p p`]
    nnoremap <silent> p p`]
    " }}}

" }}}

" Theme {{{
    " {{{ global powerline fonts switch
        let g:global_powerline_switch = 1

        if g:global_powerline_switch == 1
            let g:promptline_powerline_symbols = 1
            let g:tmuxline_powerline_separators = 1
            let g:airline_powerline_fonts=1
            " let g:tmuxline_separators = {
                " \ 'left' : '',
                " \ 'left_alt': '',
                " \ 'right' : '',
                " \ 'right_alt' : '',
                " \ 'space' : ' '}
        else
            let g:promptline_powerline_symbols = 0
            let g:tmuxline_powerline_separators = 0
            let g:airline_powerline_fonts=0
            let g:airline_left_sep = ''
            let g:airline_left_alt_sep = ''
            let g:airline_right_sep = ''
            let g:airline_right_alt_sep = ''
        endif
    " }}}
    " {{{ solarized
    let g:solarized_termtrans=0
    let g:solarized_termcolors=16
    " let g:solarized_degrade=0
    " let g:solarized_bold=1
    " let g:solarized_underline=1
    " let g:solarized_italic=1
    " let g:solarized_termcolors=16
    " let g:solarized_contrast="high"
    " let g:solarized_visibility="high"
    let g:solarized_diffmode="high"
    " let g:solarized_hitrail=1
    " let g:solarized_menu=1
    " set fillchars="fold: "
    " }}}

    " {{{ custom indent guide colors
    set colorcolumn=80
    let g:indent_guides_auto_colors = 0
    " augroup indent_guides_augroup
        " autocmd!
        " autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=black
        " autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black
    " augroup END
    " }}}

    " {{{ fix weird indent guide colors
    " hi IndentGuidesOdd ctermbg=235
    " hi IndentGuidesEven ctermbg=236
    hi IndentGuidesOdd ctermbg=black
    hi IndentGuidesEven ctermbg=black
    " }}}

    " {{{ toggle between day and night theme
    silent call togglebg#map("<leader>bg")
    " }}}

    " {{{ change the default EasyMotion shading to something more readable with Solarized
    hi link EasyMotionTarget ErrorMsg
    hi link EasyMotionShade  Comment
    " }}}

    " {{{ vim-gitgutter better background
    " highlight clear SignColumn
    " hi link SignColumn LineNr
    " }}}

    " {{{ syntax highlighting for Vagrantfile
    augroup vagrant
        au!
        au BufRead,BufNewFile Vagrantfile set filetype=ruby
    augroup END
    " }}}

" }}}

" Plugins {{{

" {{{ ctrlp
" ctrlp extensions
" let g:ctrlp_extensions = ['tag']
" }}}"

    " {{{ dispatch
    nnoremap <silent> <Leader>di :call CallDispatchWithCommand() <CR>

    function! CallDispatchWithCommand()
      let dispatch_command = input('> ')
      execute ':Dispatch ' . dispatch_command
    endfunction
    " }}}

    " {{{ easytags
    " easytags just doesn't work well. it blocks the ui when updating (doesn't
    " use dispatch), it doesn't use my custom easy_tags_cmd, and the
    " highlighting won't use my custom highlight. Fuck it, we'll do it live!
    nnoremap <silent> <Leader>ut :silent Dispatch! echo 'exporting ctags...' && cd $(git rev-parse --show-toplevel) && ctags -R --exclude=.git --exclude='*.log' --fields=+aimS --languages=php --PHP-kinds=+cf 2>/dev/null<CR>

    " Easytags blocks the UI on pause, which sucks! It also apparently
    " slows down the UI with it's highlighting, which I can't seem to switch
    " to underlining anyway. What is a better solution? In the mean time I
    " map to update manually with ,ct.
    " let g:easytags_auto_update = 0
    " let g:easytags_dynamic_files=1
    " let g:easytags_updatetime_warn=0
    " let g:easytags_python_enabled=1
    " let b:easytags_auto_highlight=0
    " nnoremap <Leader>ut :UpdateTags<CR>

    " this doesn't work. Apparently it's only for the path to ctags, not args.
    " let g:easytags_cmd="ctags -R --exclude=.git --exclude=*.log --exclude=*.js --fields=+aimS --languages=php --PHP-kinds=+cf --recurse=yes --tag-relative=yes 2>/dev/null"

    " this doesn't seem to work, it just disables highlighting. I can't figure
    " out why.
    " highlight phpFunctionsTag cterm=underline gui=underline term=underline
    " highlight phpClassesTag cterm=underline gui=underline term=underline
    " }}}

    " {{{ fugitive
    " filename
    hi default link User1 Identifier"blue
    " flags
    hi default link User2 Statement"green
    " errors
    hi default link User3 Error"orange
    " fugitive
    hi default link User4 Special

    augroup fugitive_augroup
        " autocmd!
        " reset file to HEAD in fugitive commit window
        autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>
        " open quickfix window on git grep
        autocmd QuickFixCmdPost *grep* cwindow
    augroup END

    " Fugitive Commands
    command! -bar -nargs=* Gpull execute 'Git pull' <q-args> 'origin' fugitive#head()
    command! -bar -nargs=* Gpush execute 'Git push' <q-args> 'origin' fugitive#head()
    command! -bar -nargs=* Gpurr execute 'Git pull --rebase' <q-args> 'origin' fugitive#head()
    command! Gpnp silent Gpull | Gpush
    command! Gprp silent Gpurr | Gpush
    command! Gsync :Dispatch git checkout develop && git pull && git checkout - && git merge develop

    silent! unmap <leader>gp
    " nnoremap <silent> <leader>gpu :Gpuspacesh<CR>
    " nnoremap <silent> <leader>gpl :Gpull<CR>:e<CR>
    nnoremap <Leader>g- :Silent Git stash<CR>:e<CR>
    nnoremap <Leader>g+ :Silent Git stash pop<CR>:e<CR>
    nnoremap <leader>gps :Dispatch! git push<CR>
    nnoremap <leader>gpu :Dispatch! git push<CR>
    nnoremap <leader>gpl :Dispatch! git pull<CR>:e<cr>
    " }}}"

    " {{{ gitv
    " browser mode
    nnoremap <Leader>gv :Gitv --all<CR>

    " file mode
    nnoremap <Leader>gV :Gitv! --all<CR>
    vnoremap <leader>gV :Gitv! --all<cr>

    " easily perform arbitrary git commands
    cabbrev git Git

    " automatically split in whatever direction fits best
    let g:Gitv_OpenHorizontal = 'auto'

    " breaks ctrl-p and multiple cursors
    let g:Gitv_DoNotMapCtrlKey = 1

    " up/down commit nav
    " doesn't work
    " nnoremap <silent> <leader>gn :<C-U>call <SID>JumpToCommit(0)<cr>
    " nnoremap <silent> <leader>gp :<C-U>call <SID>JumpToCommit(1)<cr>
    " }}}

    " NERDTree {{{
        " extra space in NERDCommenter comments
        let g:NERDSpaceDelims="1"

        " NERDTree expand dirs with one child
        " let NERDTreeCasadeOpenSingleChildDir=1

        " NERDTree change keyboard shortcuts to use vim-nerdtree-tabs
        " map <C-e> :NERDTreeTabsToggle<CR>:NERDTreeMirrorOpen<CR>
        " map <C-e> :NERDTreeTabs<CR>:NERDTreeMirrorOpen<CR>
        " map <C-e> :NERDTreeTabsToggle<CR>
        map <C-e> :NERDTreeMirrorToggle<CR>

        " don't open a split for ctrlp or nerdtree
        augroup startify_augroup
            " autocmd!
            autocmd FileType startify setlocal buftype=
        augroup END
    " }}}

    " {{{ neocomplcache
    " phpcomplete omni complete for neocomplcache
    augroup phpcomplete_augroup
        " autocmd!
        " autocmd BufNewFile,BufRead *.twig,*.blade.php,*.tpl set filetype=html
        " autocmd BufNewFile,BufRead *.twig,*.blade.php,*.tpl,*.css,*.js,*.html set ts=2 sw=2 sts=2
        " autocmd FileType php set omnifunc=phpcomplete_extended#CompletePHP
        autocmd FileType php set omnifunc=phpcomplete#CompletePHP
        autocmd FileType php set omnifunc=phpcomplete#CompletePHP
    augroup END

    " neocomplcache disable auto popup
    " let g:neocomplcache_disable_auto_complete = 1

    " c-j and c-k go down and up in the list for neocomplcache
    " inoremap <expr> <C-j> pumvisible() ? '\<C-n>' : '\<C-j>'
    " inoremap <expr> <C-k> pumvisible() ? '\<C-p>' : '\<C-k>'
    " }}}"

    " {{{ PDV
    " PDV comment parameters
    let g:pdv_cfg_Package   = "Example"
    let g:pdv_cfg_Author    = "Michael Funk <mfunk@internetbrands.com>"
    let g:pdv_cfg_Copyright = "Copyright 2013 Internet Brands, Inc. All Rights Reserved."
    let g:pdv_cfg_License   = ""
    let g:pdv_cfg_Version   = ""
    let g:pdv_cfg_ClassTags = ["author"]
    " }}}"

    " {{{ phpcomplete
    " composer install command for phpcomplete
    let g:phpcomplete_index_composer_command = "composer"
    let g:phpcomplete_parse_docblock_comments = 1
    let g:phpcomplete_remove_function_extensions = ['xslt_php_4']
    let g:phpcomplete_remove_constant_extensions = ['xslt_php_4']
    " }}}"

    " {{{ phpctags
    " phpctags
    " let g:tagbar_phpctags_memory_limit = '512M'
    " }}}"

    " {{{ phpdoc
    augroup phpdoc_augroup
        autocmd!
        au BufRead,BufNewFile *.php inoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
        au BufRead,BufNewFile *.php nnoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
        au BufRead,BufNewFile *.php vnoremap <buffer> <leader>pd :call PhpDocRange()<CR>
    augroup END
    " }}}"

    " {{{ promptline

    command! MyPromptline :PromptlineSnapshot! ~/.dotfiles/to_link/promptline.theme.bash

    " promptline and tmuxline configs
    function! MyConfigs()
        :MyPromptline
        :MyTmuxline
    endfunction
    command! MyConfFiles :call MyConfigs()

    let g:promptline_theme = 'airline_visual'
    " let g:promptline_theme = 'powerlineclone'
    let g:promptline_preset = 'clear'
    " moved to global powerline switch above
    " let g:promptline_powerline_symbols = 0
    " }}}"

    " Syntastic {{{
    let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['html'] }
    " let g:syntastic_auto_loc_list = 1

    " underlining errors slows it down, it's in the sidebar already
    let g:syntastic_enable_highlighting = 0
    let g:syntastic_php_phpmd_post_args = '~/.dotfiles/support/phpmd_ruleset.xml'
    let g:syntastic_php_phpcs_args='--standard=psr2'

    " auto open loc list and jump to error when there's a php error
    let g:syntastic_auto_loc_list = 1
    " let g:syntastic_auto_jump = 2
    " }}}

    " {{{ tabular
    nmap <leader>a> :Tabularize /=><cr>
    vmap <leader>a> :Tabularize /=><cr>
    " }}}"

    " {{{ tagbar
    " tagbar autofocus is the whole point of tagbar
    let g:tagbar_autofocus = 1
    " }}}"

    " {{{ tasklist
    " tasklist plugin
    let g:tlTokenList = ['@TODO', '@FIXME']
    let g:tlWindowPosition = 1
    nnoremap <leader>td :TaskList<CR>
    nnoremap <leader>tl :TaskList<CR>
    " }}}"

    " {{{ tmuxline
    command! MyTmuxline :Tmuxline | TmuxlineSnapshot! ~/.dotfiles/support/tmuxline.conf

    " moved to global powerline switch above
    " let g:tmuxline_powerline_separators = 0

    " don't overwrite the theme
    let g:airline#extensions#tmuxline#enabled = 0

    " fits well with my theme - powerline or not
    let g:tmuxline_separators = {
        \ 'left' : '',
        \ 'left_alt': '',
        \ 'right' : '',
        \ 'right_alt' : '|',
        \ 'space' : ' '}

    " the segments used
    " let g:tmuxline_preset = 'full'
    let g:tmuxline_preset = {
        \'a'    : ['❏ #S'],
        \'b'    : ['#H'],
        \'win'  : ['#I:#W'],
        \'cwin' : ['#I:#W #F'],
        \'y'    : ['%a', '%b %d', '%I:%M %p'],
        \'z'    : ['#(battery -t)'],
    \}

    " custom tmuxline theme
    " let g:tmuxline_theme = 'iceberg'
    let g:tmuxline_theme = {
        \ 'a': ['green', 'default'],
        \ 'b': ['colour10', 'default'],
        \ 'bg': ['default', 'black'],
        \ 'c': ['colour10', 'default'],
        \ 'cwin': ['red', 'default'],
        \ 'win': ['colour11', 'default'],
        \ 'x': ['colour10', 'default'],
        \ 'y': ['colour10', 'default'],
        \ 'z': ['blue', 'default']
    \}

    " }}}

    " {{{ ultisnips
    " ultisnips start with my ultisnips
    let g:UltiSnipsDontReverseSearchPath="1"
    let g:UltiSnipsEditSplit="vertical"
    let g:UltiSnipsListSnippets='<c-l>'
    " let g:UltiSnipsExpandTrigger='<a-;>'
    " let g:UltiSnipsJumpForwardTrigger='<c-l>'
    " let g:UltiSnipsJumpBackwardTrigger='<c-h>'
    " let g:UltiSnips#ExpandSnippetOrJump='<a-;>'
    " }}}"

    " {{{ underline tags
    " augroup UnderlineTag
      " autocmd!
      " autocmd BufEnter *.php UnderlineTagOn
    " augroup END
    " }}}

    " {{{ undoclosewin
    " really it's undo close tab
    nnoremap <leader>uc :UcwRestoreWindow<cr>
    " }}}

    " {{{ undotree
    silent! unmap <leader>u
    nnoremap <leader>uu :UndotreeToggle<CR>
    " }}}

    " {{{ vdebug xdebug plugin
    let g:vdebug_options = {}
    let g:vdebug_options['server'] = '192.168.56.1'
    let g:vdebug_options['port'] = '9000'
    let g:vdebug_options['ide_key'] = 'netbeans-xdebug'
    let g:vdebug_options['path_maps'] = {'/var/www': '/media/sf_ubuntubox'}
    " let g:vdebug_options["break_on_open"] = 0
    let g:vdebug_options["watch_window_style"] = 'compact'
    " move run_to_cursor from F1 to F9
    let g:vdebug_keymap = {
    \    "run" : "<F5>",
    \    "run_to_cursor" : "<F9>",
    \    "step_over" : "<F2>",
    \    "step_into" : "<F3>",
    \    "step_out" : "<F4>",
    \    "close" : "<F6>",
    \    "detach" : "<F7>",
    \    "set_breakpoint" : "<F10>",
    \    "get_context" : "<F11>",
    \    "eval_under_cursor" : "<F12>",
    \    "eval_visual" : "<Leader>ev",
    \}
    " }}}"

    " {{{ vim-airline

    let g:airline_theme = 'solarized'
    " warning this is really slow. So I only enabled it for php files.
    augroup php_tagbar
        autocmd FileType php let g:airline#extensions#tagbar#enabled = 1
    augroup END
    " moved to global powerline switch above
    " let g:airline_left_sep = ''
    " let g:airline_left_alt_sep = ''
    " let g:airline_right_sep = ''
    " let g:airline_right_alt_sep = ''

    " unicode symbols
    " let g:airline_left_sep = '»'
    " let g:airline_left_sep = '▶'
    " let g:airline_right_sep = '«'
    " let g:airline_right_sep = '◀'
    " let g:airline_symbols.linenr = '␊'
    " let g:airline_symbols.linenr = '␤'
    " let g:airline_symbols.linenr = '¶'
    " let g:airline_symbols.branch = '⎇'
    " let g:airline_symbols.paste = 'ρ'
    " let g:airline_symbols.paste = 'Þ'
    " let g:airline_symbols.paste = '∥'
    " let g:airline_symbols.whitespace = 'Ξ'
    " let g:airline_powerline_fonts = 1
    " moved to global powerline switch above
    " let g:airline_powerline_fonts=0
    " let g:airline#extensions#hunks#non_zero_only = 1
    let g:airline#extensions#bufferline#enabled = 0
    " vim-bufferline prevent from showing in command bar *and* statusline
    let g:bufferline_echo = 0

    " unicode symbols
    " let g:airline_left_sep = '»'
    " let g:airline_left_sep = '▶'
    " let g:airline_right_sep = '«'
    " let g:airline_right_sep = '◀'
    " let g:airline_symbols.linenr = '␊'
    " let g:airline_symbols.linenr = '␤'
    " let g:airline_symbols.linenr = '¶'
    " let g:airline_symbols.branch = '⎇'
    " let g:airline_symbols.paste = 'ρ'
    " let g:airline_symbols.paste = 'Þ'
    " let g:airline_symbols.paste = '∥'
    " let g:airline_symbols.whitespace = 'Ξ'

    " advanced tabline vertical separators
    " let g:airline#extensions#tabline#enabled = 1
    " let g:airline#extensions#tabline#left_sep = ' '
    " let g:airline#extensions#tabline#left_alt_sep = '|'
    " let g:airline#extensions#tabline#left_alt_sep = ' '

    " }}}

    " {{{ vim-ctrlp-tjump
    nnoremap <c-]> :CtrlPtjump<cr>
    nnoremap <leader>pb :CtrlPBuffer<CR>
    nnoremap <leader>pm :CtrlPMRUFiles<CR>
    " }}}"

    " {{{ vim-github-dashboard
    let g:github_dashboard = { 'username': 'mikedfunk' }
    " }}}

    " {{{ vim-instant-markdown
    " turns off auto preview and enables the :InstantMarkdownPreview command
    let g:instant_markdown_autostart = 0
    " }}}

    " {{{ vim-jira-open
    " default is <leader>jo
    let g:jira_browse_url = 'http://10.17.37.213/browse/'
    " }}}

    " {{{ vim-signify
    " I only want signify to worry about git
    let g:signify_vcs_list = [ 'git' ]
    let g:signify_sign_add               = '+'
    let g:signify_sign_change            = '!'
    let g:signify_sign_delete            = '_'
    let g:signify_sign_delete_first_line = '‾'
    " }}}

    " {{{ vim-rooter
    nnoremap <silent> <Leader>pr <Plug>RooterChangeToRootDirectory
    " }}}

    " {{{ vim-startify
    let g:startify_session_dir = '~/.vim/sessions'
    let g:startify_bookmarks = [ '~/.vimrc.local' ]
    " let g:startify_change_to_vcs_root = 1

    " make session autoload work in vim-startify
    " let NERDTreeHijackNetrw = 0

    " disable common but unimportant files
    let g:startify_skiplist = [
        \ 'COMMIT_EDITMSG',
        \ '\.DS_Store'
        \ ]
    " }}}"

    " {{{ vim-php-namespace
    " php add use statement for current class
    inoremap <Leader><Leader>u <C-O>:call PhpInsertUse()<CR>
    noremap <Leader><Leader>u :call PhpInsertUse()<CR>
    " }}}"

    " {{{ vim-tags
    " doesn't want to auto-generate for some reason
    " augroup PhpVimTag
        " " autocmd!
        " autocmd BufWritePost *.php :TagsGenerate
    " augroup END
    " let g:vim_tags_project_tags_command='ctags -R --exclude=.git --exclude=*.log --exclude=*.js --fields=+aimS --languages=php --PHP-kinds=+cf --recurse=yes --tag-relative=yes {OPTIONS} {DIRECTORY} 2>/dev/null'
    " let g:vim_tags_use_vim_dispatch=1
    " }}}

    " {{{ vim-togglelist
    nnoremap <script> <silent> <leader>ll :call ToggleLocationList()<CR>
    nnoremap <script> <silent> <leader>qq :call ToggleQuickfixList()<CR>
    " }}}

    " {{{ vim-autoclose
    " don't put closing "s in vimscript files
    let g:autoclose_vim_commentmode = 1
    " }}}

    " {{{ vimux
    let g:VimuxHeight = "40"
    nnoremap <leader>rp :VimuxPromptCommand<cr>
    nnoremap <leader>rc :VimuxPromptCommand<cr>cd $PWD<cr>:VimuxInspectRunner<cr>
    nnoremap <leader>rl :VimuxRunLastCommand<cr>
    nnoremap <leader>rr :VimuxRunLastCommand<cr>
    nnoremap <leader>ri :VimuxInspectRunner<cr>
    nnoremap <leader>rx :VimuxCloseRunner<cr>
    " }}}

    " {{{ vimux-phpunit
    nnoremap <leader>pf :VimuxPHPUnitRunCurrentFile<cr>
    nnoremap <leader>pu :call VimuxRunCommand("phpunit")<cr>
    nnoremap <leader>pp :VimuxRunLastCommand<cr>
    " }}}

    " {{{ youcompleteme
    " open preview window while completing
    let g:ycm_add_preview_to_completeopt=1
    " let g:ycm_allow_changing_updatetime=0
    " }}}

    " {{{ ZoomWin
    " mapping just like <c-a>z for tmux
    nnoremap <c-w>z :ZoomWin<cr>
    " }}}

" }}}

" Include Custom vimrc if exists {{{
    if filereadable($HOME . "/.vimrc.custom.local")
        source ~/.vimrc.custom.local
    endif
" }}}
