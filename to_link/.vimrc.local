" Modeline {{{
" vim:fdm=marker
"
"  ___  ____ _         ______           _
"  |  \/  (_) |        |  ___|         | |
"  | .  . |_| | _____  | |_ _   _ _ __ | | __
"  | |\/| | | |/ / _ \ |  _| | | | '_ \| |/ /
"  | |  | | |   <  __/ | | | |_| | | | |   <
"  \_|  |_/_|_|\_\___| \_|  \__,_|_| |_|_|\_\
"
" My customizations to spf13.com.
" http://mikefunk.com
" }}}

" General {{{
    let g:snips_author = 'Michael Funk <mfunk@internetbrands.com>'

    " allow interactive shell commands to source my .bash_profile
    set shell=/bin/bash\ -i

    " disable auto folding
    set nofoldenable
    " and in PIV
    let g:DisableAutoPHPFolding = 1

    " highlight matching words in red automatically
    :autocmd CursorMoved * exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))

    " enable the preview window for omnicompletion - doesn't work for some reason
    " set completeopt+=preview
    set previewheight=15

    " supposed to make vim faster in tmux
    set notimeout
    set ttimeout
    set timeoutlen=50

    " also supposed to make vim faster
    " set nocursorline

    " turn off relative line numbering
    set nornu
    set number

    " disable spellcheck
    set nospell

    " if the last window is a quickfix, close it
    aug QFClose
      au!
      au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
    aug END

    " 2 space indent in html
    " au BufNewFile,BufRead *.blade.php set filetype=html
    autocmd FileType smarty,blade,html setlocal shiftwidth=2 tabstop=2 softtabstop=2

    " visually select a search result
    nnoremap g/ //e<Enter>v??<Enter>

    " my version of fast tabs
    nnoremap gh gT
    nnoremap gl gt
    nnoremap gn :tabnew<cr>

    " set this to an html view
    nnoremap <leader>h :setlocal ft=html shiftwidth=2 tabstop=2<cr>

    " open tag in tab
    :nnoremap <silent><Leader><C-]> <C-w><C-]><C-w>T
" }}}

" Unbundle {{{

    " I don't use this now
    UnBundle 'jonathanfilip/vim-lucius'

    " This is the wrong version, I don't even know how it gets it
    " UnBundle 'Shougo/vimproc'
    "
    " This is super annoying
    UnBundle 'myusuf3/numbers.vim'

    " I use ultisnips
    UnBundle 'Shougo/neosnippet'

    " I use ultisnips
    UnBundle 'honza/vim-snippets'

    " I learned that 16 color is better than 256/csapprox
    UnBundle 'godlygeek/csapprox'

    " too many slowdowns and freezes.
    " UnBundle 'Shougo/neocomplcache'

    " it slows down vim
    UnBundle 'Lokaltog/powerline'
    UnBundle 'Lokaltog/vim-powerline'

    " temporary due to crippling bug"
    " UnBundle 'bling/vim-airline'

    " I already use phpqatools
    " UnBundle 'scrooloose/syntastic'

    " I use a different one
    UnBundle 'tobyS/pdv'

    " causes problems with youcompleteme
    UnBundle 'Townk/vim-autoclose'

    " I installed newer versions of the same stuff
    UnBundle 'spf13/PIV'

    " This breaks s for substitute
    UnBundle 'justinmk/vim-sneak'

    " temporarily broken with Vundle commands
    UnBundle 'gorodinskiy/vim-coloresque'

    " various spf-13 stuff I don't use
    UnBundle 'jnwhiteh/vim-golang'
    UnBundle 'python.vim'
    UnBundle 'python_match.vim'
    UnBundle 'pythoncomplete'
    UnBundle 'briancollins/vim-jst'
    UnBundle 'derekwyatt/vim-scala'
    UnBundle 'derekwyatt/vim-sbt'
    UnBundle 'spf13/vim-gocode'
    UnBundle 'klen/python-mode'
    UnBundle 'tpope/vim-cucumber'
    UnBundle 'quentindecock/vim-cucumber-align-pipes'
    UnBundle 'beyondwords/vim-twig'
    UnBundle 'adinapoli/cumino'
    UnBundle 'Twinside/vim-haskellConceal'
    UnBundle 'travitch/hasksyn'
    UnBundle 'lukerandall/haskellmode-vim'
    UnBundle 'bitc/hdevtools'
    UnBundle 'bitc/vim-hdevtools'
    UnBundle 'dag/vim2hs'
    UnBundle 'eagletmt/ghcmod-vim'
" }}}

" Key Mapping {{{
    " soft wrapping
    command! -nargs=* Wrap set wrap linebreak nolist

    " copy all
    nnoremap <leader>a mmggVGy`m

    " remap keys
    " map <c-n> :tabnew<cr>
    " nmap <leader>bpw :BreakpointWindow<cr>
    " nmap <leader>bpt :Breakpoint<cr>
    inoremap jj <Esc>
    " inoremap jk <Esc>
    " inoremap kj <Esc>

    " vimux
    " map <leader>rp :VimuxPromptCommand<cr>
    " map <leader>rc :VimuxPromptCommand<cr>cd $PWD<cr>:VimuxInspectRunner<cr>
    " map <leader>rl :VimuxRunLastCommand<cr>
    " map <leader>ri :VimuxInspectRunner<cr>
    " map <leader>rx :VimuxCloseRunner<cr>

    " resize splits, consistent with tmux bindings
    map <c-w><c-j> :resize +10<cr>
    map <c-w><c-k> :resize -10<cr>
    map <c-w><c-l> :vertical resize +10<cr>
    map <c-w><c-h> :vertical resize -10<cr>

    " maximize split
    nnoremap <C-L> <C-W>l<C-W><bar>
    nnoremap <C-H> <C-W>h<C-W><bar>

    " open all buffers in new tabs
    map <leader>bt :tab sball<CR>
    " open existing buffer in a newtab
    map <leader>te :ls<cr>:tabedit #

    " omnicompletion like Visual Studio or NetBeans
    imap <C-Space> <C-x><C-o>
    imap <C-@> <C-Space>

    " put cursor at end of text on y and p
    vnoremap <silent> y y`]
    vnoremap <silent> p p`]
    nnoremap <silent> p p`]
" }}}

" Theme {{{
    set colorcolumn=80

    " custom indent guide colors
    let g:indent_guides_auto_colors = 0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=black
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black

    "toggle between day and night theme
    call togglebg#map("<leader>bg")

    hi IndentGuidesOdd ctermbg=235
    hi IndentGuidesEven ctermbg=236

    if has('gui_running')
        " use solarized
    else
        " Compatibility for Terminal
        " let g:solarized_termtrans=1
        " let g:solarized_termcolors=16

        " works in 256 mode
        " let g:solarized_termtrans=0
        " let g:solarized_contrast="normal"
        " let g:solarized_visibility="normal"
        " let g:solarized_italic=1

        " colorscheme lucius
        " LuciusDark
        " LuciusDarkHighContrast
        " set background=light
        " LuciusLightHighContrast
        " hi ColorColumn guibg=#242424 ctermbg=235
        " hi TabLine ctermfg=Black
    endif

    " change the default EasyMotion shading to something more readable with Solarized
    hi link EasyMotionTarget ErrorMsg
    hi link EasyMotionShade  Comment

    " vim-gitgutter better background
    highlight clear SignColumn
" }}}

" Plugins {{{
    " NERDTree {{{
        " extra space in NERDCommenter comments
        let g:NERDSpaceDelims="1"

        " NERDTree expand dirs with one child
        " let NERDTreeCasadeOpenSingleChildDir=1

        " NERDTree change keyboard shortcuts to use vim-nerdtree-tabs
        " map <C-e> :NERDTreeTabsToggle<CR>:NERDTreeMirrorOpen<CR>
        " map <C-e> :NERDTreeTabs<CR>:NERDTreeMirrorOpen<CR>
        map <C-e> :NERDTreeMirrorToggle<CR>
        " map <C-e> :NERDTreeTabsToggle<CR>
    " }}}

    " cd to project root
    nnoremap <leader>dp :ProjectRootCD<cr>

    " tabular
    nmap <leader>a> :Tabularize /=><cr>
    vmap <leader>a> :Tabularize /=><cr>

    " PDV comment parameters
    let g:pdv_cfg_Package   = "Example"
    let g:pdv_cfg_Author    = "Michael Funk <mfunk@internetbrands.com>"
    let g:pdv_cfg_Copyright = "Copyright 2013 Internet Brands, Inc. All Rights Reserved."
    let g:pdv_cfg_License   = ""

    " reset file to HEAD in fugitive commit window
    autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>

    " for mouseterm
    if has("mouse")
        set mouse=a
    endif

    " turn off neosnippet mapping
    let g:spf13_no_neosnippet_expand=1

    " phpcomplete omni complete for neocomplcache
    au BufNewFile,BufRead *.blade.php,*.tpl set filetype=html
    autocmd FileType php set omnifunc=phpcomplete_extended#CompletePHP
    " autocmd FileType php set omnifunc=phpcomplete#CompletePHP

    " neocomplcache disable auto popup
    " let g:neocomplcache_disable_auto_complete = 1

    " c-j and c-k go down and up in the list
    inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
    inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

    " preview breaks youcompleteme
    " set completeopt-=preview

    " set guifont to powerline compatible for macvim
    " set guifont=Menlo\ for\ Powerline:h12
    " set guifont=Meslo\ LG\ S\ Regular\ for\ Powerline:h14

    " syntastic
    " set statusline+=%#warningmsg#
    " set statusline+=%{SyntasticStatuslineFlag()}
    " set statusline+=%*

    " Syntastic {{{
        let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['html'] }
        let g:syntastic_auto_loc_list = 1
        let g:syntastic_loc_list_height = 3
        let g:syntastic_enable_highlighting = 1
        " let g:syntastic_always_populate_loc_list=1
        " let g:syntastic_php_phpmd_post_args = '~/.dotfiles/phpmd_ruleset.xml'

        let g:syntastic_php_checkers=['php', 'phpcs', 'phpmd']
        let g:systastic_javascript_checkers=['jshint']
        let g:systastic_javascript_checkers=['jsonlint']
        let g:systastic_css_checkers=['csslint']
        let g:systastic_less_checkers=['lessc']
        let g:syntastic_html_checkers = ['w3']
        let g:syntastic_puppet_checkers = ['puppet']
    " }}}

    " filename
    hi default link User1 Identifier"blue
    " flags
    hi default link User2 Statement"green
    " errors
    hi default link User3 Error"orange
    " fugitive
    hi default link User4 Special

    " set quickfix window height automatically
    au FileType qf call AdjustWindowHeight(3, 5)
    function! AdjustWindowHeight(minheight, maxheight)
      exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
    endfunction

    " ctrlp extensions
    let g:ctrlp_extensions = ['tag']

    " since , replaces leader, use \ to go back in a [f]ind
    noremap \ ,

    " ultisnips start with my ultisnips
    let g:UltiSnipsDontReverseSearchPath="1"
    let g:UltiSnipsEditSplit="vertical"
    let g:UltiSnipsListSnippets='<c-L>'
    let g:UltiSnipsExpandTrigger='<c-J>'

    au BufRead,BufNewFile *.php inoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
    au BufRead,BufNewFile *.php nnoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
    au BufRead,BufNewFile *.php vnoremap <buffer> <leader>pd :call PhpDocRange()<CR>

    " vim-airline
    let g:airline_theme = 'solarized'
    let g:airline#extensions#tagbar#enabled = 1
    " let g:airline_left_sep = '⮀'
    " let g:airline_right_sep = '⮂'
    let g:airline_left_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_powerline_fonts=0
    let g:airline#extensions#hunks#non_zero_only = 1
    let g:airline#extensions#bufferline#enabled = 0
    " vim-bufferline prevent from showing in command bar *and* statusline
    let g:bufferline_echo = 0


    " advanced tabline vertical separators
    " let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_sep = ' '
    " let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#tabline#left_alt_sep = ' '

    " tagbar autofocus is the whole point of tagbar
    let g:tagbar_autofocus = 1

    " phpctags
    let g:tagbar_phpctags_memory_limit = '512M'

    " vim-ctrlp-tjump
    nnoremap <c-]> :CtrlPtjump<cr>

    " fugitive
    " open quickfix window on git grep
    autocmd QuickFixCmdPost *grep* cwindow

    "ctags autogen on save
    " au BufWritePost *.php silent! !ctags --fields=+aimS --languages=php --PHP-kinds=+cf 2>/dev/null &

    " tag generation command (not working)
    " set exrc
    " set secure
    let g:vim_tags_project_tags_command = 'ctags -R --fields=+aimS --languages=php --PHP-kinds=+cf {OPTIONS} {DIRECTORY} 2>/dev/null'

    " gitgutter is wigging out with 7.4 and airline for some reason
    " https://github.com/airblade/vim-gitgutter/issues/106
    " let g:gitgutter_realtime = 0

    " vdebug
    " "g:vdebug_options['server'] = 'mfunk-mac.local'
    let g:vdebug_options = {}
    let g:vdebug_options['server'] = '192.168.56.1'
    let g:vdebug_options['port'] = '9001'
    " let g:vdebug_options["break_on_open"] = 0

    " composer install command for phpcomplete
    let g:phpcomplete_index_composer_command = "composer"

    " jshint2 plugin
    let jshint2_save = 1

    " phpcomplete-extended add use statement automatically
    let g:phpcomplete_extended_auto_add_use = 1

    " vim-startify"
    let g:startify_session_dir = '~/.vim/sessions'
    let g:startify_bookmarks = [ '~/.vimrc.local' ]
    let g:startify_session_persistence = 1
    let g:startify_change_to_vcs_root = 1
    let g:startify_restore_position = 1

    " don't open a split for ctrlp or nerdtree
    autocmd FileType startify setlocal buftype=

    " nerdtree on startup
    " autocmd VimEnter *
                " \ if !argc() |
                " \   Startify |
                " \   NERDTree |
                " \   execute "normal \<c-w>w" |
                " \ endif
    
    " make session autoload work in vim-startify
    " let NERDTreeHijackNetrw = 0

    " disable common but unimportant files
    let g:startify_skiplist = [
           \ 'COMMIT_EDITMSG',
           \ '\.DS_Store'
           \ ]

" }}}
" Include Custom vimrc if exists {{{
    if filereadable($HOME . "/.vimrc.custom.local")
        source ~/.vimrc.custom.local
    endif
" }}}
