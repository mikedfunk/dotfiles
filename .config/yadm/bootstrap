#!/bin/bash
# main yadm setup file https://github.com/TheLocehiliosan/yadm
# vim: set foldmethod=marker ft=sh:

# notes {{{
# Why did I wrap everything in functions? So I could re-run specific things
# when necessary without having to re-run the entire bootstrap file. It also
# makes it easier to temporarily run one or more install steps.
#
# This is random but I thought I'd add my experience trying wuzz for an http
# client here https://github.com/asciimoo/wuzz . Basically it sucks right now.
# There's no completion for loading requests so you have to back out and load
# by file just to get another request in there. There are emacs key bindings
# but very limited vim ones. There's an error pasting a header too long for the
# tiny headers box e.g. a bearer token - it gets pasted with spaces between
# every character beyond the width of the window O_O. The only way to get that
# working is to use a saved json request (you can't load a curl request) or to
# pass in params via cli args. Without that stuff it's way worse than just
# using vim-rest-console. I also looked around for other cli http clients and
# so far no other cool ncurses clients like joplin for notes. Will keep an eye
# out for anything better or to see if wuzz gets better.
# }}}

# helper functions {{{
function _log_info() { echo -e "$(tput setaf 2)$(tput rev)$(tput bold) \xE2\x9C\x93 $1 $(tput sgr0)"; "${@:2}"; }
function _log_error() { echo -e "$(tput setaf 1)$(tput rev)$(tput bold) \xE2\x9C\x97 $1 $(tput sgr0)"; "${@:2}"; }
function _log_notice() { echo -e "$(tput setaf 3)$(tput rev)$(tput bold) \xE2\x9A\xa0 $1 $(tput sgr0)"; "${@:2}"; }
function _has() { type "$1" &>/dev/null; }
# }}}

# create dirs {{{
_create_dirs () {
    _log_info "Creating any missing home directories"
    [[ -d "$HOME/Code" ]] || mkdir "$HOME/Code"
}
# }}}

# clone repos {{{

# _log_info "Cloning repos"
# mkdir -p "$HOME/Code"
# builtin cd "$HOME/Code"
# [[ -d "$HOME/Code/mikedfunk.github.io" ]] || git clone git@github.com:mikedfunk/mikedfunk.github.io.git
# builtin cd -

# saatchi repos {{{
# mkdir -p "$HOME/Code/saatchi"
# builtin cd "$HOME/Code/saatchi"
# [[ -d "$HOME/Code/saatchi/api" ]] || git clone git@github.com:saatchiart/api.git
# [[ -d "$HOME/Code/saatchi/catalog" ]] || git clone git@github.com:saatchiart/catalog.git
# [[ -d "$HOME/Code/saatchi/couchbase-views" ]] || git clone git@github.com:saatchiart/couchbase-views.git
# [[ -d "$HOME/Code/saatchi/easel" ]] || git clone git@github.com:saatchiart/easel.git
# [[ -d "$HOME/Code/saatchi/gallery" ]] || git clone git@github.com:saatchiart/gallery.git
# [[ -d "$HOME/Code/saatchi/gitlab-puppet" ]] || git clone ab.dmdmedia.net:mike.funk/saatchi.git
# [[ -d "$HOME/Code/saatchi/imgproc" ]] || git clone git@github.com:saatchiart/imgproc.git
# [[ -d "$HOME/Code/saatchi/imgproc-python" ]] || git clone git@gitlab.dmdmedia.net:saatchiart/imgproc.git imgproc-python
# [[ -d "$HOME/Code/saatchi/maropost-php-sdk" ]] || git clone git@github.com:saatchiart/maropost-php-sdk.git
# [[ -d "$HOME/Code/saatchi/affirm-php-sdk" ]] || git clone git@github.com:saatchiart/affirm-php-sdk.git
# [[ -d "$HOME/Code/saatchi/palette" ]] || git clone git@github.com:saatchiart/palette.git
# [[ -d "$HOME/Code/saatchi/potato" ]] || git clone git@github.com:saatchiart/potato.git
# [[ -d "$HOME/Code/saatchi/saatchiart" ]] || git clone git@github.com:saatchiart/saatchiart.git legacy
# [[ -d "$HOME/Code/saatchi/xdocker" ]] || git clone git@github.com:saatchiart/xdocker.git
# [[ -d "$HOME/Code/saatchi/yzed" ]] || git clone git@github.com:saatchiart/yzed.git zed
# [[ -d "$HOME/Code/saatchi/gitlab-puppet" ]] || git clone git@gitlab.dmdmedia.net:mike.funk/saatchi.git gitlab-puppet
# [[ -d "$HOME/Code/saatchi/saatchi-kubernetes" ]] || git clone git@gitlab.dmdmedia.net:sre/saatchi-shared-libs.git saatchi-kubernetes
# builtin cd -
# }}}

# }}}

# decrypt yadm files {{{
# _log_info "Decrypting yadm files"
# yadm decrypt
#
# This is commented out because it requires the GPG password each time. Yadm
# asynmetric encryption still requires a password on _decrypt_.
#
# TODO: This is also a chicken/egg scenario. Some encrypted files get symlinked
# into ~/Code/* directories, but those directories do not yet exist on a new
# install. But in order to clone those repos, I need my ssh keys, which are in
# my encrypted files too! If I decrypt _then_ clone, I'll get an error because
# the directories already exist. If I clone _then_ decrypt, I won't be able to
# clone yet.
#
# One workaround for this is to just clone the https urls for them,
# allowing me to authenticate via https basic auth. Downside: now the remotes
# on everything are set to the https version. I'll need to change to the ssh
# versions to let them use public key authorization. Hmmm...
#
# Another way would be if I was able to decrypt just my ssh keys separately.
# Maybe I can use a different encryption setup outside of yadm for those?
# Downside: now I have to deal with two methods of encryption. :(
#
# Another approach would be to decrypt, check to see if the repos have been
# cloned, if not delete the repo directories and their contents, clone, then
# decrypt again. Slight downside - I have to decrypt twice, requiring two
# password entries. But really this should only happen once - when the code has
# not been cloned. This seems like the right approach.
#
# TODO add .git/config/exclude for each codebase to yadm
# }}}

# install xcode command line tools {{{
# needed for a variety of things including phpenv (zlib), CommandLineTools below, sshpass
_install_xcode_command_line_tools () {
    _log_info "Installing xcode command line tools"
    xcode-select --install || true
    # /System/Library/CoreServices/Install Command Line Developer Tools.app
}
# }}}

# install necessary headers in /include on mojave {{{
# fyi the CommandLineTools directory doesn't even exist until you run `xcode-select --install`
# https://github.com/pyenv/pyenv/issues/1219#issuecomment-428700763
# TODO catalina https://apple.stackexchange.com/questions/373316/missing-headers-in-macos-10-15-catalina
_install_necessary_headers_in_include_on_mojave () {
    if ! [ -f "/Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg" ] || [ -f "$HOME/.mojave-lock" ]; then
        return
    fi
    _log_info "Installing additional tools needed for mojave"
    sudo installer -pkg "/Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg" -target / && touch "$HOME/.mojave-lock"
}
# }}}

# install homebrew if it's missing {{{
_install_homebrew_if_its_missing () {
    _has brew && return
    _log_info "Installing homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}
# }}}

# install/update homebrew packages {{{
_pin_if_needed () {
    PACKAGE="$1"
    ( brew info "$PACKAGE" | grep --quiet "pinned" ) || brew pin "$PACKAGE"
}

_install_update_homebrew_packages () {
    [ -e "$HOME/.Brewfile" ] || return
    _log_info "Installing/upgrading homebrew packages"
    brew update # update homebrew itself and the list of brew package versions
    brew bundle --global # install/upgrade from ~/.Brewfile
    brew upgrade         # upgrade all homebrew packages
    brew cask upgrade    # upgrade all homebrew casks
    brew cleanup         # remove outdated versions and dead symlinks from the homebrew prefix
    # brew bundle --global cleanup --force # remove brew packages not in ~/.Brewfile
    brew link libcouchbase@2 --force
}

# }}}

# install cpanm {{{
_install_cpanm () {
    _has cpanm && return
    log_info "installing perl cpanm"
    yes | cpan App::cpanminus
}
# }}}

# install cpanm packages {{{
_install_cpanm_packages () {
    log_info "installing/upgrading perl cpanm packages"
    cpanm swat
}
# }}}

# _install_neovim_from_source {{{
_install_neovim_from_source () {
    _log_info "Installing neovim from source"
    pushd .
    if [[ ! -d "$HOME/Code/neovim" ]]; then
        cd "$HOME/Code"
        git clone git@github.com:neovim/neovim.git
        cd neovim
    else
        cd "$HOME/Code/neovim"
    fi
    git pull
    rm build/.ran-third-party-cmake 2>/dev/null || true
    make CMAKE_BUILD_TYPE=RelWithDebInfo
    sudo make install
    popd
}
# }}}

# install mc {{{
_install_mc () {
    # brew formula is broken for this because it's in a private github repo :/
    _has mc && return
    _log_info "installing mc (memcached)"
    curl -L https://github.com/andersjanmyr/mc/releases/download/v1.4.3/mc-osx > /usr/local/bin/mc
    chmod +x /usr/local/bin/mc
}
# }}}

# akamai {{{
_install_upgrade_akamai () {
    _has akamai && return
    _log_info "Updating akamai commands"
    [[ "$(akamai list | grep purge)" ]] || akamai install purge
    akamai update
}
# }}}

# update yarn {{{
_install_upgrade_yarn () {
    _log_info "Installing/upgrading yarn packages"
    builtin cd || return
    yarn global upgrade
    builtin cd - || return
}
# }}}

# set zsh as shell {{{
_set_zsh_as_shell () {
    if [[ $(grep "/usr/local/bin/zsh" /etc/shells -c) == 0 ]]; then
        _log_info "Installing homebrew zsh to /etc/shells"
        sudo /bin/sh -c "echo /usr/local/bin/zsh >> /etc/shells"
    fi
    if [[ "$SHELL" != "/usr/local/bin/zsh" ]]; then
        _log_info "Changing shell to homebrew zsh" chsh -s "$(which zsh)"
    fi
}
# }}}

# install tmux plugin manager {{{
_install_tmux_plugin_manager () {
    [[ -d "$HOME/.tmux/plugins/tpm" ]] && return
    _log_info "Installing tmux plugin manager. Upgrade packages with \`<c-a>U\`."
    git clone https://github.com/tmux-plugins/tpm $HOME/.tmux/plugins/tpm
}
# }}}

# install/update tmux plugins {{{
_install_upgrade_tmux_plugins () {
    _log_info "Install/upgrade tmux plugins"
    $HOME/.tmux/plugins/tpm/bin/install_plugins
    $HOME/.tmux/plugins/tpm/bin/update_plugins all
}
# }}}

# Vim {{{

# Directories {{{
_create_vim_directories () {
    if [[ ! -d "$HOME/.vim/autoload" ]]; then
        _log_info "Creating required vim autoload directory"
        mkdir -p "$HOME/.vim/autoload" &&
            chmod +w "$HOME/.vim/autoload"
    fi
    if [[ ! -d "$HOME/.vim/files/info" ]]; then
        _log_info "Creating required vim info directory"
        mkdir -p "$HOME/.vim/files/info" &&
            chmod a+w "$HOME/.vim/files/info"
    fi
}
# }}}

# install vim-plug {{{
_install_vim_plug () {
    [ -f $HOME/.vim/autoload/plug.vim ] && return
    _log_info "Installing vim-plug"
    curl -fLo \
        ~/.vim/autoload/plug.vim \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}
# }}}

# install/upgrade vim plugins {{{
_install_upgrade_vim_plugins () {
    _log_info "Installing/upgrading vim plugins"
    # vim +PlugInstall +PlugUpdate +PlugClean! +qall
    nvim +PlugUpgrade +PlugInstall +PlugUpdate +PlugClean! +UpdateRemotePlugins +qall
    # coc.nvim extension updates
    # nvim +"CocInstall coc-phpls" +CocUpdate +qall
}
# }}}

# }}}

# install php versions {{{
_install_php_70 () {
    ( asdf list php | grep --quiet 7.0.33 ) && return
    log_info "installing php 7.0.33"
    asdf php install 7.0.33
    asdf global php 7.0.33
    local PHP_PATH="$(asdf where php)"

    # install pear so we can use pecl to install extensions
    [ -f "$HOME/.bin/go-pear.phar" ] || wget -O "$HOME/.bin/go-pear.phar" http://pear.php.net/go-pear.phar
    chmod +x "$HOME"/.bin/go-pear.phar
    PHP_PATH="${PHP_PATH}" "$HOME/.support/install-pear.sh" # installs pear non-interactively

    mkdir -p "${PHP_PATH}"/conf.d
    # this is a sub requirement of couchbase
    yes "" | "${PHP_PATH}"/pear/bin/pecl install pcs && ( echo 'extension="phpcs.so"' >"${PHP_PATH}"/conf.d/pcs.ini )
    yes "" | "${PHP_PATH}"/pear/bin/pecl install couchbase-2.2.4 && ( echo 'extension="couchbase.so"' >"${PHP_PATH}"/conf.d/couchbase.ini )
    yes "" | "${PHP_PATH}"/pear/bin/pecl install memcached && ( echo 'extension="memcached.so"' >"${PHP_PATH}"/conf.d/memcached.ini )
    yes "" | "${PHP_PATH}"/pear/bin/pecl install imagick && ( echo 'extension="imagick.so"' >"${PHP_PATH}"/conf.d/imagick.ini )
    ln -sf "$HOME/.composer/composer.json" "${PHP_PATH}"/.composer/composer.json
    _install_update_composer_packages
    asdf reshim php 7.0.33
}

_install_php_versions () {
    builtin cd $HOME >/dev/null || return
    _log_info "installing php version(s)"
    asdf plugin add php && ( sed -i '' "/--enable-intl/d" $HOME/.asdf/plugins/php/bin/install )

    # 7.0.33
    _install_php_70

    # 7.4.7
    ( asdf list php | grep --quiet 7.4.7 ) || asdf php install 7.4.7
    asdf global php 7.4.7

    builtin cd - >/dev/null || return
}
# }}}

# install node version(s) {{{
_install_node_versions () {
    builtin cd $HOME >/dev/null || return
    _log_info "installing node version(s)"
    asdf plugin add nodejs
    # https://github.com/asdf-vm/asdf-nodejs/issues/40#issuecomment-297053730
    bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
    ( asdf list nodejs | grep --quiet 9.11.2 ) || asdf nodejs install 9.11.2
    ( asdf list nodejs | grep --quiet 14.4.0 ) || asdf nodejs install 14.4.0
    asdf global nodejs 14.4.0
    builtin cd - >/dev/null || return
}
# }}}

# install phive {{{
# NOTE: phive requires php 7.2+
_install_upgrade_phive () {
    if _has phive; then
        _log_info "Updating phive"
        phive selfupdate
    else
        _log_info "Installing phive"
        cd
        wget -O phive.phar "https://phar.io/releases/phive.phar"
        wget -O phive.phar.asc "https://phar.io/releases/phive.phar.asc"
        gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0x9D8A98B29B2D5D79
        gpg --verify phive.phar.asc phive.phar
        rm phive.phar.asc
        chmod +x phive.phar
        mv phive.phar /usr/local/bin/phive
        cd -
    fi
}
# }}}

# install/update ruby gems {{{
# Installs from ~/Gemfile
_install_update_ruby_gems () {
    _log_info "Installing/upgrading ruby gems"
    gem install bundler
    builtin cd || return
    bundle config set system true
    bundle install
    bundle binstubs
    bundle update
    bundle clean --force
    builtin cd - || return
    bundle config set system false
}
# }}}

# update python3 pip packages {{{

# update all pip packages
_pip-update () {
    pip3 list --outdated | \
        grep --invert-match 'Package' | \
        grep --invert-match --regexp='\-\{5\}' | \
        awk '{print $1}' | \
        xargs -n1 pip3 install --upgrade
}
_update_python3_pip_packages () {
    _log_info "Installing/upgrading pip3 packages"
    pip3 install neovim --user # neovim uses this pip/python version
    PIP_SUCCESSFUL=1
    pip3 install -r "$HOME/requirements.txt" --user || PIP_SUCCESSFUL=0
    # pip-review broke recently:
    # zsh: /usr/local/bin/pip-review: bad interpreter: /usr/local/opt/python/bin/python3.6: no such file or directory
    # pip-review --local --auto &&
    # 	pip3 freeze >"$HOME/requirements.txt"
    # pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip3 install -U
    _pip-update || PIP_SUCCESSFUL=0
    # otherwise it might freeze a failed state
    [[ $PIP_SUCCESSFUL ]] && pip3 freeze >"$HOME/requirements.txt"
}
# }}}

# install/update composer and packages {{{
_install_update_composer_packages () {
    builtin cd $HOME/.composer >/dev/null || return
    _log_info "Installing/upgrading composer packages"
    composer selfupdate
    composer global install
    composer global update
    builtin cd - || return
}
# }}}

# install nextdns service {{{
_install_activate_nextdns () {
    _log_info "Installing nextdns service and activating it"
    sudo nextdns install --config "$NEXTDNS_CONFIG"
    sudo nextdns activate
}
# }}}

# install or upgrade ntfy {{{
# https://github.com/dschep/ntfy/issues/171#issuecomment-433388371
_install_upgrade_ntfy () {
    if _has ntfy; then
        _log_info "Updating ntfy"
        cd
        /usr/local/bin/python3 -m pip install --upgrade ntfy
        cd -
        return
    fi
    _log_info "Installing ntfy"
    cd
    /usr/local/bin/python3 -m pip install ntfy
    cd -
}
# }}}

# install or upgrade ix.io client {{{
# ix.io lets you copy/paste to/from a web service
# less $(which ix) for details
# or ix -h
_install_upgrade_ix_io () {
    _log_info "installing/upgrading ix.io client"
    curl ix.io/client > /usr/local/bin/ix
    chmod +x /usr/local/bin/ix
}
# }}}

# install cod {{{
# completion generator via --help https://github.com/dim-an/cod
_install_cod () {
    _has cod && return
    _log_info "Installing cod"
    builtin cd || return
    wget https://github.com/dim-an/cod/releases/download/v0.0.0/cod-Darwin.tgz
    tar xzvf cod-Darwin.tgz
    mv cod-Darwin/cod /usr/local/bin/
    chmod +x /usr/local/bin/cod
    rm -rf cod-Darwin
    builtin cd - || return
}
# }}}

# ls_colors {{{
_install_ls_colors () {
    [ -d "$HOME"/.dircolors ] && return
    _log_info "installing LS_COLORS"
    wget https://raw.github.com/trapd00r/LS_COLORS/master/LS_COLORS -O $HOME/.dircolors
}
# }}}

# antibody {{{
_update_antibody_plugins () {
    _log_info "Updating antibody plugins"
    # source <(antibody init)
    antibody update # update all packages
}
# }}}

# apply hosts file {{{
_apply_hosts_file () {
    _log_info "Syncing hosts file"
    hostess apply "$HOME/.support/hosts.json"
}
# }}}

# let iterm see italics {{{
_let_iterm_see_italics () {
    _log_info "Enabling italic terminal"
    mkdir -p "$HOME/.terminfo/78"
    tic -o "$HOME/.terminfo/78/" "$HOME/.support/screen-256color.terminfo.txt"
    tic -x "$HOME/.support/tmux-256color.terminfo.txt"
}
# }}}

# Mac preferences {{{
# https://www.reddit.com/r/MacOS/comments/9ijy88/font_antialiasing_on_mojave/?utm_content=title&utm_medium=front&utm_source=reddit&utm_name=MacOS
_apply_mac_preferences () {
    defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO

    # TODO write a function to abstract the repetition here
    _log_info "Setting general mac preferences"
    # Disable “natural” (Lion-style) scrolling
    defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false
    # dock on left side
    defaults write com.apple.dock orientation -string 'left'
    # mac dark mode
    defaults write NSGlobalDomain AppleInterfaceStyle -string 'Dark'
    # graphite color theme
    defaults write NSGlobalDomain AppleAquaColorVariant -int 6
    # disable dashboard
    defaults write com.apple.dashboard dashboard-enabled-state -int 1
    # Disable press-and-hold for keys in favor of key repeat
    # defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
    # Set a blazingly fast keyboard repeat rate
    # defaults write NSGlobalDomain KeyRepeat -int 1
    # defaults write NSGlobalDomain InitialKeyRepeat -int 10
    # Increase sound quality for Bluetooth headphones/headsets
    defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40
    # Require password immediately after sleep or screen saver begins
    defaults write com.apple.screensaver askForPassword -int 1
    defaults write com.apple.screensaver askForPasswordDelay -int 0
    # Use column view in all Finder windows by default
    # Four-letter codes for the other view modes: `icnv`, `Nlsv`, `Flwv`
    defaults write com.apple.finder FXPreferredViewStyle -string "clmv"
    # Show the ~/Library folder
    chflags nohidden ~/Library
    # Chrome - Disable the all too sensitive backswipe on Magic Mouse
    defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false
    defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false
    defaults write com.apple.screencapture location ~/Screenshots

    killall Dock
    killall Finder
    killall SystemUIServer

    # finder default location home
    defaults write com.apple.finder NewWindowTargetPath "file:/$HOME/"
    if [[ $(defaults read com.apple.dock orientation) != "left" ]]; then
        _log_info "Moving dock to left side"
        defaults write com.apple.dock orientation -string 'left'
        killall Dock
    fi
    if [[ $(defaults read NSGlobalDomain AppleInterfaceStyle) != "Dark" ]]; then
        _log_info "Mac dark mode"
        defaults write NSGlobalDomain AppleInterfaceStyle -string 'Dark'
        killall Dock
        killall SystemUIServer
    fi
    if [[ $(defaults read NSGlobalDomain AppleAquaColorVariant) != 6 ]]; then
        _log_info "Graphite color theme"
        defaults write NSGlobalDomain AppleAquaColorVariant -int 6
        killall Finder
    fi
    if [[ $(defaults read com.apple.dashboard dashboard-enabled-state) != 1 ]]; then
        _log_info "Disable dashboard"
        defaults write com.apple.dashboard dashboard-enabled-state -int 1
        killall Finder
    fi
}
# }}}

# launchctl jobs {{{
# debug launchd jobs https://stackoverflow.com/q/6337513/557215
# use this form to easily generate a launchd plist: http://launched.zerowidth.com/
_start_launch_agents () {
    _log_info "Starting launch agents"
    # let's use lunchy instead of launchctl! https://github.com/eddiezane/lunchy
    lunchy start --write mike.saatchi-tunnel.autossh
    lunchy start --write mike.saatchi-proxy.autossh
    # lunchy start --write mike.toaf-tunnel-prod.autossh
    # lunchy start --write mike.toaf-tunnel-qa.autossh
}
# }}}

# fix file size limit for watching with entr {{{
# http://entrproject.org/limits.html
_fix_file_size_limit_for_watching_with_entr () {
    [ -f /Library/LaunchDaemons/limit.maxfiles.plist ] && return
    _log_info "Installing max files limit fixer for watching with entr"
    builtin cd /Library/LaunchDaemons || return
    sudo curl -sO http://entrproject.org/etc/limit.maxfiles.plist
    builtin cd - || return
}
# }}}

# install nix package manager {{{
_install_nix_package_manager () {
    [[ -d "/nix" ]] && return
    _log_info "Installing nix package manager (will require sudo)"
    # curl https://nixos.org/nix/install | sh
    bash <(curl https://nixos.org/nix/install)
}
# }}}

# upgrade docker-machine {{{
_upgrade_docker_machine () {
    _log_info "Upgrading docker-machine"
    docker-machine upgrade
}
# }}}

# link docker-for-mac {{{
_link_docker_for_mac () {
    # brew cask upgrade docker removes all docker-for-mac executables but doesn't link them, and there's no "brew cask link docker". I assume this is a temporary bug with the cask formula.
    _log_info "Linking docker-for-mac binaries"
    DOCKER_APP_BIN="/Applications/Docker.app/Contents/Resources/bin"
    ln -sf "$DOCKER_APP_BIN"/docker /usr/local/bin/docker
    ln -sf "$DOCKER_APP_BIN"/docker-credential-osxkeychain /usr/local/bin/docker-credential-osxkeychain
    ln -sf "$DOCKER_APP_BIN"/docker-credential-desktop /usr/local/bin/docker-credential-desktop
    # ln -sf "$DOCKER_APP_BIN"/docker-machine /usr/local/bin/docker-machine # this is no longer included in docker-for-mac
    # ln -sf "$DOCKER_APP_BIN"/docker-compose /usr/local/bin/docker-compose # this is weirdly a directory in docker-for-mac
}
# }}}

# fix yarn link {{{
# not sure why this happens
_fix_yarn_link () {
    _log_info "Fixing yarn link"
    brew unlink yarn && brew link yarn
}
# }}}

# clear evalcache {{{
_clear_evalcache () {
    _log_info "Clearing evalcache"
    # This is what _evalcache_clear does
    rm -f "$ZSH_EVALCACHE_DIR"/init-*.sh
}
# }}}

# reminders {{{
_show_reminders () {
    true # noop
    # _log_info "Don't forget to 'docker-machine upgrade' once in a while!"
    # _log_info "Don't forget to 'brew cask upgrade virtualbox virtualbox-extension-pack' once in a while!"
}
# }}}

# run functions {{{
# this way I can still source this file but comment out these function calls
# and run one or more independently. This is extremely useful!!
_create_dirs
_install_xcode_command_line_tools
_install_necessary_headers_in_include_on_mojave
_install_homebrew_if_its_missing
_install_update_homebrew_packages
_install_php_versions
_install_node_versions
# _install_update_composer_packages
# _install_update_cgr_packages
_install_upgrade_akamai
_install_upgrade_yarn
_set_zsh_as_shell
_install_tmux_plugin_manager
_install_upgrade_tmux_plugins
_create_vim_directories
_install_vim_plug
_install_upgrade_vim_plugins
# _install_upgrade_phive
_install_update_ruby_gems
_update_python3_pip_packages
_install_upgrade_ntfy
# _install_ls_colors
# _install_cpanm
# _install_cpanm_packages
_update_antibody_plugins
_apply_hosts_file
_let_iterm_see_italics
_apply_mac_preferences
_start_launch_agents
_fix_file_size_limit_for_watching_with_entr
# _install_activate_nextdns
# _upgrade_docker_machine
_link_docker_for_mac
# _install_neovim_from_source
# _install_mc
# _install_nix_package_manager
_install_upgrade_ix_io
_install_cod
_fix_yarn_link
_clear_evalcache
# _show_reminders
_log_info "Installation complete"
# }}}
