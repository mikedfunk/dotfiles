#!/bin/bash
# main yadm setup file https://github.com/TheLocehiliosan/yadm
# vim: set foldmethod=marker ft=sh:

# notes {{{
# Why did I wrap everything in functions? So I could re-run specific things
# when necessary without having to re-run the entire bootstrap file. It also
# makes it easier to temporarily run one or more install steps.
#
# This is random but I thought I'd add my experience trying wuzz for an http
# client here https://github.com/asciimoo/wuzz . Basically it sucks right now.
# There's no completion for loading requests so you have to back out and load
# by file just to get another request in there. There are emacs key bindings
# but very limited vim ones. There's an error pasting a header too long for the
# tiny headers box e.g. a bearer token - it gets pasted with spaces between
# every character beyond the width of the window O_O. The only way to get that
# working is to use a saved json request (you can't load a curl request) or to
# pass in params via cli args. Without that stuff it's way worse than just
# using vim-rest-console. I also looked around for other cli http clients and
# so far no other cool ncurses clients like joplin for notes. Will keep an eye
# out for anything better or to see if wuzz gets better.
# }}}

# helper functions {{{
function _log_info() { echo -e "$(tput setaf 2)$(tput rev)$(tput bold) \xE2\x9C\x93 $1 $(tput sgr0)"; "${@:2}"; }
function _log_error() { echo -e "$(tput setaf 1)$(tput rev)$(tput bold) \xE2\x9C\x97 $1 $(tput sgr0)"; "${@:2}"; }
function _log_notice() { echo -e "$(tput setaf 3)$(tput rev)$(tput bold) \xE2\x9A\xa0 $1 $(tput sgr0)"; "${@:2}"; }
function _has() { type "$1" &>/dev/null; }
# }}}

# create dirs {{{
_create_dirs () {
    _log_info "Creating any missing home directories"
    [[ -d "$HOME/Code" ]] || mkdir "$HOME/Code"
}
# }}}

# clone repos {{{

# _log_info "Cloning repos"
# mkdir -p "$HOME/Code"
# builtin cd "$HOME/Code"
# [[ -d "$HOME/Code/mikedfunk.github.io" ]] || git clone git@github.com:mikedfunk/mikedfunk.github.io.git
# builtin cd -

# saatchi repos {{{
# mkdir -p "$HOME/Code/saatchi"
# builtin cd "$HOME/Code/saatchi"
# [[ -d "$HOME/Code/saatchi/api" ]] || git clone git@github.com:saatchiart/api.git
# [[ -d "$HOME/Code/saatchi/catalog" ]] || git clone git@github.com:saatchiart/catalog.git
# [[ -d "$HOME/Code/saatchi/couchbase-views" ]] || git clone git@github.com:saatchiart/couchbase-views.git
# [[ -d "$HOME/Code/saatchi/easel" ]] || git clone git@github.com:saatchiart/easel.git
# [[ -d "$HOME/Code/saatchi/gallery" ]] || git clone git@github.com:saatchiart/gallery.git
# [[ -d "$HOME/Code/saatchi/gitlab-puppet" ]] || git clone ab.dmdmedia.net:mike.funk/saatchi.git
# [[ -d "$HOME/Code/saatchi/imgproc" ]] || git clone git@github.com:saatchiart/imgproc.git
# [[ -d "$HOME/Code/saatchi/imgproc-python" ]] || git clone git@gitlab.dmdmedia.net:saatchiart/imgproc.git imgproc-python
# [[ -d "$HOME/Code/saatchi/maropost-php-sdk" ]] || git clone git@github.com:saatchiart/maropost-php-sdk.git
# [[ -d "$HOME/Code/saatchi/affirm-php-sdk" ]] || git clone git@github.com:saatchiart/affirm-php-sdk.git
# [[ -d "$HOME/Code/saatchi/palette" ]] || git clone git@github.com:saatchiart/palette.git
# [[ -d "$HOME/Code/saatchi/potato" ]] || git clone git@github.com:saatchiart/potato.git
# [[ -d "$HOME/Code/saatchi/legacy" ]] || git clone git@github.com:saatchiart/saatchiart.git legacy
# [[ -d "$HOME/Code/saatchi/xdocker" ]] || git clone git@github.com:saatchiart/xdocker.git
# [[ -d "$HOME/Code/saatchi/zed" ]] || git clone git@github.com:saatchiart/yzed.git zed
# [[ -d "$HOME/Code/saatchi/xgateway" ]] || git clone git@github.com:saatchiart/xgateway.git
# [[ -d "$HOME/Code/saatchi/gitlab-puppet" ]] || git clone git@gitlab.dmdmedia.net:mike.funk/saatchi.git gitlab-puppet
# [[ -d "$HOME/Code/saatchi/saatchi-kubernetes" ]] || git clone git@gitlab.dmdmedia.net:sre/saatchi-shared-libs.git saatchi-kubernetes
# builtin cd -
# }}}

# }}}

# decrypt yadm files {{{
# _log_info "Decrypting yadm files"
# yadm decrypt
#
# This is commented out because it requires the GPG password each time. Yadm
# asynmetric encryption still requires a password on _decrypt_.
#
# TODO: This is also a chicken/egg scenario. Some encrypted files get symlinked
# into ~/Code/* directories, but those directories do not yet exist on a new
# install. But in order to clone those repos, I need my ssh keys, which are in
# my encrypted files too! If I decrypt _then_ clone, I'll get an error because
# the directories already exist. If I clone _then_ decrypt, I won't be able to
# clone yet.
#
# One workaround for this is to just clone the https urls for them,
# allowing me to authenticate via https basic auth. Downside: now the remotes
# on everything are set to the https version. I'll need to change to the ssh
# versions to let them use public key authorization. Hmmm...
#
# Another way would be if I was able to decrypt just my ssh keys separately.
# Maybe I can use a different encryption setup outside of yadm for those?
# Downside: now I have to deal with two methods of encryption. :(
#
# Another approach would be to decrypt, check to see if the repos have been
# cloned, if not delete the repo directories and their contents, clone, then
# decrypt again. Slight downside - I have to decrypt twice, requiring two
# password entries. But really this should only happen once - when the code has
# not been cloned. This seems like the right approach.
#
# TODO add .git/config/exclude for each codebase to yadm
# }}}

# install xcode command line tools {{{
# needed for a variety of things including phpenv (zlib), CommandLineTools below, sshpass
_install_xcode_command_line_tools () {
    _log_info "Installing xcode command line tools"
    xcode-select --install || true
    # /System/Library/CoreServices/Install Command Line Developer Tools.app
}
# }}}

# install necessary headers in /include on mojave {{{
# fyi the CommandLineTools directory doesn't even exist until you run `xcode-select --install`
# https://github.com/pyenv/pyenv/issues/1219#issuecomment-428700763
# TODO catalina https://apple.stackexchange.com/questions/373316/missing-headers-in-macos-10-15-catalina
_install_necessary_headers_in_include_on_mojave () {
    if ! [ -f /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg ] || [ -f "$HOME"/.mojave-lock ]; then
        return
    fi
    _log_info "Installing additional tools needed for mojave"
    sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target / && touch "$HOME"/.mojave-lock
}
# }}}

# install homebrew if it's missing {{{
_install_homebrew_if_its_missing () {
    _has brew && return
    _log_info "Installing homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}
# }}}

# install/update homebrew packages {{{
_install_update_homebrew_packages () {
    [ -e "$HOME"/.Brewfile ] || return
    _log_info "Installing/upgrading homebrew packages"
    brew update # update homebrew itself and the list of brew package versions
    brew bundle --global # install/upgrade from ~/.Brewfile
    brew upgrade         # upgrade all homebrew packages
    brew upgrade --cask  # upgrade all homebrew casks
    # brew cleanup         # remove outdated versions and dead symlinks from the homebrew prefix. WARNING this could break dependencies if low level libs are not pinned!!
    # brew bundle --global cleanup --force # remove brew packages not in ~/.Brewfile
    brew link libcouchbase@2 --force
    _pin_homebrew_packages
}

# }}}

# pin homebrew packages {{{
# I no longer do this - instead I avoid `brew cleanup` and hope I don't run out of storage :/
# I unpinned everything and icu4c broke for some reason. I'll add anything to this list that actually breaks.
_pin_homebrew_packages () {
    _log_info "Pinning brew packages that need pinning"
    # brew pin bison
    # brew pin bzip2
    # brew pin cmake
    # brew pin curl
    brew pin icu4c
    # brew pin imagemagick
    # brew pin libcouchbase
    # brew pin "libcouchbase@2"
    # brew pin libedit
    # brew pin libiconv
    # brew pin libmcrypt
    # brew pin libmemcached
    # brew pin openssl
    # brew pin pkg-config
    # brew pin re2c
    # brew pin readline
    # brew pin xz
    # brew pin zlib
}
# }}}

# install/upgrade psysh {{{
# docs say it's installable via phive but it's not currently
# https://github.com/bobthecow/psysh/issues/489
_install_upgrade_psysh () {
    _log_info "installing/upgrading psysh (php repl)"
    builtin cd || return
    wget https://psysh.org/psysh
    chmod +x psysh
    mv psysh /usr/local/bin/psysh
    builtin cd - || return
}
# }}}

# install phpdcd {{{
_install_phpdcd () {
    _has phpdcd && return
    _log_info "installing phpdcd"
    wget -O /usr/local/bin/phpdcd https://phar.phpunit.de/phpdcd.phar
    chmod +x /usr/local/bin/phpdcd
}
# }}}

# akamai {{{
_install_upgrade_akamai () {
    _has akamai && return
    _log_info "Updating akamai commands"
    ( akamai list | grep --quiet purge ) || akamai install purge
    akamai update
}
# }}}

# install/upgrade yarn packages {{{
_install_upgrade_yarn_packages () {
    _log_info "Installing/upgrading yarn packages"
    builtin cd || return
    yarn global upgrade
    builtin cd - || return
}
# }}}

# set zsh as shell {{{
_set_zsh_as_shell () {
    if [[ $(grep "/usr/local/bin/zsh" /etc/shells -c) == 0 ]]; then
        _log_info "Installing homebrew zsh to /etc/shells"
        sudo /bin/sh -c "echo /usr/local/bin/zsh >> /etc/shells"
    fi
    if [[ "$SHELL" != "/usr/local/bin/zsh" ]]; then
        _log_info "Changing shell to homebrew zsh"
        chsh -s "$(which zsh)"
    fi
}
# }}}

# install tmux plugin manager {{{
_install_tmux_plugin_manager () {
    [[ -d "$HOME"/.tmux/plugins/tpm ]] && return
    _log_info "Installing tmux plugin manager. Upgrade packages with \`<c-a>U\`."
    git clone https://github.com/tmux-plugins/tpm "$HOME"/.tmux/plugins/tpm
}
# }}}

# install neovim package manager {{{
_install_neovim_packer () {
    local PACKER_DIR="$HOME"/.local/share/nvim/site/pack/packer/opt/packer.nvim
    [[ -d "$PACKER_DIR" ]] && return
    _log_info "Installing neovim packer (package manager)"
    git clone https://github.com/wbthomason/packer.nvim "$PACKER_DIR"
}
# }}}

# install/update tmux plugins {{{
_install_upgrade_tmux_plugins () {
    _log_info "Install/upgrade tmux plugins"
    "$HOME"/.tmux/plugins/tpm/bin/install_plugins
    "$HOME"/.tmux/plugins/tpm/bin/update_plugins all
}
# }}}

# Vim {{{

# Directories {{{
_create_vim_directories () {
    if [[ ! -d "$HOME"/.vim/autoload ]]; then
        _log_info "Creating required vim autoload directory"
        mkdir -p "$HOME"/.vim/autoload && chmod +w "$HOME"/.vim/autoload
    fi
    if [[ ! -d "$HOME"/.vim/files/info ]]; then
        _log_info "Creating required vim info directory"
        mkdir -p "$HOME"/.vim/files/info && chmod a+w "$HOME"/.vim/files/info
    fi
}
# }}}

# install vim-plug {{{
_install_vim_plug () {
    [ -f "$HOME"/.vim/autoload/plug.vim ] && return
    _log_info "Installing vim-plug"
    curl -fLo \
        ~/.vim/autoload/plug.vim \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}
# }}}

# install/upgrade vim plugins {{{
_install_upgrade_vim_plugins () {
    _log_info "Installing/upgrading vim plugins"
    # vim +PackerInstall +PackerUpdate +PackerClean +qall
    nvim \
        # +PackerInstall \
        # +PackerUpdate \
        # no option yet for non-interactive :/
        # +PackerClean \
        "+LspInstall intelephense" \
        "+LspInstall sumneko_lua" \
        "+LspInstall diagnosticls" \
        +qall

    # treesitter language parsers
    # "+TSInstall php" \
    # "+TSInstall javascript" \
    # +TSUpdate \

    # coc.nvim extension updates
    #     +"CocInstall coc-phpls" \
    #     +CocUpdate \
}
# }}}

# }}}

# update asdf plugins {{{
_update_asdf_plugins () {
    _log_info "Updating asdf plugins"
    asdf plugin update --all
}
# }}}

# install php versions {{{
# not working at the moment despite a ton of research:
# https://github.com/Homebrew/homebrew-core/pull/61820
# https://bugs.php.net/bug.php?id=80171
#
# Undefined symbols for architecture x86_64:
#   "_php_readdir_r", referenced from:
#       _ps_gc_files in mod_files.o
#       _php_plain_files_dirstream_read in plain_wrapper.o
# Undefined symbols for architecture x86_64:
#   "_php_readdir_r", referenced from:
# Undefined symbols for architecture x86_64:
#   "_php_readdir_r", referenced from:
#       _ps_gc_files in mod_files.o
#       _php_plain_files_dirstream_read in plain_wrapper.o
#       _ps_gc_files in mod_files.o
#       _php_plain_files_dirstream_read in plain_wrapper.o
# Undefined symbols for architecture x86_64:
#   "_php_readdir_r", referenced from:
#       _ps_gc_files in mod_files.o
#       _php_plain_files_dirstream_read in plain_wrapper.o
#
_install_php_70 () {
    ( asdf list php | grep --quiet 7.0.33 ) && return
    _log_info "installing php 7.0.33"
    asdf install php 7.0.33
    asdf global php 7.0.33 || return
    local PHP_PATH
    PHP_PATH="$(asdf where php)"

    # install php extensions (different set for 7.0.33)
    mkdir -p "${PHP_PATH}"/conf.d

    local PICKLE="${PHP_PATH}"/pickle.phar
    wget -O "${PICKLE}" https://github.com/FriendsOfPHP/pickle/releases/latest/download/pickle.phar
    chmod +x "${PICKLE}"

    # NOTE: pcs is a sub requirement of couchbase
    yes "" | "${PICKLE}" install pcs && ( echo 'extension="phpcs.so"' >"${PHP_PATH}"/conf.d/01_pcs.ini )
    # NOTE: this requires `brew install couchbase@2`
    yes "" | "${PICKLE}" install couchbase@2.2.4 && ( echo 'extension="couchbase.so"' >"${PHP_PATH}"/conf.d/02_couchbase.ini )
    yes "" | "${PICKLE}" install memcached && ( echo 'extension="memcached.so"' >"${PHP_PATH}"/conf.d/03_memcached.ini )
    yes "" | "${PICKLE}" install imagick && ( echo 'extension="imagick.so"' >"${PHP_PATH}"/conf.d/04_imagick.ini )
    # xdebug master is now php 7.1+ :(
    yes "" | "${PICKLE}" install xdebug@2.8.1 && ( echo 'zend_extension="xdebug.so"' >"${PHP_PATH}"/conf.d/05_xdebug.ini )
    # NOTE: I have 05_memory_limit.ini already there in my yadm files

    # install composer global packages
    mkdir -p  "${PHP_PATH}"/{.,}composer
    ln -sf "$HOME"/.composer/composer.json "${PHP_PATH}"/.composer/composer.json
    _install_update_composer_packages
    asdf reshim php 7.0.33
}

_install_php_71 () {
    # clang: error: no such file or directory: '/var/folders/3p/m5qcn0zj1x575j3fxyk7d0d80000gp/T/php-src-php-7.1.33/Zend/zend_ini_parser.c'
    # Zend/zend_ini_scanner.l:29:10: fatal error: 'zend_ini_parser.h' file not found

    ( asdf list php | grep --quiet 7.1.33 ) && return
    _log_info "installing php 7.1.33"
    asdf install php 7.1.33
    asdf global php 7.1.33 || return
    local PHP_PATH
    PHP_PATH="$(asdf where php)"

    # install php extensions (different set for 7.1.33)
    mkdir -p "${PHP_PATH}"/conf.d

    local PICKLE="${PHP_PATH}"/pickle.phar
    wget -O "${PICKLE}" https://github.com/FriendsOfPHP/pickle/releases/latest/download/pickle.phar
    chmod +x "${PICKLE}"

    # NOTE: pcs is a sub requirement of couchbase
    yes "" | "${PICKLE}" install pcs && ( echo 'extension="phpcs.so"' >"${PHP_PATH}"/conf.d/01_pcs.ini )
    # NOTE: this requires `brew install couchbase@2`
    yes "" | "${PICKLE}" install couchbase@2.2.4 && ( echo 'extension="couchbase.so"' >"${PHP_PATH}"/conf.d/02_couchbase.ini )
    yes "" | "${PICKLE}" install memcached && ( echo 'extension="memcached.so"' >"${PHP_PATH}"/conf.d/03_memcached.ini )
    yes "" | "${PICKLE}" install imagick && ( echo 'extension="imagick.so"' >"${PHP_PATH}"/conf.d/04_imagick.ini )
    # xdebug master is now php 7.1+ :(
    yes "" | "${PICKLE}" install xdebug@2.8.1 && ( echo 'zend_extension="xdebug.so"' >"${PHP_PATH}"/conf.d/05_xdebug.ini )
    # NOTE: I have 05_memory_limit.ini already there in my yadm files

    # install composer global packages
    mkdir -p  "${PHP_PATH}"/{.,}composer
    ln -sf "$HOME"/.composer/composer.json "${PHP_PATH}"/.composer/composer.json
    _install_update_composer_packages
    asdf reshim php 7.1.33
}

_install_php_72 () {
    # clang: error: no such file or directory: '/var/folders/3p/m5qcn0zj1x575j3fxyk7d0d80000gp/T/php-src-php-7.2.34/Zend/zend_ini_parser.c'
    # clang: error: no input files
    # make: *** [Zend/zend_ini_parser.lo] Error 1
    # make: *** Waiting for unfinished jobs....
    # Zend/zend_ini_scanner.l:29:10: fatal error: 'zend_ini_parser.h' file not found
    #include <zend_ini_parser.h>

    ( asdf list php | grep --quiet 7.2.34 ) && return
    _log_info "installing php 7.2.34"
    asdf install php 7.2.34
    asdf global php 7.2.34 || return
    local PHP_PATH
    PHP_PATH="$(asdf where php)"

    # install php extensions (different set for 7.2.34)
    mkdir -p "${PHP_PATH}"/conf.d
    local PICKLE="${PHP_PATH}"/pickle.phar
    wget -O "${PICKLE}" https://github.com/FriendsOfPHP/pickle/releases/latest/download/pickle.phar
    chmod +x "${PICKLE}"

    # NOTE: pcs is a sub requirement of couchbase
    yes "" | "${PICKLE}" install pcs && ( echo 'extension="phpcs.so"' >"${PHP_PATH}"/conf.d/01_pcs.ini )
    # NOTE: this requires `brew install couchbase@2`
    yes "" | "${PICKLE}" install couchbase@2.2.4 && ( echo 'extension="couchbase.so"' >"${PHP_PATH}"/conf.d/02_couchbase.ini )
    yes "" | "${PICKLE}" install memcached && ( echo 'extension="memcached.so"' >"${PHP_PATH}"/conf.d/03_memcached.ini )
    yes "" | "${PICKLE}" install imagick && ( echo 'extension="imagick.so"' >"${PHP_PATH}"/conf.d/04_imagick.ini )
    # xdebug master is now php 7.1+ :(
    yes "" | "${PICKLE}" install xdebug@2.8.1 && ( echo 'zend_extension="xdebug.so"' >"${PHP_PATH}"/conf.d/05_xdebug.ini )
    # NOTE: I have 05_memory_limit.ini already there in my yadm files

    # install composer global packages
    mkdir -p  "${PHP_PATH}"/{.,}composer
    ln -sf "$HOME"/.composer/composer.json "${PHP_PATH}"/.composer/composer.json
    _install_update_composer_packages
    asdf reshim php 7.2.34
}

_install_pear () {
    _log_info "Installing pear"
    local PHP_VERSION="$1"
    wget -O "$HOME"/.bin/go-pear.phar http://pear.php.net/go-pear.phar
    PHP_VERSION="${PHP_VERSION}" "$HOME"/.support/install-pear.sh # installs pear non-interactively
    rm "$HOME"/.bin/go-pear.phar
}

_install_php_74 () {
    ( asdf list php | grep --quiet 7.4.7 ) && return
    _log_info "installing php 7.4.7"
    asdf install php 7.4.7
    asdf global php 7.4.7 || return

    # install php extensions (different set for 7.4.7)
    local PHP_PATH
    PHP_PATH="$(asdf where php)"
    mkdir -p "${PHP_PATH}"/conf.d

    local PICKLE="${PHP_PATH}"/pickle.phar
    wget -O "${PICKLE}" https://github.com/FriendsOfPHP/pickle/releases/latest/download/pickle.phar
    chmod +x "${PICKLE}"

    yes "" | "${PICKLE}" install pcs-beta && ( echo 'extension="pcs.so"' >"${PHP_PATH}"/conf.d/01_pcs.ini )
    yes "" | "${PICKLE}" install couchbase@2.2.4 && ( echo 'extension="couchbase.so"' >"${PHP_PATH}"/conf.d/02_couchbase.ini )
    yes "" | "${PICKLE}" install memcached && ( echo 'extension="memcached.so"' >"${PHP_PATH}"/conf.d/03_memcached.ini )
    yes "" | "${PICKLE}" install imagick && ( echo 'extension="imagick.so"' >"${PHP_PATH}"/conf.d/04_imagick.ini )
    yes "" | "${PICKLE}" install xdebug && ( echo 'zend_extension="xdebug.so"' >"${PHP_PATH}"/conf.d/05_xdebug.ini )
    echo 'phar.readonly = false' > "${PHP_PATH}"/conf.d/05_phar.ini

    # install global composer packages
    mkdir -p  "${PHP_PATH}"/{.,}composer
    ln -sf "$HOME"/.composer/composer.json "${PHP_PATH}"/composer/composer.json
    _install_update_composer_packages
    asdf reshim php 7.4.7
}

_install_php_80 () {
    ( asdf list php | grep --quiet "8.0.0" ) && return
    _log_info "installing php 8.0.0"
    asdf install php 8.0.0
    asdf global php 8.0.0 || return

    # install php extensions (different set for 8.0.0)
    local PHP_PATH="$(asdf where php)"
    mkdir -p "${PHP_PATH}"/conf.d

    # _has pecl || _install_pear "8.0.0"
    local PICKLE="${PHP_PATH}"/pickle.phar
    wget -O "${PICKLE}" https://github.com/FriendsOfPHP/pickle/releases/latest/download/pickle.phar
    chmod +x "${PICKLE}"

    # yes "" | "${PICKLE}" install couchbase && ( echo 'extension="couchbase.so"' >"${PHP_PATH}"/conf.d/01_couchbase.ini )
    # yes "" | "${PICKLE}" install memcached && ( echo 'extension="memcached.so"' >"${PHP_PATH}"/conf.d/02_memcached.ini )
    # yes "" | "${PICKLE}" install imagick && ( echo 'extension="imagick.so"' >"${PHP_PATH}"/conf.d/03_imagick.ini )
    yes "" | "${PICKLE}" install xdebug && ( echo 'zend_extension="xdebug.so"' >"${PHP_PATH}"/conf.d/04_xdebug.ini )
    echo 'phar.readonly = false' > "${PHP_PATH}"/conf.d/05_phar.ini

    # install global composer packages
    mkdir -p  "${PHP_PATH}"/{.,}composer
    ln -sf "$HOME"/.composer/composer.json "${PHP_PATH}"/composer/composer.json
    _install_update_composer_packages
    asdf reshim php "8.0.0"
}

# https://github.com/asdf-community/asdf-php/blob/master/.github/workflows/workflow.yml#L33-L52
_install_php_versions () {
    pushd .
    builtin cd "$HOME" >/dev/null || return
    _log_info "Installing php version(s)"
    asdf plugin add php
    local INSTALL_PATH="$HOME"/.asdf/plugins/php/bin/install
    # intl fails to install in php 7.0 due to an incompatibility with icu4c latest
    [ -f "$INSTALL_PATH" ] && ( sed -i '' "/--enable-intl/d" "$INSTALL_PATH" )
    # gd fails to install in php 8.0
    [ -f "$INSTALL_PATH" ] && ( sed -i '' "/--enable-gd/d" "$INSTALL_PATH" )

    # configure flags and paths for homebrew tools (I probably don't need to configure all of these) {{{

    # configure bison {{{
    export PATH="$(brew --prefix bison)/bin:${PATH}"
    # For compilers to find bison you may need to set:
    export LDFLAGS="-L$(brew --prefix bison)/lib ${LDFLAGS}"
    # }}}

    # configure bzip2 {{{
    export PATH="$(brew --prefix bzip2)/bin:${PATH}"
    export LDFLAGS="-L$(brew --prefix bzip2)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix bzip2)/include ${CPPFLAGS}"
    # }}}

    # configure curl {{{
    export PATH="$(brew --prefix curl)/bin:${PATH}"
    export LDFLAGS="-L$(brew --prefix curl)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix curl)/include ${CPPFLAGS}"
    export PKG_CONFIG_PATH="$(brew --prefix curl)/lib/pkgconfig:${PKG_CONFIG_PATH}"
    # }}}

    # configure freetype {{{
    export PKG_CONFIG_PATH="-I$(brew --prefix freetype)/pkgconfig:${PKG_CONFIG_PATH}"
    # }}}

    # configure gettext {{{
    export PATH="$(brew --prefix gettext)/bin:${PATH}"
    export LDFLAGS="-L$(brew --prefix gettext)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix gettext)/include ${CPPFLAGS}"
    # }}}

    # configure icu4c {{{
    # If you need to have icu4c first in your PATH run:
    export PATH="$(brew --prefix icu4c)/bin:${PATH}"
    export PATH="$(brew --prefix icu4c)/sbin:${PATH}"
    # For compilers to find icu4c you may need to set:
    export LDFLAGS="-L$(brew --prefix icu4c)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix icu4c)/include ${CPPFLAGS}"
    # For pkg-config to find icu4c you may need to set:
    export PKG_CONFIG_PATH="$(brew --prefix icu4c)/lib/pkgconfig:${PKG_CONFIG_PATH}"
    # export LDFLAGS=$(echo "${LDFLAGS}" | sed 's/-L\/lib //g')
    # export CFLAGS=$(echo "${CFLAGS}" | sed 's/-L\/lib //g')
    # }}}

    # configure krb5 {{{
    export PATH="$(brew --prefix krb5)/bin:${PATH}"
    export PATH="$(brew --prefix krb5)/sbin:${PATH}"
    export LDFLAGS="-L$(brew --prefix krb5)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix krb5)/include ${CPPFLAGS}"
    export PKG_CONFIG_PATH="$(brew --prefix krb5)/lib/pkgconfig:${PKG_CONFIG_PATH}"
    # }}}

    # configure libiconv {{{
    export PATH="$(brew --prefix libiconv)/bin:${PATH}"
    export LDFLAGS="-L$(brew --prefix libiconv)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix libiconv)/include ${CPPFLAGS}"
    # }}}

    # configure libedit {{{
    export LDFLAGS="-L$(brew --prefix libedit)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix libedit)/include ${CPPFLAGS}"
    export PKG_CONFIG_PATH="$(brew --prefix libedit)/lib/pkgconfig:${PKG_CONFIG_PATH}"
    # }}}

    # configure libjpeg {{{
    export PATH="$(brew --prefix libjpeg)/bin:${PATH}"
    export LDFLAGS="-L$(brew --prefix libjpeg)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix libjpeg)/include ${CPPFLAGS}"
    export PKG_CONFIG_PATH="$(brew --prefix libjpeg)/lib/pkgconfig:${PKG_CONFIG_PATH}"
    # }}}

    # configure libmcrypt {{{
    export PATH="$(brew --prefix libmcrypt)/bin:${PATH}"
    export LDFLAGS="-L$(brew --prefix libmcrypt)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix libmcrypt)/include ${CPPFLAGS}"
    # }}}

    # configure libpng {{{
    export PATH="$(brew --prefix libpng)/bin:${PATH}"
    export LDFLAGS="-L$(brew --prefix libpng)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix libpng)/include ${CPPFLAGS}"
    export PKG_CONFIG_PATH="$(brew --prefix libpng)/lib/pkgconfig:${PKG_CONFIG_PATH}"
    # }}}

    # configure libxml2 {{{
    export PATH="$(brew --prefix libxml2)/bin:${PATH}"
    export LDFLAGS="-L$(brew --prefix libxml2)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix libxml2)/include ${CPPFLAGS}"
    export PKG_CONFIG_PATH="$(brew --prefix libxml2)/lib/pkgconfig:${PKG_CONFIG_PATH}"
    # }}}

    # configure libzip {{{
    export PATH="$(brew --prefix libzip)/bin:${PATH}"
    export LDFLAGS="-L$(brew --prefix libzip)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix libzip)/include ${CPPFLAGS}"
    export PKG_CONFIG_PATH="$(brew --prefix libzip)/lib/pkgconfig:${PKG_CONFIG_PATH}"
    # }}}

    # configure openssl {{{
    export PATH="$(brew --prefix openssl)/bin:${PATH}"
    # For compilers to find openssl@1.1 you may need to set:
    export LDFLAGS="-L$(brew --prefix openssl)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix openssl)/include ${CPPFLAGS}"
    # For pkg-config to find openssl@1.1 you may need to set:
    export PKG_CONFIG_PATH="$(brew --prefix openssl)/lib/pkgconfig:${PKG_CONFIG_PATH}"
    # }}}

    # configure zlib {{{
    export LDFLAGS="-L$(brew --prefix zlib)/lib ${LDFLAGS}"
    export CPPFLAGS="-I$(brew --prefix zlib)/include ${CPPFLAGS}"
    export PKG_CONFIG_PATH="$(brew --prefix zlib)/lib/pkgconfig:${PKG_CONFIG_PATH}"
    # }}}

    # }}}

    # change implicit function declaration to warning instead of error
    # https://bugs.php.net/bug.php?id=80171
    export CFLAGS="-Wno-error=implicit-function-declaration ${CFLAGS}"
    # export CFLAGS="-Wno-error ${CFLAGS}"

    # _install_php_70 # not working at the moment due to readdir_r
    # _install_php_71 # not working at the moment due to missing zend class
    # _install_php_72 # not working at the moment due to missing zend header
    _install_php_74 # *works* because whatever feature used readdir_r was removed
    _install_php_80
    # asdf global php 7.4.7
    asdf global php 8.0.0 # I want to believe

    popd || return
}
# }}}

# install node version(s) {{{
_install_node_versions () {
    builtin cd >/dev/null || return
    _log_info "Installing node version(s)"
    asdf plugin add nodejs
    # https://github.com/asdf-vm/asdf-nodejs/issues/40#issuecomment-297053730
    bash "$HOME"/.asdf/plugins/nodejs/bin/import-release-team-keyring
    # legacy, gallery:
    ( asdf list nodejs | grep --quiet 9.11.2 ) || asdf install nodejs 9.11.2
    # global:
    ( asdf list nodejs | grep --quiet 14.4.0 ) || asdf install nodejs 14.4.0
    # easel (new, formerly 10.11.0):
    ( asdf list nodejs | grep --quiet 15.4.0 ) || asdf install nodejs 15.4.0
    asdf global nodejs 14.4.0
    builtin cd - >/dev/null || return
}
# }}}

# install python version(s) {{{
_install_python_versions () {
    builtin cd >/dev/null || return
    _log_info "Installing python version(s)"
    asdf plugin add python
    ( asdf list python | grep --quiet 3.8.3 ) || asdf install python 3.8.3
    asdf global python 3.8.3
    builtin cd - >/dev/null || return
}
# }}}

# install ruby version(s) {{{
_install_ruby_versions () {
    builtin cd "$HOME" >/dev/null || return
    _log_info "Installing ruby version(s)"
    asdf plugin add ruby
    ( asdf list ruby | grep --quiet 2.7.1 ) || asdf install ruby 2.7.1
    asdf global ruby 2.7.1
    builtin cd - >/dev/null || return
}
# }}}

# install phive {{{
# NOTE: phive requires php 7.2+
_install_upgrade_phive () {
    if _has phive; then
        _log_info "Updating phive"
        phive selfupdate
    else
        _log_info "Installing phive"
        cd || return
        wget -O phive.phar "https://phar.io/releases/phive.phar"
        wget -O phive.phar.asc "https://phar.io/releases/phive.phar.asc"
        gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0x9D8A98B29B2D5D79
        gpg --verify phive.phar.asc phive.phar
        rm phive.phar.asc
        chmod +x phive.phar
        mv phive.phar /usr/local/bin/phive
        cd - || return
    fi
}
# }}}

# install/upgrade phive packages {{{
_install_upgrade_phive_packages () {
    _log_info "Installing/upgrading phive packages"
    # manifest is in ~/.phive/global.xml
    phive install --global
    phive update-repository-list --global
    phive update --global
}
# }}}

# install/update ruby gems {{{
# Installs from ~/Gemfile
_install_update_ruby_gems () {
    _log_info "Installing/upgrading ruby gems"
    gem install bundler
    builtin cd || return
    bundle config set system true
    bundle install
    bundle update
    bundle clean --force
    builtin cd - || return
    bundle config set system false
}
# }}}

# update python3 pip packages {{{

# update all pip packages
_pip-update () {
    pip3 list --outdated | \
        grep --invert-match 'Package' | \
        grep --invert-match --regexp='\-\{5\}' | \
        awk '{print $1}' | \
        xargs -n1 pip3 install --upgrade
}
_update_python3_pip_packages () {
    _log_info "Installing/upgrading pip3 packages"
    # pip3 install neovim --user # neovim uses this pip/python version
    pip install --upgrade pip
    PIP_SUCCESSFUL=1
    pip3 install -r "$HOME"/requirements.txt --user || PIP_SUCCESSFUL=0
    # pip-review broke recently:
    # zsh: /usr/local/bin/pip-review: bad interpreter: /usr/local/opt/python/bin/python3.6: no such file or directory
    # pip-review --local --auto &&
    # 	pip3 freeze >"$HOME/requirements.txt"
    # pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip3 install -U
    _pip-update || PIP_SUCCESSFUL=0
    # this is ok but it adds a ton of shit to my requirements when really the
    # only thing I require are... my requirements :/ . This adds requirements
    # of my requirements, which I don't want. It also led to a catch-22
    # requirements.txt where there were conflicting requirements.
    # [[ $PIP_SUCCESSFUL ]] && pip3 freeze >"$HOME"/requirements.txt
}
# }}}

# install/update composer and packages {{{
_install_update_composer_packages () {
    builtin cd "$HOME"/.composer >/dev/null || return
    _log_info "Installing/upgrading composer packages"
    composer selfupdate
    composer global install
    composer global update
    builtin cd - || return
}
# }}}

# install nextdns service {{{
_install_activate_nextdns () {
    _log_info "Installing nextdns service and activating it"
    sudo nextdns install --config "${NEXTDNS_CONFIG}"
    sudo nextdns activate
}
# }}}

# immersed vr {{{
# TODO https://immersedvr.com/dl/Immersed.dmg
# }}}

# install cod {{{
# completion generator via --help https://github.com/dim-an/cod
_install_cod () {
    _has cod && return
    _log_info "Installing cod"
    builtin cd || return
    wget https://github.com/dim-an/cod/releases/download/v0.0.0/cod-Darwin.tgz
    tar xzvf cod-Darwin.tgz
    mv cod-Darwin/cod /usr/local/bin/
    chmod +x /usr/local/bin/cod
    rm -rf cod-Darwin
    builtin cd - || return
}
# }}}

# antibody {{{
_update_antibody_plugins () {
    _log_info "Updating antibody plugins"
    # source <(antibody init)
    antibody update # update all packages
}
# }}}

# apply hosts file {{{
_apply_hosts_file () {
    _log_info "Syncing hosts file"
    hostess apply "$HOME/.support/hosts.json"
}
# }}}

# let iterm see italics {{{
_let_iterm_see_italics () {
    _log_info "Enabling italic terminal"
    mkdir -p "$HOME/.terminfo/78"
    tic -o "$HOME/.terminfo/78/" "$HOME/.support/screen-256color.terminfo.txt"
    tic -x "$HOME/.support/tmux-256color.terminfo.txt"
}
# }}}

# Mac preferences {{{
# https://www.reddit.com/r/MacOS/comments/9ijy88/font_antialiasing_on_mojave/?utm_content=title&utm_medium=front&utm_source=reddit&utm_name=MacOS
_apply_mac_preferences () {
    defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO

    # TODO write a function to abstract the repetition here
    _log_info "Setting general mac preferences"
    # Disable “natural” (Lion-style) scrolling
    defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false
    # dock on left side
    defaults write com.apple.dock orientation -string 'left'
    # mac dark mode
    defaults write NSGlobalDomain AppleInterfaceStyle -string 'Dark'
    # graphite color theme
    defaults write NSGlobalDomain AppleAquaColorVariant -int 6
    # disable dashboard
    defaults write com.apple.dashboard dashboard-enabled-state -int 1
    # Disable press-and-hold for keys in favor of key repeat
    # defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
    # Set a blazingly fast keyboard repeat rate
    # defaults write NSGlobalDomain KeyRepeat -int 1
    # defaults write NSGlobalDomain InitialKeyRepeat -int 10
    # Increase sound quality for Bluetooth headphones/headsets
    defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40
    # Require password immediately after sleep or screen saver begins
    defaults write com.apple.screensaver askForPassword -int 1
    defaults write com.apple.screensaver askForPasswordDelay -int 0
    # Use column view in all Finder windows by default
    # Four-letter codes for the other view modes: `icnv`, `Nlsv`, `Flwv`
    defaults write com.apple.finder FXPreferredViewStyle -string "clmv"
    # Show the ~/Library folder
    chflags nohidden ~/Library
    # Chrome - Disable the all too sensitive backswipe on Magic Mouse
    defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false
    defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false
    defaults write com.apple.screencapture location ~/Screenshots

    killall Dock
    killall Finder
    killall SystemUIServer

    # finder default location home
    defaults write com.apple.finder NewWindowTargetPath "file:/$HOME/"
    if [[ $(defaults read com.apple.dock orientation) != "left" ]]; then
        _log_info "Moving dock to left side"
        defaults write com.apple.dock orientation -string 'left'
        killall Dock
    fi
    if [[ $(defaults read NSGlobalDomain AppleInterfaceStyle) != "Dark" ]]; then
        _log_info "Mac dark mode"
        defaults write NSGlobalDomain AppleInterfaceStyle -string 'Dark'
        killall Dock
        killall SystemUIServer
    fi
    if [[ $(defaults read NSGlobalDomain AppleAquaColorVariant) != 6 ]]; then
        _log_info "Graphite color theme"
        defaults write NSGlobalDomain AppleAquaColorVariant -int 6
        killall Finder
    fi
    if [[ $(defaults read com.apple.dashboard dashboard-enabled-state) != 1 ]]; then
        _log_info "Disable dashboard"
        defaults write com.apple.dashboard dashboard-enabled-state -int 1
        killall Finder
    fi
}
# }}}

# launchctl jobs {{{
# debug launchd jobs https://stackoverflow.com/q/6337513/557215
# use this form to easily generate a launchd plist: http://launched.zerowidth.com/
_start_launch_agents () {
    _log_info "Starting launch agents"
    # let's use lunchy instead of launchctl! https://github.com/eddiezane/lunchy
    lunchy start --write mike.saatchi-tunnel.autossh
    lunchy start --write mike.saatchi-proxy.autossh
    # lunchy start --write mike.toaf-tunnel-prod.autossh
    # lunchy start --write mike.toaf-tunnel-qa.autossh
}
# }}}

# fix file size limit for watching with entr {{{
# http://entrproject.org/limits.html
_fix_file_size_limit_for_watching_with_entr () {
    [ -f /Library/LaunchDaemons/limit.maxfiles.plist ] && return
    _log_info "Installing max files limit fixer for watching with entr"
    builtin cd /Library/LaunchDaemons || return
    sudo curl -sO http://entrproject.org/etc/limit.maxfiles.plist
    builtin cd - || return
}
# }}}

# install/update nnn plugins {{{
_install_update_nnn_plugins () {
    _log_info "Installing/updating nnn plugins"
    rm -rf "$HOME"/.config/nnn/plugins
    curl -Ls https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs | sh
}
# }}}

# install/upgrade sshrc {{{
# for some reason this was removed from homebrew??
_install_upgrade_sshrc () {
    _log_info "Installing/upgrading sshrc"
    curl "https://raw.githubusercontent.com/JesusContributions/sshrc/master/sshrc" > /usr/local/bin/sshrc
    chmod +x /usr/local/bin/sshrc
}
# }}}

# fix yarn link {{{
# not sure why this happens
_fix_yarn_link () {
    _log_info "Fixing yarn link"
    brew unlink yarn && brew link yarn
}
# }}}

# fix delta syntax highlighting for php {{{
# https://github.com/dandavison/delta/issues/162#issuecomment-625952288
_fix_delta_syntax_highlighting_for_php () {
    _has bat && _log_info "fixing delta syntax highlighting for php" && bat cache --build
}
# }}}

# clear evalcache {{{
_clear_evalcache () {
    _log_info "Clearing evalcache"
    # This is what _evalcache_clear does
    rm -f "$ZSH_EVALCACHE_DIR"/init-*.sh
}
# }}}

# run functions {{{
# this way I can still source this file but comment out these function calls
# and run one or more independently. This is extremely useful!!
_create_dirs
_install_xcode_command_line_tools
_install_necessary_headers_in_include_on_mojave
_install_homebrew_if_its_missing
_install_update_homebrew_packages
_install_php_versions
_install_update_composer_packages
_install_node_versions
_install_upgrade_yarn_packages
_fix_yarn_link
_install_python_versions
_update_python3_pip_packages
_install_ruby_versions
_install_update_ruby_gems
_install_upgrade_akamai
_set_zsh_as_shell
_install_tmux_plugin_manager
_install_upgrade_tmux_plugins
_create_vim_directories
_install_vim_plug
_install_neovim_packer
# _install_upgrade_vim_plugins
_install_upgrade_phive
_install_upgrade_phive_packages
_install_upgrade_psysh
_install_phpdcd
_update_antibody_plugins
_apply_hosts_file
_let_iterm_see_italics
_apply_mac_preferences
_start_launch_agents
_fix_file_size_limit_for_watching_with_entr
# _install_activate_nextdns
_install_cod
_install_update_nnn_plugins
_install_upgrade_sshrc
_update_asdf_plugins
_fix_delta_syntax_highlighting_for_php
_clear_evalcache
_log_info "Installation complete"
# }}}
