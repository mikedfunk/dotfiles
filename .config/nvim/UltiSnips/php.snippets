extends html

global !p

import os
import re

def capitalizeRegexMatch(match: match) -> str:
    out = match.group(1).capitalize()
    out += match.group(2)

    return out

def getPathToNamespace(path: str) -> str:
    path = path.replace('\\', '/')

    parts = []

    for part in path.split('/'):
        if re.match('^[A-Z]', part):
            parts.append(part)
        else:
            parts = []
    parts.pop()

    return '\\'.join(parts)

def getNamespace(snip: dict, path: str, prepend: str = '') -> str:
    namespace = getPathToNamespace(path)

    if (prepend == '' and len(namespace) == 0):
        return ''

    if (prepend != '' and len(namespace) > 0):
        prepend += '\\'

    out = snip.mkline('namespace ' + prepend + namespace + ';')

    return os.linesep + out + os.linesep

endglobal

snippet itr "prophecy mock iterator functions"
$$1->rewind()->shouldBeCalled();
$returns = [true, false];
$$1->valid()->will(function () use (&$returns) {
    return array_shift($returns);
});
$$1->current()->willReturn($2);
$$1->next()->shouldBeCalled();
$$1->key()->willReturn(0);
endsnippet

snippet id "inherit doc"
/** {@inheritdoc} */
endsnippet

snippet rv "return void"
/** @return void */
endsnippet

snippet cgt "IoT container get"
$container->get($1);
endsnippet

snippet dst "declare strict types"
declare(strict_types=1);
endsnippet

snippet shp "php shape"
use const Shape\arr;
use const Shape\bool;
use const Shape\int;
use const Shape\string;
use function Shape\shape;
endsnippet

snippet al "require composer autoloader"
// get composer autoloader
require __DIR__ . '/vendor/autoload.php';
endsnippet

snippet di "dependency injection"

$1::class => function (ContainerInterface $container) {
    ${2:// }
    return new $1($3);
},
endsnippet

snippet gtr "php class getter" !b

public function get${1/\w+\s*/\u$0/}(): $2
{
    return $this->$1;
}
endsnippet

snippet gt "get"
$${1:this}->get${2:Foo}();
endsnippet

snippet st "set"
$${1:this}->set${2:Foo}($3);
endsnippet

snippet str "PHP Class Setter" !b

/**
 * @return self the current instance for chainability
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;

    return $this;
}
endsnippet

snippet sg "PHP Class Setter Getter" !b

/**
 * @return self the current instance for chainability
 */
public function set${1/\w+\s*/\u$0/}($2 $$1)
{
    $this->$1 = $$1;

    return $this;
}

public function get${1/\w+\s*/\u$0/}(): $2
{
    return $this->$1;
}
endsnippet

snippet ig "PHP Class Immutable With and Getter" !b

/**
 * Return a new instance with this property changed.
 *
 * @param ${2:mixed} $$1
 *
 * @return self a new instance of the current class for immutability.
 */
public function with${1/\w+\s*/\u$0/}($$1)
{
    $copy = clone $this;
    $copy->$1 = $$1;

    return $copy;
}

/**
 * Getter.
 *
 * @return $2
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;
}
endsnippet

snippet prt "print_r true"
print_r(${1}, true)${2}
endsnippet

snippet dpr "die print_r"
die(print_r(${1}));
endsnippet

snippet mti "phpunit incomplete test"
$this->markTestIncomplete();${1}
endsnippet

snippet csi "magical docblock to make phpcs shut up!"
@codingStandardsIgnoreFile
endsnippet

snippet mck
$$1Mock = Mockery::mock('${1/\w+\s*/\u$0/}');
$$1Mock->shouldReceive('$3')
    ->once()
    ->andReturn(${4:true});
endsnippet

# snippet tst
# $1
# `!p snip.rv = re.sub(r'^([a-z])(\w*)$', capitalizeRegexMatch, t[1])`
# endsnippet

# snippet cstr "DI construct"
# `!p snip.rv = "/** @var " + t[1].capitalize() + " */\n    private $" + t[1] + ";\n"`
# public function __construct(${1/\w+\s*/\u$0/} $${1:myClass})
# {
#     $this->$1 = $$1;
# }
# endsnippet

snippet cstr "DI construct"

public function __construct($1)
{
    ${2://TODO}
}
endsnippet

snippet dp "PHPUnit Data Provider function"

/**
 * $1DataProvider.
 *
 * @return array
 */
public function $1DataProvider()
{
    return [
        [
            $2
        ],
    ];
}
endsnippet

snippet php "opening php tag"
<?php
$1
endsnippet

snippet cla "mike's class with all the good stuff"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path)`$5
${1:final }class `!v expand("%:t:r")`$4
{
    $6
}
endsnippet

snippet pcla "palette class"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path, "Palette")`
${1:/** @see \\Palette`!p snip.rv = "\\" if getPathToNamespace(path) else ""``!p snip.rv = getPathToNamespace(path)`\\`!v expand("%:t:r")`Spec */
}${1:final }class `!v expand("%:t:r")`$4
{
    $6
}
endsnippet

snippet lsp "laravel service provider"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path)`
use Illuminate\Support\ServiceProvider;

class `!v expand("%:t:r")`$1 extends ServiceProvider
{
    /** {@inheritdoc} */
    public function register()
    {
        $2
    }
}
endsnippet

snippet preq "palette laravel validating request"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path, "Palette")`
use Palette\Http\Requests\ApiRequest;

final class `!v expand("%:t:r")` extends ApiRequest
{
    /** {@inheritdoc} */
    public function rules()
    {
        return [
            ${1:// TODO}
        ];
    }${2:

    /** {@inheritdoc} */
    public function messages()
    {
        return [
            // key/value pairs for validation type => message e.g.
            // 'first_name.required' => 'wtf dont leave this blank',
        ];
    }}

    /** {@inheritdoc} */
    public function authorize()
    {
        return true;
    }
}
endsnippet

snippet greq "gallery validating request"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path, "Palette")`
use Gallery\Http\Requests\ApiRequest;

final class `!v expand("%:t:r")` extends ApiRequest
{
    /** {@inheritdoc} */
    public function rules()
    {
        return [
            ${1:// TODO}
        ];
    }${2:

    /** {@inheritdoc} */
    public function messages()
    {
        return [
            // key/value pairs for validation type => message e.g.
            // 'first_name.required' => 'wtf dont leave this blank',
        ];
    }}

    /** {@inheritdoc} */
    public function authorize()
    {
        return true;
    }
}
endsnippet

snippet scr "saatchi process abstract script"
<?php

declare(strict_types=1);

require_once __DIR__ . '/../../vendor/autoload.php';

use Zend_Controller_Front as FrontController;

/**
 * ${1:Description}
 *
 * usage: php /data/code_base/current/`!v @%` {environment} {-v} {--dry-run}
 */
class ${2:MyScript} extends ProcessAbstract
{
    /** @var bool */
    private $isDryRun = true;

    public function __construct()
    {
        $this->_additionalOptionalFlags[] = ['flag' => 'dry-run', 'description' => 'If in dry run, don\'t actually do anything'];
        ${3:// $this->_optionalParameters[] = ['param' => '-param1', 'description' => 'My Desc'];
        // $this->_requiredParameters[] = ['param' => '-param2', 'description' => 'My Desc'];}
        parent::__construct();
    }

    /**
     * Run the command.
     *
     * @param string|bool $file (default: false) path to script, or false
     */
    public function run($file = false)
    {
        parent::run($file);
        ${4:// $this->_getParam('-param1', 'default val');}
        $this->isDryRun = $this->_isFlagSet('dry-run');
        if ($this->isDryRun) {
            $this->output->success("DRY RUN ONLY no changes will be made");
        }
        ${5:// TODO write script...}
        $this->output->success('All done processing.');
    }
}

/* @var \DI\Container $container */
$container = FrontController::getInstance()->getDispatcher()->getContainer();
$script = $container->get($2::class);
$script->setConcurrency(5);
try {
    $script->run();
} catch (\Throwable $thrown) {
    if ($script->isVerbose()) {
        $script->logMsg($thrown);
    }
    throw $thrown;
}
endsnippet

snippet trt "mike's trait"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path)`
trait `!v expand("%:t:r")`
{
    $6
}
endsnippet

snippet fe "php foreach as"
foreach ($$1s as $${1:thing}) {
    $2
}
endsnippet

snippet mgt "laravel migration"
<?php

declare(strict_types=1);

use Illuminate\Database\Migrations\Migration;

class Create$1Table extends Migration
{
    /** {@inheritdoc}
    public function up()
    {
        Schema::create(
            '${3:table_name}',
            function ($table) {
                ${4:$table->increments('id');
                // $table->integer('member_ad_id')->index();
                // $table->string('city', 255)->nullable();
                // $table->enum(
                //     'status', array(
                //         "unfinished",
                //         "inactive",
                //     )
                // )->default("inactive")->index();
                // $table->timestamp('start_date')->default("0000-00-00 00:00:00");
                // $table->text('body');
                // $table->decimal('price', 12, 2)->nullable();
                // $table->date('featured_expiration_date')->nullable();
                // $table->boolean('is_bigger');
                // $table->timestamps();}
            }
        );
    }

    /** {@inheritdoc} */
    public function down()
    {
        Schema::drop('$3');
    }
}
endsnippet

snippet sdr "Laravel seeder"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path)`
use Illuminate\Database\Seeder;
use Str;

class $4 extends Seeder
{
    /** {@inheritdoc} */
    private function getTableName()
    {
        return '${5:table_name}';
    }

    /** {@inheritdoc} */
    public function run()
    {
        $this->seedFakeRows(10);
        $this->command->info('$5 table seeded!');
    }

    /** {@inheritdoc} */
    private function provideOneRow()
    {
        return [
            ${6:// 'title' => Str::limit($this->faker()->sentence(3), 45),
            // 'price' => $this->faker()->randomNumber(5),
            // 'fax' => $this->faker()->phoneNumber(),
            // 'additional_notes' => $this->faker()->text(),
            // 'other_payment_method' => $this->faker()->text(20),
            // 'height' => $this->faker()->randomNumber(),
            // 'current_step' => $this->faker()->word(),
            // 'is_exclusive' => $this->faker()->boolean(),
            // 'exclusive_expiration_date' => $this->faker()->dateTimeThisYear()->format('Y-m-d G:i:s'),}
        ];
}
endsnippet

# snippet tst
# test
# `!p snip.rv = getPathToNamespace(path)`\\`!v substitute(expand("%:t:r"), "Test", "", "")`
# `!p snip.rv = re.sub(r'^([A-Z])(\w*)$', lambda match: match.group(1).lower() . match.group(2), re.sub(expand("%:t:r"), "Test", "", ""))`
# endsnippet

snippet pucla "mike's phpunit test template with docblocks"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path)`
use PHPUnit_Framework_TestCase as TestCase;

/**
 * Unit Tests
 *
 * @see \\`!p snip.rv = getPathToNamespace(path)`\\`!v substitute(expand("%:t:r"), "Test", "", "")`
 *
 * @group unit
 */
final class ${2:`!v expand("%:t:r")`} extends TestCase
{
    /** @var \\`!p snip.rv = getPathToNamespace(path)`\\`!v substitute(expand("%:t:r"), "Test", "", "")` system under test */
    private \$${2/(\w+)Test\s*/\l$1/};

    /** {@inheritdoc} */
    public function setUp()
    {
        ${1:// TODO mock dependencies}

        // instantiate class under test
        $this->${2/(\w+)Test\s*/\l$1/} = new `!v substitute(expand("%:t:r"), "Test", "", "")`($3);
    }

    /** @test */
    public function it_is_initializable()
    {
        $this->assertInstanceOf(`!v substitute(expand("%:t:r"), "Test", "", "")`::class, $this->${2/(\w+)Test\s*/\l$1/});
    }$4
}
endsnippet

snippet pscla "mike's phpspec (palette) template"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path, "spec\\Palette")`
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

/**
 * {@inheritdoc}
 *
 * @see \\Palette`!p snip.rv = "\\" if getPathToNamespace(path) else ""``!p snip.rv = getPathToNamespace(path)`\\`!v substitute(expand("%:t:r"), "Spec", "", "")`
 */
final class `!v expand("%:t:r")` extends ObjectBehavior
{
    public function it_is_initializable()
    {
        $this->shouldHaveType('\\Palette`!p snip.rv = "\\" if getPathToNamespace(path) else ""``!p snip.rv = getPathToNamespace(path)`\\`!v substitute(expand("%:t:r"), "Spec", "", "")`');
    }$1
}
endsnippet

snippet meth "php method"
${5:/**${6:
 *} @return ${7:void}`!p snip.rv = "\n    " if t[6] else ""` */
}${2:public} function ${2:foo}(${3})$4
{
    ${8:// TODO}
}
endsnippet

snippet mt "php method"
${5:/**${6:
 *} @return ${7:void}`!p snip.rv = "\n    " if t[6] else ""` */
}${2:public} function ${2:foo}(${3})$4
{
    ${8:// TODO}
}
endsnippet

snippet fn "function"
${1:static} function ($2) {
    $3
}
endsnippet

snippet imeth "php interface method"

${5:/**${6:
 *} @return ${7:void}`!p snip.rv = "\n    " if t[6] else ""` */
}public function ${2:foo}(${3})$4;
endsnippet

snippet pumeth "phpunit method"

/** @test */
public function it_${2:does_something}()
{
    ${3:$this->markTestIncomplete();}
}
endsnippet

snippet psmeth "phpspec method"

public function it_${1:does_something}($2)
{
    ${3:// TODO}
}
endsnippet

snippet it "phpspec method"

public function it_${1:does_something}($2)
{
    ${3:// TODO}
}
endsnippet

snippet stp "phpunit setup"

/** {@inheritdoc} */
public function setUp()
{
    parent::setUp();
    $1
}
endsnippet

snippet inte "interface"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path)`
interface `!v expand("%:t:r")`$1
{
    $2
}
endsnippet

snippet pinte "palette interface"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path, "Palette")`$1
interface `!v expand("%:t:r")`
{
    $2
}
endsnippet

snippet vr "local var docblock"
/** @var ${1:Foo} \$${1/\w+/\l$0/} */
endsnippet

snippet va "class-based var with docblock"

/** @var ${1:MyClass} */
private \$${1/\w+/\l$0/};
endsnippet

snippet sva "scalar var with docblock"

/** @var ${1:string} */
private \$${2:foo};
endsnippet

snippet iva "var with docblock with @Inject for php-di"

/**
 * @Inject
 *
 * @var ${1:Foo}
 */
private \$${1/\w+/\l$0/};
endsnippet

snippet cnst "php 7.0 constant with docblock"

/** @access ${1:private} */
const ${3:MY_CONST} = '$4';
endsnippet

snippet rn "nullable return type"
/** @return $1|null */
endsnippet

snippet lng "laravel Lang::get()"
Lang::get('$1')
endsnippet

snippet vw "View::make"
return View::make('$1');
endsnippet

snippet rg "Laravel Route::get"
Route::get(
    '${1:route/path}',
    [
        'uses' => '${2:Namespace\To\Controller}',
        'as' => '${3:route.name}'
    ]
);
endsnippet

snippet rp "Laravel Route::post"
Route::post(
    '${1:route/path}',
    [
        'uses' => '${2:Namespace\To\Controller}',
        'as' => '${3:route.name}'
    ]
);
endsnippet

snippet rdr "Redirect::route"
return Redirect::route('$1');
endsnippet

snippet ife "php if/else" !b
if (${1}) {
    ${2:// TODO}
} else {
    ${3:// TODO}
}
endsnippet

snippet /** "php comment block" b
/**
 * ${1}
 */
endsnippet

snippet -- "// ---"
// ------------------------------------------------------------------------
endsnippet

snippet uns "Laravel Unsigned Integer"
$table->unsignedInteger('$1');
endsnippet

snippet forn "Laravel Foreign Key"
$table->foreign('$1')->references('id')->on('$2');
endsnippet

snippet sft "Laravel Soft Delete"
$table->softDeletes();
endsnippet

snippet vd "var_dump and exit"
var_dump($1); exit;
endsnippet

snippet cl "Laravel http call"
$this->call('${1:GET}', ${2:myurl});
endsnippet

snippet mit "MIT License"
@license MIT License <http://opensource.org/licenses/mit-license.html>
endsnippet

snippet asr "assert equals expected and actual"
$this->assertEquals($expected, $actual);
endsnippet

snippet if "php if statement"
if ($1) {
    $2
}
endsnippet

snippet ie "php if/else statement"
if ($1) {
    $2
} else {
    $3
}
endsnippet

snippet asn "assign variable to instance variable"
$this->${1:listingModel} = \$$1;
endsnippet

snippet arg "set up class instance arg"
${1:Foo} $${1/\w+\s*/\l$0/}
endsnippet

snippet exp "$expected common line in unit tests"
$expected = '${1:foo}';

// call and verify
$actual = $this->${2:bar}->${3:baz($4)};
$this->assertEquals($expected, $actual);
endsnippet

snippet cmd "laravel artisan command"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path)`
use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputOption;

$2class ${1:`!v expand("%:t:r")`} extends Command
{

    /** {@inheritdoc} */
    protected $description = '${3:foo}';

    /** {@inheritdoc} */
    protected $signature = '${4:foo:bar {--dry-run} {--user-id=}}';

    `!p snip.rv = "/** @var " + re.sub(r'^([a-z])(\w*)$', capitalizeRegexMatch, t[5]) + " */\n    private $" + t[5] + ";\n"`
    public function __construct(${5/\w+\s*/\u$0/} $${5:foo})
    {
        $this->$5 = $$5;
    }

    /** {@inheritdoc} */
    public function handle()
    {
        if ($this->isDryRun()) {
            $this->info("DRY RUN ONLY no changes will be made");
        }
        ${6:// TODO}
        $this->info("Finished");
    }

    private function isDryRun(): bool
    {
        return (bool) $this->option('dry-run');
    }
}
endsnippet

snippet evt "saatchi palette domain event"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path, "Palette")`
use Palette\SaatchiArt\DomainEvent;

class `!v expand("%:t:r")` extends DomainEvent
{
    `!p snip.rv = "/** @var " + re.sub(r'^([a-z])(\w*)$', capitalizeRegexMatch, t[1]) + " */\n    private $" + t[1] + ";\n"`
    public function __construct(${1/\w+\s*/\u$0/} $${1:foo})
    {
        $this->$1 = $$1;
    }$6
}
endsnippet

# snippet tst "testing some patterns"
# $1
# `!p snip.rv = re.sub(r'\$', r'', t[1])`
# endsnippet

# snippet tst "testing some patterns"
# $1`!p snip.rv = "\n\n/** @var " + t[1].capitalize() + " */\n$" + t[1] if t[1] else ""`
# endsnippet

# snippet tst "testing some patterns"
# $1
# `!p snip.rv = 'y' if t[1] else 'n'`
# endsnippet

snippet hnd "saatchi palette domain event handler"
<?php

declare(strict_types=1);
`!p snip.rv = getNamespace(snip, path, "Palette")`
use Palette\SaatchiArt\DomainEvent;

class ${1:`!v expand("%:t:r")`} implements DomainEventHandlerInterface
{
    `!p snip.rv = "/** @var " + re.sub(r'^([a-z])(\w*)$', capitalizeRegexMatch, t[1]) + " */\n    private $" + t[1] + ";\n"`
    public function __construct(${1/\w+\s*/\u$0/} $${1:foo})
    {
        $this->$1 = $$1;
    }$6

    /** {@inheritdoc} */
    public function handle(DomainEvent $event)
    {
        if (!$event instanceof ${6:MyEventClass}) {
            throw new \InvalidArgumentException("Wrong event type received");
        }
        ${7:// TODO}
    }
}
endsnippet

snippet ep "doctrine entity manager persist"
$entityManager->persist($1);
endsnippet

snippet ef "doctrine entity manager flush"
$entityManager->flush();
endsnippet

snippet let "phpspec let (before each test)"
/** {@inheritdoc} */
public function let(
    $1
) {
    $this->beConstructedWith(
        $2
    );
}
endsnippet

snippet lt "phpspec let (before each test)"

/** {@inheritdoc} */
public function let($1)
{
    $this->beConstructedWith($2);
}
endsnippet

snippet bcw "phpspec beConstructedWith()"
$this->beConstructedWith($1);
endsnippet

snippet prp "PRophet Prophesize"
$this->prophesize(${1:MyClass}::class);
endsnippet

snippet prpt "PRophet Prophesize to property"
$this->${1:myClass} = $this->prophesize(${1/\w+\s*/\u$0/}::class);
endsnippet

snippet prpr "PRophesize Rowset (Zend_Db_Table_Rowset)"
$${1:user}Row = $this->prophesize(${1/\w+/\u$0/}Row::class);
$$1Rowset = $this->prophesize(${1/\w+/\u$0/}Rowset::class);
$$1Rowset->rewind()->shouldBeCalled();
$returns = [true, false];
$$1Rowset->valid()->will(function () use (&$returns) {
    return array_shift($returns);
});
$$1Rowset->current()->willReturn($$1Row);
$$1Rowset->next()->shouldBeCalled();
$$1Rowset->key()->willReturn(0);
endsnippet

snippet rvl "reveal a prophesized object"
$this->${1:myClass}->reveal()
endsnippet

snippet prs "PRophet Should be called"
shouldBeCalled()->
endsnippet

snippet prr "PRophet will Return"
willReturn($1);
endsnippet

snippet gmb "phpunit get mock builder"
$this->getMockBuilder(${1:MyClass}::class)->getMock();
endsnippet

snippet pme "phpunit expects once (pneumonic Phpunit Mock Expects)"
expects($this->once())->$2
endsnippet

snippet pmd "phpunit disable original constructor (pneumonic phpunit mock disable)"
disableOriginalConstructor()->$1
endsnippet

snippet pms "phpunit set methods (pneumonic phpunit mock set)"
setMethods(['$1'])->
endsnippet

snippet pma "phpunit at (pneumonic Phpunit Mock At)"
expects($this->at($1))->$2
endsnippet

snippet pmm "phpunit method (pneumonic Phpunit Mock Method)"
method('${1:methodName}')->$2
endsnippet

snippet pmw "phpunit with (pneumonic Phpunit Mock With)"
with('${1:input}')->$2
endsnippet

snippet pmr "phpunit return (pneumonic Phpunit Mock Return)"
will($this->returnValue($1));
endsnippet

snippet slg "saatchi zend logger - log to file"
\Zend_Registry::get('file_logger')->info("$1");
endsnippet

snippet lg "saatchi zend logger - log to file"
\Zend_Registry::get('file_logger')->info("$1");
endsnippet

# snippet zlg "Zed log to file. Isn't there an easier way?"
# (new \Zend_Log(new \Zend_Log_Writer_Stream('/scratch/yzed/data/US/logs/ZED/exception.log')))->info($1);
# endsnippet

snippet zlg "Zed log to file"
\PalShared_Log::log("$1", 'exception.log');
endsnippet

snippet dbg "Psysh debugger"
eval(\Psy\sh());
endsnippet

snippet wl "php reduce array to only whitelisted keys"
array_filter(array_intersect_key(${1:$myArray}, array_flip($whitelist)));
endsnippet

snippet cfg "Get config value via zend framework 1"
Zend_Registry::get('config')->$1
endsnippet

snippet glg "Gallery log"
\Log::info(print_r($1, true));
endsnippet

snippet plg "Php log to debug file with no dependencies"
\Log::info(print_r($1, true));
endsnippet

snippet tc "try/catch block"
try {
    ${2:// TODO}
} catch (${1:\Throwable} $e) {
    ${3:// TODO}
}
endsnippet

snippet pft "PhpUnit Framework TestCase"
\PHPUnit_Framework_TestCase
endsnippet

snippet dvd "die and var_dump. useful for testing on remote"
die(var_dump($1));
endsnippet

snippet stacktrace "throw an exception with a stack trace as the message"
try {
    throw new \Exception('here');
} catch (\Exception $e) {
    throw new \Exception($e->getTraceAsString());
}
endsnippet

snippet lre "legacy php-di resolve"
\Zend_Controller_Front::getInstance()->getDispatcher()->getContainer()->get($1::class);
endsnippet

snippet pmt "partial mock for testing"
// partial mock version
$this->${1:myClass} = $this->getMockBuilder(${1/\w+\s*/\u$0/}::class)->
    setConstructorArgs([
        ${2:// TODO}
    ])->
    setMethods([
        ${3:// TODO mock methods}
    ])->
    getMock();
endsnippet

snippet tne "throw new exception for debug purposes (palette)"
throw new \Exception(print_r($1, true));
endsnippet

snippet fe "foreach"
foreach ($1 as $2) {
    $3
}
endsnippet

snippet fo "for"
for (${1:$i = 0;}, ${2:$i < $total;}, ${3:$i++}) {
    $4
}
endsnippet

snippet case "case 'value': ... break"
    case '${1:value}':
        ${0:${VISUAL}}
        break;
endsnippet

snippet if "if"
if ($1) {
    $2
}
endsnippet

snippet am "array_map"
\array_map(function ($2) {
    $3
}, $1);
endsnippet

snippet af "array_filter"
\array_filter($1, function ($2) {
    $3
});
endsnippet

snippet us "usort"
\usort($1, function ($2, $3) {
    ${4:return \$var2 <=> \$var1;}
});
endsnippet

snippet /* "comment"
/**
 * $1
 */
endsnippet

snippet ve "var_export"
\var_export($1, true)
endsnippet

snippet rt "return true"
return true;
endsnippet

snippet rt "return false"
return false;
endsnippet

snippet te "throw exception"
throw new ${1:\Exception}($2);
endsnippet

snippet sr "phpspec should return"
->shouldReturn(${2:'bar'});
endsnippet

snippet wr "phpspec will return"
->willReturn(${3:'baz'});
endsnippet

snippet sr1 "phpspec should return - one line"
$this->${1:foo}->shouldReturn(${2:'bar'});
endsnippet

snippet wr1 "phpspec will return - one line"
$${1:foo}->${2:bar()}->willReturn(${3:'baz'});
endsnippet

snippet sbc "phpspec should be called"
->shouldBeCalled()
endsnippet

snippet snbc "phpspec should not be called"
->shouldNotBeCalled()
endsnippet

snippet st "phpspec should throw"
->shouldThrow(${1:\Exception::class})
->during${2:Foo}($3);
endsnippet

snippet wt "phpspec will throw"
->willThrow(${1:new \Exception('oops')});
endsnippet

snippet wt1 "phpspec will throw - one line"
$${1:foo}->${2:bar}($3)->willThrow(${4:new \Exception('oops')});
endsnippet

snippet st1 "phpspec should throw - one line"
$this->shouldThrow(${1:\Exception::class})->during${2:Foo}($3);
endsnippet

snippet ca "call a method on its own line"
->${1:foo}($2)
endsnippet

snippet act "laravel controller action"
public function ${1:foo}(${2:Request $request}): JsonResponse
{
    ${3:// TODO}
}
endsnippet

snippet rte "laravel route"
Route::${1:post}('${2:foo/bar}', '${3:BarController}@${4:baz}');
endsnippet

snippet lgr "import logger interface"
use Psr\Log\LoggerInterface as Logger;
endsnippet
