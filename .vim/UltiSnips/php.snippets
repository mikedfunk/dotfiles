extends html

global !p

def namespace(snip, path, prepend = ''):
    import os
    namespace = pathToNamespace(path)
    if (len(namespace) == 0):
        return ''
    return os.linesep + snip.mkline('namespace ' + prepend + namespace + ';') + os.linesep

def pathToNamespace(path):
    import re
    path = path.replace('\\', '/')

    parts = []
    for part in path.split('/'):
        if re.match('^[A-Z]', part):
            parts.append(part)
        else:
            parts = []
    parts.pop()

    return '\\'.join(parts)

endglobal

snippet itr "prophecy mock iterator functions"
$$1->rewind()->shouldBeCalled();
$returns = [true, false];
$$1->valid()->will(function () use (&$returns) {
	return array_shift($returns);
});
$$1->current()->willReturn($2);
$$1->next()->shouldBeCalled();
$$1->key()->willReturn(0);
endsnippet

snippet id "inherit doc"
/** {@inheritdoc} */
endsnippet

snippet cgt "IoT container get"
$container->get($1);
endsnippet

snippet dst "declare strict types"
declare(strict_types=1);
endsnippet

snippet shp "php shape"
use const Shape\arr;
use const Shape\bool;
use const Shape\int;
use const Shape\string;
use function Shape\shape;
endsnippet

snippet al "require composer autoloader"
// get composer autoloader
require __DIR__ . '/vendor/autoload.php';
endsnippet

snippet di "dependency injection"

$1::class => function (ContainerInterface $container) {
    ${2:// }
    return new $1($3);
},
endsnippet

snippet gtr "php class getter" !b

public function get${1/\w+\s*/\u$0/}(): $2
{
    return $this->$1;
}
endsnippet

snippet str "PHP Class Setter" !b

/**
 * @return self the current instance for chainability
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;

    return $this;
}
endsnippet

snippet sg "PHP Class Setter Getter" !b

/**
 * @return self the current instance for chainability
 */
public function set${1/\w+\s*/\u$0/}($2 $$1)
{
    $this->$1 = $$1;

    return $this;
}

public function get${1/\w+\s*/\u$0/}(): $2
{
    return $this->$1;
}
endsnippet

snippet ig "PHP Class Immutable With and Getter" !b

/**
 * Return a new instance with this property changed.
 *
 * @param ${2:mixed} $$1
 *
 * @return self a new instance of the current class for immutability.
 */
public function with${1/\w+\s*/\u$0/}($$1)
{
	$copy = clone $this;
	$copy->$1 = $$1;

	return $copy;
}

/**
 * Getter.
 *
 * @return $2
 */
public function get${1/\w+\s*/\u$0/}()
{
	return $this->$1;
}
endsnippet

snippet ght "Ghetto dependency injection" !b

/**
 * Setter - ghetto dependency injection. Allows for setting this as a mock
 * in testing.
 *
 * @param ${2:mixed} $$1

 * @return static the current instance for chainability
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;

    return $this;
}

/**
 * Getter - singleton.
 *
 * @return $2
 */
public function get${1/\w+\s*/\u$0/}()
{
    if (is_null($this->$1)) {
        $this->$1 = new $2();
        return $this->$1;
    }

    return $this->$1;
}
endsnippet

snippet prt "print_r true"
print_r(${1}, true)${2}
endsnippet

snippet dpr "die print_r"
die(print_r(${1}));
endsnippet

snippet mti "phpunit incomplete test"
$this->markTestIncomplete();${1}
endsnippet

snippet codingStandardsIgnore "magical docblock to make phpcs shut up!"
/**
 * @codingStandardsIgnoreFile
 */
endsnippet

snippet mck
$$1Mock = Mockery::mock('${1/\w+\s*/\u$0/}');
$$1Mock->shouldReceive('$3')
    ->once()
    ->andReturn(${4:true});
endsnippet

snippet cstr "laravel 4 DI construct"

public function __construct(${1/\w+\s*/\u$0/} $${1:myClass})
{
    $this->$1 = $$1;
}
endsnippet

snippet dp "PHPUnit Data Provider function"

/**
 * $1DataProvider.
 *
 * @return array
 */
public function $1DataProvider()
{
    return [
        [
            $2
        ],
    ];
}
endsnippet

snippet php "opening php tag"
<?php
$1
endsnippet

snippet cla "mike's class with namespace, file and class docblocks"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path)`$5
class `!v expand("%:t:r")`$4
{
    $6
}
endsnippet

snippet pcla "palette class"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path, "Palette\\")`$5
class `!v expand("%:t:r")`$4
{
    $6
}
endsnippet

snippet lsp "laravel service provider"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path)`
use Illuminate\Support\ServiceProvider;

class `!v expand("%:t:r")`$1 extends ServiceProvider
{
    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        // $this->app->when(LegacyApi::class)
        //     ->needs(GuzzleHttpClientInterface::class)
        //     ->give(GuzzleHttpClient::instance);
        $2
    }
}
endsnippet

snippet req "laravel validating request"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path, "Palette\\")`
use Palette\Http\Requests\ApiRequest;

class `!v expand("%:t:r")`$4 extends ApiRequest
{
    /** @inheritDoc */
    public function rules()
    {
        return [
            ${1://}
        ];
    }

    /** @inheritDoc */
    public function messages()
    {
        return [
            // key/value pairs for validation type => message e.g.
            // 'first_name.required' => 'wtf dont leave this blank',
        ];
    }

    /** @inheritDoc */
    public function authorize()
    {
        return true;
    }
}
endsnippet

snippet greq "gallery laravel validating request"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path, "Gallery\\")`
use Gallery\Http\Requests\Request as ApiRequest;

class `!v expand("%:t:r")`$4 extends ApiRequest
{
    /** @inheritDoc */
    public function rules()
    {
        return [
            ${1://}
        ];
    }

    /** @inheritDoc */
    public function messages()
    {
        return [
            // key/value pairs for validation type => message e.g.
            // 'first_name.required' => 'wtf dont leave this blank',
        ];
    }

    /** @inheritDoc */
    public function authorize()
    {
        return true;
    }
}
endsnippet

snippet scr "saatchi process abstract script"
<?php

declare(strict_types=1);

require_once __DIR__ . '/../../vendor/autoload.php';

use Zend_Controller_Front as FrontController;

/**
 * ${1:Description}
 *
 * usage: php /data/code_base/current/`!v @%` {environment} {-v} {--dry-run}
 */
class ${2:MyScript} extends ProcessAbstract
{
    /** @var bool */
    private $isDryRun = true;

    public function __construct()
    {
	    $this->_additionalOptionalFlags[] = ['flag' => 'dry-run', 'description' => 'If in dry run, don\'t actually do anything'];
	    ${3:// $this->_optionalParameters[] = ['param' => '-param1', 'description' => 'My Desc'];
	    // $this->_requiredParameters[] = ['param' => '-param2', 'description' => 'My Desc'];}
	    parent::__construct();
    }

    /**
     * Run the command.
     *
     * @param string|bool $file (default: false) path to script, or false
     */
    public function run($file = false)
    {
        parent::run($file);
        ${4:// $this->_getParam('-param1', 'default val');}
        $this->isDryRun = $this->_isFlagSet('dry-run');
        if ($this->isDryRun) {
            $this->output->success("DRY RUN ONLY no changes will be made");
        }
        ${5:// TODO write script...}
        $this->output->success('All done processing.');
    }
}

/* @var \DI\Container $container */
$container = FrontController::getInstance()->getDispatcher()->getContainer();
$script = $container->get($2::class);
$script->setConcurrency(5);
try {
    $script->run();
} catch (\Throwable $thrown) {
    if ($script->isVerbose()) {
        $script->logMsg($thrown);
    }
    throw $thrown;
}
endsnippet

snippet qscr "saatchi queue process abstract script"
<?php

declare(strict_types=1);

require_once __DIR__ . '/../../vendor/autoload.php';

use Zend_Controller_Front as FrontController;

/**
 * ${1:Description}
 *
 * usage: php /data/code_base/current/`!v @%` {environment} {-v} {--dry-run}
 */
class ${2:MyScript} extends QueueProcessAbstract
{
    /** @var bool */
    private $isDryRun = true;

	public function __construct()
	{
        $this->_additionalOptionalFlags[] = ['flag' => 'dry-run', 'description' => 'If in dry run, don\'t actually do anything'];
        ${3:// $this->_optionalParameters[] = ['param' => '-param1', 'description' => 'My Desc'];
        // $this->_requiredParameters[] = ['param' => '-param2', 'description' => 'My Desc'];}
		parent::__construct();
		$this->setDefaultQueue('${3:config-key-for-sqs-queue}');
		// number of messages to retrieve at once
		// $this->setDefaultPull(10);
	}

	/** Handle each sqs event. */
	public function processData()
	{
        $this->isDryRun = $this->_isFlagSet('dry-run');
        if ($this->isDryRun) {
            $this->output->success("DRY RUN ONLY no changes will be made");
        }
        ${4:// $this->_getParam('-param1', 'default val');}
		/** @var array $event */
		foreach ($this->updateData as $event) {
            ${5:// TODO write script...}
		}
		$this->output->success('All done processing.');
	}
}

/* @var \DI\Container $container */
$container = FrontController::getInstance()->getDispatcher()->getContainer();
$script = $container->get($2::class);
$script->setConcurrency(5);
try {
	$script->run();
} catch (\Throwable $thrown) {
	if ($script->isVerbose()) {
		$script->logMsg($thrown);
	}
	throw $thrown;
}
endsnippet

snippet trt "mike's trait with namespace, file and class docblocks"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path)`
trait `!v expand("%:t:r")`
{
    $6
}
endsnippet

snippet sfctl "symfony controller"
<?php

declare(strict_types=1);`!p snip.rv = namespace(snip, path)`
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;

/** @Route(service="app.${1/\w+/\l$0/}_controller") */
class `!v expand("%:t:r")` extends Controller
{
    /**
     * @Route("/${1/\w+/\l$0/}", name="${1/\w+/\l$0/}_index")
     * @Template()
     * @return array
     */
    public function indexAction()
    {
        return [];
    }
}
endsnippet

snippet fe "php foreach as"
foreach ($$1s as $${1:thing}) {
    $2
}
endsnippet

snippet mgt "laravel migration"
<?php

declare(strict_types=1);

use Illuminate\Database\Migrations\Migration;

class Create$1Table extends Migration
{

    /**
     * Run the migrations.
     */
    public function up()
    {
        Schema::create(
            '${3:table_name}',
            function ($table) {
                $table->increments('id');
                $4
                // $table->integer('member_ad_id')->index();
                // $table->string('city', 255)->nullable();
                // $table->enum(
                //     'status', array(
                //         "unfinished",
                //         "inactive",
                //     )
                // )->default("inactive")->index();
                // $table->timestamp('start_date')->default("0000-00-00 00:00:00");
                // $table->text('body');
                // $table->decimal('price', 12, 2)->nullable();
                // $table->date('featured_expiration_date')->nullable();
                // $table->boolean('is_bigger');
                // $table->timestamps();
            }
        );
    }

    /**
     * Reverse the migrations.
     */
    public function down()
    {
        Schema::drop('$3');
    }
}
endsnippet

snippet sdr "Laravel seeder"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path)`
use Illuminate\Database\Seeder;
use Str;

class $4 extends Seeder
{

    /**
     * getTableName
     *
     * @return string
     */
    private function getTableName()
    {
        return '${5:table_name}';
    }

    /**
     * run seeder
     */
    public function run()
    {
        $this->seedFakeRows(10);
        $this->command->info('$5 table seeded!');
    }

    /**
     * provide one fake row
     *
     * @return array
     */
    private function provideOneRow()
    {
        return array(
            $6
            // 'title' => Str::limit($this->faker()->sentence(3), 45),
            // 'price' => $this->faker()->randomNumber(5),
            // 'fax' => $this->faker()->phoneNumber(),
            // 'additional_notes' => $this->faker()->text(),
            // 'other_payment_method' => $this->faker()->text(20),
            // 'height' => $this->faker()->randomNumber(),
            // 'current_step' => $this->faker()->word(),
            // 'is_exclusive' => $this->faker()->boolean(),
            // 'exclusive_expiration_date' => $this->faker()->dateTimeThisYear()->format('Y-m-d G:i:s'),
        );
    }
}
endsnippet

snippet pucla "mike's phpunit test template with docblocks"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path)`
use PHPUnit_Framework_TestCase as TestCase;

/**
 * Unit Tests
 *
 * @see \\`!p snip.rv = pathToNamespace(path)`\\$2
 *
 * @group unit
 */
final class `!v expand("%:t:r")` extends TestCase
{

    /** @var \\`!p snip.rv = pathToNamespace(path)`\\${2:ActualClass} system under test */
    private \$${2/\w+\s*/\l$0/};

    /** Phpunit setup. Runs before each test. */
    public function setUp()
    {
		// mock dependencies


        // instantiate class under test
        $this->${2/\w+\s*/\l$0/} = new $2();
    }

    /** @test */
    public function it_is_initializable()
    {
        $this->assertInstanceOf($2::class, $this->${2/\w+\s*/\l$0/});
    }
}
endsnippet

snippet pscla "mike's phpspec (palette) template"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path, "spec\\Palette\\")`
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

/**
 * Specification unit test for \\Palette\\`!p snip.rv = pathToNamespace(path)`\\$2.
 *
 * @see \\Palette\\`!p snip.rv = pathToNamespace(path)`\\$2
 */
final class `!v expand("%:t:r")` extends ObjectBehavior
{

    public function it_is_initializable()
    {
        $this->shouldHaveType('\\Palette\\`!p snip.rv = pathToNamespace(path)`\\${2:ActualClass}');
    }
}
endsnippet

snippet pupcla "mike's phpunit prophecy test template with docblocks"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path)`
use DemandMedia\Test\AbstractProphecyTest;

/** Unit Tests */
class `!v expand("%:t:r")` extends AbstractProphecyTest
{

    /**
     * @var \\$0${2:ActualClass} class under test
     */
    private \$${2/\w+\s*/\l$0/};

    /**
     * phpunit setup
     */
    public function setUp()
    {
        parent::setUp();

        // instantiate class under test
        $this->${2/\w+\s*/\l$0/} = new $2();
    }
}
endsnippet

snippet meth "php method"
$7
${3:public} function ${4:functionname}(${5})$6
{
    ${8:// TODO}
}
endsnippet

snippet scmeth "symfony controller method"

/**
 * ${1:Description}
 *
 * @Route("${1:/}", name="${2:route_name}")
 * @Template($3)
 * @return ${4:array}
 */
public function ${5:functionname}Action($6)
{
    $7
}
endsnippet

snippet imeth "php interface method"

/**
 * ${1:Description}
 *
 * @return ${4:void}
 */
public function ${2:functionname}(${3});
endsnippet

snippet pumeth "phpunit method"

/** @test */
public function it_${2:does_something}()
{
    ${3:$this->markTestIncomplete();}
}
endsnippet

snippet psmeth "phpspec method"

public function it_${2:does_something}()
{
    $3
}
endsnippet

snippet stp "phpunit setup"

/**
 * phpunit setup
 */
public function setUp()
{
    parent::setUp();
    $1
}
endsnippet

snippet inte
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path)`
interface $4
{
    $6
}
endsnippet

snippet vr "local var docblock"
/** @var ${1:mixed} \$${2:myVar} */
endsnippet

snippet va "class-based var with docblock"

/** @var \\${1:MyClass} */
private \$${1/\w+/\l$0/};
endsnippet

snippet sva "scalar var with docblock"

/** @var ${1:mixed} */
private \$${2:myvar};
endsnippet

snippet iva "var with docblock with @Inject for php-di"

/**
 * @Inject
 *
 * @var ${1:mixed}
 */
private \$${2:myvar};
endsnippet

# snippet iva "var with docblock implementing an interface"

# /**
#  * ${1/\w+\s*/\u$0/} instance
#  *
#  * @var ${1/\w+\s*/\u$0/}Interface
#  */
# protected $$1;
# endsnippet

snippet srs "shouldReceive something andReturnSelf"
->shouldReceive('$1')
->once()
->with($2)
->andReturnSelf()
endsnippet

snippet sro "should receive once with no args"
${1:\$file}->shouldReceive('$2')->once()->withNoArgs()->andReturn($3);
endsnippet

snippet mva "assign mock to instance variable"
$ns = 'DemandMedia\\${1:Listing}\\${2:Interfaces}'
    . '\\${3:MyClassName}${4:Interface}';
${5:$myvar} = Mockery::mock($ns);
endsnippet

snippet cnst "constant with docblock"

/** @access ${1:private} */
const ${3:MY_CONST} = '$4';
endsnippet

snippet varblock "var docblock"
/**
 * ${1:description}
 *
 * @var ${2:mixed}
 * @access ${3:public}
 */
endsnippet

snippet rn "nullable return type"
/**
 * @return $1|null
 */
endsnippet

snippet methodblock "method level docblock"
/**
 * ${1:title}
 *
 * @param ${2:string $myvar my description here}
 */
endsnippet

snippet lng "laravel Lang::get()"
Lang::get('$1')
endsnippet

snippet vw "View::make"
return View::make('$1');
endsnippet

snippet r:g "Laravel Route::get"
Route::get(
    '${1:route/path}',
    [
        'uses' => '${2:Namespace\To\Controller}',
        'as' => '${3:route.name}'
    ]
);
endsnippet

snippet rdr "Redirect::route"
return Redirect::route('$1');
endsnippet

# snippet if "php if" !b
# if (${1}) {
    # ${2}
# }
# endsnippet

snippet ife "php if/else" !b
if (${1}) {
    ${2}
} else {
    ${3}
}
endsnippet

snippet foreach "php foreach"
foreach (${1:$things as $thing}) {
    $2
}
endsnippet

snippet /** "php comment block" b
/**
 * ${1}
 */
endsnippet

snippet -- "// ---"
// ------------------------------------------------------------------------
endsnippet

snippet me "@author"
@author Michael Funk <`!v g:snips_author`>
endsnippet

snippet hm "@author home address"
@author Michael Funk <mike@mikefunk.com>
endsnippet

snippet uns "Laravel Unsigned Integer"
$table->unsignedInteger('$1');
endsnippet

snippet forn "Laravel Foreign Key"
$table->foreign('$1')->references('id')->on('$2');
endsnippet

snippet sft "Laravel Soft Delete"
$table->softDeletes();
endsnippet

snippet vd "var_dump and exit"
var_dump($1); exit;
endsnippet

snippet dd "symfony dump and die"
dump($1); exit;
endsnippet

snippet cl "Laravel http call"
$this->call('${1:GET}', ${2:myurl});
endsnippet

snippet zmodule "Zend Framework Module class"
<?php

declare(strict_types=1);

namespace ${2:Namespace};

class Module
{

    /**
     * use composer instead of Zend's autoloader
     *
     * @return null
     */
    public function getAutoloaderConfig()
    {
    }

    /**
     * get module config
     *
     * @return array
     */
    public function getConfig()
    {
        return require_once __DIR__ . '/config/module.config.php';
    }
}
endsnippet

snippet zendbootstrap "Zend Framework Unit Testing Bootstrap File"
<?php

namespace AlbumTest;

use Zend\Loader\AutoloaderFactory;
use Zend\Mvc\Service\ServiceManagerConfig;
use Zend\ServiceManager\ServiceManager;
use RuntimeException;

error_reporting(E_ALL | E_STRICT);
chdir(__DIR__);

/**
 * Test bootstrap, for setting up autoloading
 */
class Bootstrap
{
    protected static $serviceManager;

    public static function init()
    {
        $zf2ModulePaths = array(dirname(dirname(__DIR__)));
        if (($path = static::findParentPath('vendor'))) {
            $zf2ModulePaths[] = $path;
        }
        if (($path = static::findParentPath('module')) !== $zf2ModulePaths[0]) {
            $zf2ModulePaths[] = $path;
        }

        static::initAutoloader();

        // use ModuleManager to load this module and it's dependencies
        $config = array(
            'module_listener_options' => array(
                'module_paths' => $zf2ModulePaths,
            ),
            'modules' => array(
                '${1:MyModuleName}'
            )
        );

        $serviceManager = new ServiceManager(new ServiceManagerConfig());
        $serviceManager->setService('ApplicationConfig', $config);
        $serviceManager->get('ModuleManager')->loadModules();
        static::$serviceManager = $serviceManager;
    }

    public static function getServiceManager()
    {
        return static::$serviceManager;
    }

    protected static function initAutoloader()
    {
        $vendorPath = static::findParentPath('vendor');

        $zf2Path = getenv('ZF2_PATH');
        if (!$zf2Path) {
            if (defined('ZF2_PATH')) {
                $zf2Path = ZF2_PATH;
            } elseif (is_dir($vendorPath . '/ZF2/library')) {
                $zf2Path = $vendorPath . '/ZF2/library';
            } elseif (is_dir($vendorPath . '/zendframework/zendframework/library')) {
                $zf2Path = $vendorPath . '/zendframework/zendframework/library';
            }
        }

        if (!$zf2Path) {
            throw new RuntimeException('Unable to load ZF2. Run "php composer.phar install" or define a ZF2_PATH environment variable.');
        }

        include $zf2Path . '/Zend/Loader/AutoloaderFactory.php';
        AutoloaderFactory::factory(array(
            'Zend\Loader\StandardAutoloader' => array(
                'autoregister_zf' => true,
                'namespaces' => array(
                    __NAMESPACE__ => __DIR__ . '/' . __NAMESPACE__,
                ),
            ),
        ));
    }

    protected static function findParentPath($path)
    {
        $dir = __DIR__;
        $previousDir = '.';
        while (!is_dir($dir . '/' . $path)) {
            $dir = dirname($dir);
            if ($previousDir === $dir) return false;
            $previousDir = $dir;
        }
        return $dir . '/' . $path;
    }
}

Bootstrap::init();
endsnippet

snippet zendmodule "Zend Framework module config"
<?php
return array(
    'controllers' => array(
        'invokables' => array(
            '${1:ZendSkeletonModule\Controller\Skeleton}' => '$1Controller',
        ),
    ),
    'router' => array(
        'routes' => array(
            'module-name-here' => array(
                'type'    => 'Literal',
                'options' => array(
                    // Change this to something specific to your module
                    'route'    => '${2:/module-specific-root}',
                    'defaults' => array(
                        // Change this value to reflect the namespace in which
                        // the controllers for your module are found
                        '__NAMESPACE__' => '$1',
                        'controller'    => '${4:Skeleton}',
                        'action'        => 'index',
                    ),
                ),
                'may_terminate' => true,
                'child_routes' => array(
                    // This route is a sane default when developing a module;
                    // as you solidify the routes for your module, however,
                    // you may want to remove it and replace it with more
                    // specific routes.
                    'default' => array(
                        'type'    => 'Segment',
                        'options' => array(
                            'route'    => '/[:controller[/:action]]',
                            'constraints' => array(
                                'controller' => '[a-zA-Z][a-zA-Z0-9_-]*',
                                'action'     => '[a-zA-Z][a-zA-Z0-9_-]*',
                            ),
                            'defaults' => array(
                            ),
                        ),
                    ),
                ),
            ),
        ),
    ),
    'view_manager' => array(
        'template_path_stack' => array(
            'ZendSkeletonModule' => __DIR__ . '/../view',
        ),
    ),
);
endsnippet

snippet mit "MIT License"
@license MIT License <http://opensource.org/licenses/mit-license.html>
endsnippet

snippet asr "assert equals expected and actual"
$this->assertEquals($expected, $actual);
endsnippet

snippet if "php if statement"
if ($1) {
    $2
}
endsnippet

snippet ie "php if/else statement"
if ($1) {
    $2
} else {
    $3
}
endsnippet

# snippet fe "php foreach"
# foreach ($1) {
    # $2
# }
# endsnippet

snippet asn "assign variable to instance variable"
$this->${1:listingModel} = \$$1;
endsnippet

snippet arg "set up class instance arg"
${1:MyClass} $${1/\w+\s*/\l$0/}
endsnippet

snippet exp "$expected common line in unit tests"
$expected = '${1:random string}';

// call and verify
$actual = $this->${2:listingRepository}->${3:myMethod()};
$this->assertEquals($expected, $actual);
endsnippet

snippet cmd "laravel artisan command"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path)`
use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputOption;

/** $2 */
class ${1:`!v expand("%:t:r")`} extends Command
{

    /** @var string The console command description. */
    protected $description = '$3';

    /** @var string The name and signature of the console command. */
    protected $signature = '${4:email:send {--dry-run}}';

    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $this->info("Starting script");
        $this->info("DRY RUN ONLY no changes will be made");
        ${6:// TODO write command}
        $this->info("Script finished");
    }

    private function isDryRun(): bool
    {
        return (bool) $this->option('dry-run');
    }
}
endsnippet

snippet evt "saatchi palette domain event"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path, "Palette\\")`
use Palette\SaatchiArt\DomainEvent;

class ${1:`!v expand("%:t:r")`} extends DomainEvent
{

    public function __construct(${5/\w+\s*/\u$0/} $${5:myClass})
    {
        $this->$5 = $$5;
    }
}
endsnippet

snippet hnd "saatchi palette domain event handler"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path, "Palette\\")`
use Palette\SaatchiArt\DomainEvent;

class ${1:`!v expand("%:t:r")`} implements DomainEventHandlerInterface
{

    public function __construct(${5/\w+\s*/\u$0/} $${5:myClass})
    {
        $this->$5 = $$5;
    }

    /** @inheritDoc */
    public function handle(DomainEvent $event)
    {
        if (!$event instanceof ${6:MyEventClass}) {
            throw new \InvalidArgumentException("Wrong event type received");
        }
        ${7:// TODO handle event}
    }
}
endsnippet

snippet dpa "docblock part of param with matching interface"
@param \\${1:ImageRepository}Interface $${1/\w+/\l$0/}
endsnippet

snippet mpa "method parameter input for typehinted class with matching interface"
${1:Whatever}Interface $${1/\w+/\l$0/},
endsnippet

snippet apa "assign parameter to class variable"
$this->${1:whatever} = $$1;
endsnippet

snippet rcmd "Register an artisan command in the service provider"
// register $1 command
$this->app->bind(
    '${1:listing.import}',
    'DemandMedia\\${2:Listing}\Commands'
    . '\\${3:ListingImport}Command'
);
$this->commands('$1');
endsnippet

snippet ibap "DemandMedia"
DemandMedia\
endsnippet

snippet behatspin "Behat keep trying until it succeeds"

/**
 * keep trying until this succeeds with a timeout of 60 seconds
 *
 * @param function $lambda
 */
public function spin ($lambda, $wait = 60)
{
    for ($i = 0; $i < $wait; $i++)
    {
        try {
            if ($lambda($this)) {
                return true;
            }
        } catch (Exception $e) {
            // do nothing
        }

        sleep(1);
    }

    $backtrace = debug_backtrace();

    throw new Exception(
        "Timeout thrown by " . $backtrace[1]['class'] . "::" . $backtrace[1]['function'] . "()\n" .
        $backtrace[1]['file'] . ", line " . $backtrace[1]['line']
    );
}
endsnippet

snippet dcli "doctrine cli config"
<?php
/**
 * this file is required for the doctrine cli tool to work
 *
 * ${2:@license MIT License <http://opensource.org/licenses/mit-license.html>}
 */
use Doctrine\ORM\Tools\Console\ConsoleRunner;
use Doctrine\ORM\Tools\Setup;
use Doctrine\ORM\EntityManager;

require_once __DIR__ . '/vendor/autoload.php';

// Create a simple yaml Doctrine ORM configuration for Annotations
$isDevMode = true;
$config = Setup::createYAMLMetadataConfiguration([__DIR__."/config/yaml"], $isDevMode);

// database configuration parameters
$conn = array(
    'driver' => 'pdo_sqlite',
    'path' => __DIR__ . '/db.sqlite',
);

// obtaining the entity manager
$entityManager = EntityManager::create($conn, $config);

return ConsoleRunner::createHelperSet($entityManager);
endsnippet

snippet ep "doctrine entity manager persist"
$entityManager->persist($1);
endsnippet

snippet efl "doctrine entity manager flush"
$entityManager->flush();
endsnippet

snippet serializable "doctrine entity serializable methods"
/**
 * serialize
 *
 * @return string|null representation of the object or null
 */
public function serialize()
{
    return serialize([
        ${1:$this->id,
        $this->username,
        $this->password}
    ]);
}

/**
 * unserialize
 */
public function unserialize($serialized)
{
    list(
        ${2:$this->id,
        $this->username,
        $this->password}
    ) = unserialize($serialized);
}
endsnippet

snippet asrt "symfony assert use statement for entities"
use Symfony\Component\Validator\Constraints as Assert;
endsnippet

snippet dcol "doctrine entity column"

/**
 * ${1:column_name}
 *
 * @var ${2:int}
 * @ORM\Column(name="$1", type="${3:integer}")
 */
protected $$1;
endsnippet

snippet sfft "symfony form type"
<?php

declare(strict_types=1);
`!p snip.rv = namespace(snip, path)`
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;

class `!v expand("%:t:r")` extends AbstractType
{

    /**
     * {@inheritdoc}
     */
    public function getName()
    {
        return '${1\w+/\l$0}';
    }

    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {

        // define the fields
        return $builder->add('${4:username}', 'text')

            // no field type guessing :(
            // ->add('email', 'email')

            // field type guessing! :) set second arg to null
            // ->add('email', null)
            // ->add('plainPassword', 'repeated', [
            //     'type' => 'password'
            // ]);
        ;
    }

    /**
     * {@inheritdoc}
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        // data class indicates which entity the finished form will hydrate
        $settings = ['data_class' => '${3:UserBundle\Entity\User}'];
        $resolver->setDefaults($settings);
        $this->configureOptions($resolver);
    }
}
endsnippet

snippet let "phpspec let (before each test)"

/** Runs before each test */
public function let($1)
{
    $this->beConstructedWith($2);
}
endsnippet

snippet bcw "phpspec beConstructedWith()"
$this->beConstructedWith($1);
endsnippet

snippet rpo "symfony get repo"
$this->doctrine->getRepository('DemandMediaAirlinersAppBundle:${1:EntityName}')$2
endsnippet

snippet prp "PRophet Prophesize"
$this->prophesize(${1:MyClass}::class);
endsnippet

snippet prpt "PRophet Prophesize to property"
$this->${1:myClass} = $this->prophesize(${1/\w+\s*/\u$0/}::class);
endsnippet

snippet prpr "PRophesize Rowset (Zend_Db_Table_Rowset)"
$${1:user}Row = $this->prophesize(${1/\w+/\u$0/}Row::class);
$$1Rowset = $this->prophesize(${1/\w+/\u$0/}Rowset::class);
$$1Rowset->rewind()->shouldBeCalled();
$returns = [true, false];
$$1Rowset->valid()->will(function () use (&$returns) {
    return array_shift($returns);
});
$$1Rowset->current()->willReturn($$1Row);
$$1Rowset->next()->shouldBeCalled();
$$1Rowset->key()->willReturn(0);
endsnippet

snippet rvl "reveal a prophesized object"
$this->${1:myClass}->reveal()
endsnippet

snippet prs "PRophet Should be called"
shouldBeCalled()->
endsnippet

snippet prr "PRophet will Return"
willReturn($1);
endsnippet

snippet gmb "phpunit get mock builder"
$this->getMockBuilder(${1:MyClass}::class)->getMock();
endsnippet

snippet pme "phpunit expects once (pneumonic Phpunit Mock Expects)"
expects($this->once())->$2
endsnippet

snippet pmd "phpunit disable original constructor (pneumonic phpunit mock disable)"
disableOriginalConstructor()->$1
endsnippet

snippet pms "phpunit set methods (pneumonic phpunit mock set)"
setMethods(['$1'])->
endsnippet

snippet pma "phpunit at (pneumonic Phpunit Mock At)"
expects($this->at($1))->$2
endsnippet

snippet pmm "phpunit method (pneumonic Phpunit Mock Method)"
method('${1:methodName}')->$2
endsnippet

snippet pmw "phpunit with (pneumonic Phpunit Mock With)"
with('${1:input}')->$2
endsnippet

snippet pmr "phpunit return (pneumonic Phpunit Mock Return)"
will($this->returnValue($1));
endsnippet

snippet slg "saatchi zend logger - log to file"
\Zend_Registry::get('file_logger')->info("$1");
endsnippet

snippet lg "saatchi zend logger - log to file"
\Zend_Registry::get('file_logger')->info("$1");
endsnippet

# snippet zlg "Zed log to file. Isn't there an easier way?"
# (new \Zend_Log(new \Zend_Log_Writer_Stream('/scratch/yzed/data/US/logs/ZED/exception.log')))->info($1);
# endsnippet

snippet zlg "Zed log to file"
\PalShared_Log::log("$1", 'exception.log');
endsnippet

snippet dbg "Psysh debugger"
eval(\Psy\sh());
endsnippet

snippet wl "php reduce array to only whitelisted keys"
array_filter(array_intersect_key(${1:$myArray}, array_flip($whitelist)));
endsnippet

snippet cfg "Get config value via zend framework 1"
Zend_Registry::get('config')->$1
endsnippet

snippet glg "Gallery log"
\Log::info(print_r($1, true));
endsnippet

snippet plg "Php log to debug file with no dependencies"
\Log::info(print_r($1, true));
endsnippet

snippet tc "try/catch block"
try {
    ${1://}
} catch (${2:\Exception} $e) {
    ${3:echo get_class($e) . ': ' . $e->getMessage() . "\n"; exit;}
}
endsnippet

snippet pft "PhpUnit Framework TestCase"
\PHPUnit_Framework_TestCase
endsnippet

snippet dvd "die and var_dump. useful for testing on remote"
die(var_dump($1));
endsnippet

snippet stacktrace "throw an exception with a stack trace as the message"
try {
    throw new \Exception('here');
} catch (\Exception $e) {
    throw new \Exception($e->getTraceAsString());
}
endsnippet

snippet lre "legacy php-di resolve"
\Zend_Controller_Front::getInstance()->getDispatcher()->getContainer()->get($1::class);
endsnippet

snippet pmt "partial mock for testing"
// partial mock version
$this->${1:myClass} = $this->getMockBuilder(${1/\w+\s*/\u$0/}::class)->
    setConstructorArgs([
        ${2:// TODO}
    ])->
    setMethods([
        ${3:// TODO mock methods}
    ])->
    getMock();
endsnippet

snippet tne "throw new exception for debug purposes (palette)"
throw new \Exception(print_r($1, true));
endsnippet
