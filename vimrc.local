" Modeline {{{
" vim:fdm=marker
"
" My customizations to spf13.com.
" http://mikefunk.com
" }}}

" General {{{
    set colorcolumn=80

    " soft wrapping
    command! -nargs=* Wrap set wrap linebreak nolist
    vmap <D-j> gj
    vmap <D-k> gk
    vmap <D-4> g$
    vmap <D-6> g^
    vmap <D-0> g^
    nmap <D-j> gj
    nmap <D-k> gk
    nmap <D-4> g$
    nmap <D-6> g^
    nmap <D-0> g^
    set showbreak=â†ª"
" }}}

" Unbundle {{{
    UnBundle 'Lokaltog/vim-powerline'
" }}}

" Key Mapping {{{
    " soft wrapping
    command! -nargs=* Wrap set wrap linebreak nolist
    vmap <D-j> gj
    vmap <D-k> gk
    vmap <D-4> g$
    vmap <D-6> g^
    vmap <D-0> g^
    nmap <D-j> gj
    nmap <D-k> gk
    nmap <D-4> g$
    nmap <D-6> g^
    nmap <D-0> g^

    " Make Y behave like other capitals
    nnoremap Y y$
    let mapleader = ","

    " remap keys
    map <c-n> :tabnew<cr>
    nmap <leader>bpw :BreakpointWindow<cr>
    nmap <leader>bpt :Breakpoint<cr>
    inoremap jj <Esc>
    cnoremap %% <C-R>=expand('%:h').'/'<cr>

    " vimux
    " Prompt for a command to run
    map <leader>rp :PromptVimTmuxCommand<cr>
    " Run last command executed by RunVimTmuxCommand
    map <leader>rl :RunLastVimTmuxCommand<cr>
    " Inspect runner pane
    map <leader>ri :InspectVimTmuxRunner<cr>
    " Close all other tmux panes in current window
    map <leader>rx :CloseVimTmuxPanes<cr>
    " Interrupt any command running in the runner pane

    " neosnippet
    " Plugin key-mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)

    " SuperTab like snippets behavior.
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For snippet_complete marker.
    if has('conceal')
      set conceallevel=2 concealcursor=i
    endif

    " Tell Neosnippet about the other snippets
    let g:neosnippet#snippets_directory='~/.vim/bundle/snipmate-snippets/snippets'
    let g:neosnippet#snippets_directory+=',~/.dotfiles/snippets'

    " toggle numbers for real line numbers
    map <leader>tln :NumbersToggle<cr>
" }}}

" Theme {{{
    set background=dark
    colorscheme lucius
    hi LineNr guibg=#333639 guifg=#595D5F
    hi SignColumn guibg=#333333
    hi NonText guifg=#458BA5 guibg=#333333
    hi SpecialKey guifg=#458BA5 guibg=#333333
    hi ColorColumn guibg=#121212 ctermbg=16
" }}}

" Plugins {{{
    " syntastic
    let g:syntastic_php_checkers=['php', 'phpcs', 'phpmd']

    " powerline
    set guifont=Menlo\ for\ Powerline:h12
    let g:Powerline_symbols = 'fancy' " required by powerline
    let g:Powerline_cache_enabled = 1
    let g:Powerline_cache_file = expand('$TMP/Powerline.cache')
    set t_Co=256    " required by powerline
    set laststatus=2    " required by powerline
    set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
" }}}
