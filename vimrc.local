" Modeline {{{
" vim:fdm=marker
"
" My customizations to spf13.com.
" http://mikefunk.com
" }}}

" General {{{
    " let g:snips_author = 'Michael Funk <mfunk@spinmedia.com>'

    " disable auto folding
    set nofoldenable
    " and in PIV
    let g:DisableAutoPHPFolding = 1

    " enable the preview window for omnicompletion
    " set completeopt=preview
    set previewheight=15

    " supposed to make vim faster in tmux
    set notimeout
    set ttimeout
    set timeoutlen=50

    " also supposed to make vim faster
    " set nocursorline

    " turn off relative line numbering
    set nornu
    set number

    " disable spellcheck
    set nospell

    " if the last window is a quickfix, close it
    aug QFClose
      au!
      au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
    aug END

    " 2 space indent in html
    autocmd FileType html setlocal shiftwidth=2 tabstop=2

    " visually select a search result
    nnoremap g/ //e<Enter>v??<Enter>

    " my version of fast tabs
    nnoremap gh gT
    nnoremap gl gt
    nnoremap gn :tabnew<cr>

    " set this to an html view
    nnoremap <leader>h :setlocal ft=html shiftwidth=2 tabstop=2<cr>

    " open tag in tab
    :nnoremap <silent><Leader><C-]> <C-w><C-]><C-w>T
" }}}

" Unbundle {{{

    " I don't use this now
    UnBundle 'jonathanfilip/vim-lucius'
    "
    " This is super annoying
    UnBundle 'myusuf3/numbers.vim'

    " I use ultisnips
    UnBundle 'Shougo/neosnippet'

    " I use ultisnips
    UnBundle 'honza/vim-snippets'

    " I learned that 16 color is better than 256/csapprox
    UnBundle 'godlygeek/csapprox'

    " too many slowdowns and freezes.
    " UnBundle 'Shougo/neocomplcache'

    " it slows down vim
    UnBundle 'Lokaltog/powerline'
    UnBundle 'Lokaltog/vim-powerline'

    " temporary due to crippling bug"
    " UnBundle 'bling/vim-airline'

    " I already use phpqatools
    UnBundle 'scrooloose/syntastic'

    " I use a different one
    UnBundle 'tobyS/pdv'

    " causes problems with youcompleteme
    UnBundle 'Townk/vim-autoclose'

    " I installed newer versions of the same stuff
    UnBundle 'spf13/PIV'

    " I use vim-signify instead
    " UnBundle 'airblade/vim-gitgutter'

    " various spf-13 stuff I don't use
    UnBundle 'jnwhiteh/vim-golang'
    UnBundle 'python.vim'
    UnBundle 'python_match.vim'
    UnBundle 'pythoncomplete'
    UnBundle 'briancollins/vim-jst'
    UnBundle 'derekwyatt/vim-scala'
    UnBundle 'derekwyatt/vim-sbt'
    UnBundle 'spf13/vim-gocode'
    UnBundle 'klen/python-mode'
    UnBundle 'tpope/vim-cucumber'
    UnBundle 'quentindecock/vim-cucumber-align-pipes'
    UnBundle 'beyondwords/vim-twig'
    UnBundle 'adinapoli/cumino'
    UnBundle 'Twinside/vim-haskellConceal'
    UnBundle 'travitch/hasksyn'
    UnBundle 'lukerandall/haskellmode-vim'
    UnBundle 'bitc/hdevtools'
    UnBundle 'bitc/vim-hdevtools'
    UnBundle 'dag/vim2hs'
    UnBundle 'eagletmt/ghcmod-vim'
" }}}

" Key Mapping {{{
    " soft wrapping
    command! -nargs=* Wrap set wrap linebreak nolist

    " remap keys
    " map <c-n> :tabnew<cr>
    nmap <leader>bpw :BreakpointWindow<cr>
    nmap <leader>bpt :Breakpoint<cr>
    inoremap jj <Esc>
    inoremap jk <Esc>
    " inoremap kj <Esc>

    " vimux
    " map <leader>rp :VimuxPromptCommand<cr>
    " map <leader>rc :VimuxPromptCommand<cr>cd $PWD<cr>:VimuxInspectRunner<cr>
    " map <leader>rl :VimuxRunLastCommand<cr>
    " map <leader>ri :VimuxInspectRunner<cr>
    " map <leader>rx :VimuxCloseRunner<cr>

    " resize splits, consistent with tmux bindings
    map <c-w><c-j> :resize +10<cr>
    map <c-w><c-k> :resize -10<cr>
    map <c-w><c-l> :vertical resize +10<cr>
    map <c-w><c-h> :vertical resize -10<cr>

    " open all buffers in new tabs
    map <leader>bt :tab sball<CR>
    " open existing buffer in a newtab
    map <leader>te :ls<cr>:tabedit #

    " omnicompletion like Visual Studio or NetBeans
    imap <C-Space> <C-x><C-o>
    imap <C-@> <C-Space>

    " put cursor at end of text on y and p
    vnoremap <silent> y y`]
    vnoremap <silent> p p`]
    nnoremap <silent> p p`]
" }}}

" Theme {{{
    set colorcolumn=80

    if has('gui_running')
        " use solarized
    else
        " Compatibility for Terminal
        " let g:solarized_termtrans=1
        " let g:solarized_termcolors=16

        " works in 256 mode
        let g:solarized_termtrans=0
        let g:solarized_contrast="normal"
        let g:solarized_visibility="normal"

        " colorscheme lucius
        " LuciusDark
        " LuciusDarkHighContrast
        " set background=light
        " LuciusLightHighContrast
        " hi ColorColumn guibg=#242424 ctermbg=235
        " hi TabLine ctermfg=Black
    endif

    " change the default EasyMotion shading to something more readable with Solarized
    hi link EasyMotionTarget ErrorMsg
    hi link EasyMotionShade  Comment

    " vim-gitgutter better background
    highlight clear SignColumn
" }}}

" Plugins {{{
    " NERDTree {{{
        " extra space in NERDCommenter comments
        let g:NERDSpaceDelims="1"

        " NERDTree expand dirs with one child
        " let NERDTreeCasadeOpenSingleChildDir=1

        " NERDTree change keyboard shortcuts to use vim-nerdtree-tabs
        " map <C-e> :NERDTreeTabsToggle<CR>
    " }}}

    " phpqa {{{
        " PHPMD Ruleset
        if filereadable("~/.dotfiles/phpmd_ruleset.xml")
            let g:phpqa_messdetector_ruleset = "~/.dotfiles/phpmd_ruleset.xml"
        endif

        " Clover code coverage XML file
        if filereadable("/Library/WebServer/Documents/einstein2/build/logs/clover.xml")
            let g:phpqa_codecoverage_file = "/Library/WebServer/Documents/einstein2/build/logs/clover.xml"
        endif

        " Show code coverage on load (default = 0)
        let g:phpqa_codecoverage_autorun=1

        " path to php
        if filereadable('/usr/bin/php')
            let g:phpqa_php_cmd='/usr/bin/php'
        endif
        if filereadable('/usr/local/php5/bin/php')
            let g:phpqa_php_cmd='/usr/local/php5/bin/php'
        endif

        " standard
        let g:phpqa_codesniffer_args = "--standard=psr2"
    " }}}

    " cd to project root
    nnoremap <leader>dp :ProjectRootCD<cr>

    " tabular
    nmap <leader>a> :Tabularize /=><cr>
    vmap <leader>a> :Tabularize /=><cr>

    " PDV comment parameters
    let g:pdv_cfg_Package   = "Example"
    let g:pdv_cfg_Author    = "Michael Funk <mfunk@internetbrands.com>"
    let g:pdv_cfg_Copyright = "Copyright 2013 Internet Brands, Inc. All Rights Reserved."
    let g:pdv_cfg_License   = ""

    " reset file to HEAD in fugitive commit window
    autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>

    " phpunitqf
    " let g:phpunit_cmd = "cd ~/Sites/einstein2 && php artisan dump-autoload && php artisan clear-compiled && phpunit"

    " add use statements
    " inoremap <Leader>u <C-O>:call PhpInsertUse()<CR>
    " noremap <Leader>u :call PhpInsertUse()<CR>

    " make class names fully qualified
    " inoremap <Leader>e <C-O>:call PhpExpandClass()<CR>
    " noremap <Leader>e :call PhpExpandClass()<CR>

    " for mouseterm
    if has("mouse")
        set mouse=a
    endif

    " turn off neosnippet mapping
    let g:spf13_no_neosnippet_expand=1

    " phpcomplete omni complete for neocomplcache
    autocmd FileType php set omnifunc=phpcomplete#CompletePHP

    " neocomplcache disable auto popup
    " let g:neocomplcache_disable_auto_complete = 1

    " preview breaks youcompleteme
    set completeopt-=preview

    " set guifont to powerline compatible for macvim
    " set guifont=Menlo\ for\ Powerline:h12
    " set guifont=Meslo\ LG\ S\ Regular\ for\ Powerline:h14
    " let g:Powerline_symbols = 'fancy'

    " syntastic
    " set statusline+=%#warningmsg#
    " set statusline+=%{SyntasticStatuslineFlag()}
    " set statusline+=%*
    " let g:syntastic_php_checkers=['php']
    " let g:syntastic_php_phpmd_post_args = '~/.dotfiles/phpmd_ruleset.xml'

    "filename
    hi default link User1 Identifier"blue
    " flags
    hi default link User2 Statement"green
    " errors
    hi default link User3 Error"orange
    " fugitive
    hi default link User4 Special

    " statusline
    " set statusline=
    " set statusline+=\ ⌸\ %F\ "full file path
    " set statusline+=%5*⮀
    " set statusline+=%1*" Switch to colour User1

    " fugitive statusline
    " set statusline+=%{strlen(fugitive#statusline())>0?'\ ⭠\ ':''}
    " set statusline+=%{fugitive#head()}
    " set statusline+=%{&ro?'\ ⭤':''}%{&mod?'\ ✚':''}%<
    " set statusline+=%{strlen(fugitive#statusline())>0?'\ \ ⮁\ ':''}

    " align right stuff
    " set statusline+=%=" align right
    " set statusline+=%2*" Switch to colour User2
    " set statusline+=\ %{tagbar#currenttag('⮃\ %s\ ','','f')}
    " set statusline+=%5*⮂
    " set statusline+=%*" Switch to default colour
    " set statusline+=\ %{&filetype}\ ⮃
    " set statusline+=\ %p%%\ ⮃
    " set statusline+=\ ⭡\ %l:%c\ 

    " default statusline with fugitive
    " set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

    " tabgar show current function in footer
    " set statusline+=\ %{tagbar#currenttag('[%s]','')}

    " set quickfix window height automatically
    au FileType qf call AdjustWindowHeight(3, 5)
    function! AdjustWindowHeight(minheight, maxheight)
      exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
    endfunction

    " ctrlp extensions
    " let g:ctrlp_extensions = ['tag', 'funky']
    let g:ctrlp_extensions = ['tag']

    " ctrlpfunky shortcuts
    " nnoremap <Leader>fu :CtrlPFunky<Cr>
    " narrow the list down with a word under cursor
    " nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>"

    " since , replaces leader, use \ to go back in a [f]ind
    noremap \ ,

    " pdv map phpdoc
    " if filereadable("$HOME/.vim/bundle/pdv/templates")
        " let g:pdv_template_dir = '$HOME/.vim/bundle/pdv/templates'
    " endif
    " nnoremap <buffer> <Leader>pd :call pdv#DocumentCurrentLine()<CR>

    " ultisnips start with my ultisnips
    let g:UltiSnipsDontReverseSearchPath="1"
    let g:UltiSnipsEditSplit="vertical"
    let g:UltiSnipsListSnippets='<c-L>'
    let g:UltiSnipsExpandTrigger='<c-J>'

    " pdv 1.1.1
    " let g:pdv_cfg_Package   = 'Einstein2'
    " let g:pdv_cfg_Author    = 'Michael Funk <mfunk@christianpublishing.com>'
    " let g:pdv_cfg_Copyright = '2013 Xulon Press, Inc. All Rights Reserved.'
    " let g:pdv_cfg_ClassTags = ["package","author","copyright"]
    " let g:pdv_cfg_folds = 0
    " let g:pdv_cfg_CommentEnd = ""

    au BufRead,BufNewFile *.php inoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
    au BufRead,BufNewFile *.php nnoremap <buffer> <leader>pd :call PhpDocSingle()<CR>
    au BufRead,BufNewFile *.php vnoremap <buffer> <leader>pd :call PhpDocRange()<CR>

    " vim-airline
    let g:airline_powerline_fonts=1
    let g:airline_theme = 'solarized'
    let g:airline#extensions#tagbar#enabled = 1
    " let g:airline_left_sep = '⮀'
    " let g:airline_right_sep = '⮂'
    let g:airline_left_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_powerline_fonts=0

    " advanced tabline vertical separators
    " let g:airline#extensions#tabline#enabled = 1
    " let g:airline#extensions#tabline#left_sep = ' '
    " let g:airline#extensions#tabline#left_alt_sep = '|'

    " tagbar autofocus is the whole point of tagbar
    let g:tagbar_autofocus = 1

    " phpctags
    let g:tagbar_phpctags_memory_limit = '512M'

    " vim-ctrlp-tjump
    nnoremap <c-]> :CtrlPtjump<cr>

    " fugitive
    " open quickfix window on git grep
    autocmd QuickFixCmdPost *grep* cwindow

    "ctags autogen on save
    " au BufWritePost *.php silent! !ctags --fields=+aimS --languages=php --PHP-kinds=+cf 2>/dev/null &

    " tag generation command (not working)
    " set exrc
    " set secure
    let g:vim_tags_project_tags_command = 'ctags -R --fields=+aimS --languages=php --PHP-kinds=+cf {OPTIONS} {DIRECTORY} 2>/dev/null'

    " gitgutter is wigging out with 7.4 and airline for some reason
    " https://github.com/airblade/vim-gitgutter/issues/106
    let g:gitgutter_realtime = 0
" }}}

