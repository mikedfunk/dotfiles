" Modeline {{{
" vim:fdm=marker
"
" My customizations to spf13.com.
" http://mikefunk.com
" }}}

" General {{{
    let g:snips_author = 'Michael Funk <mfunk@christianpublishing.com>'

    " set guifont to powerline compatible for macvim
    set guifont=Menlo\ for\ Powerline:h12

    " disable auto folding
    set nofoldenable
    let g:DisableAutoPHPFolding = 1

    " enable the preview window for omnicompletion
    " set completeopt=preview
    set previewheight=15

    " supposed to make vim faster in tmux
    set notimeout
    set ttimeout
    set timeoutlen=50
" }}}

" Unbundle {{{
    UnBundle 'myusuf3/numbers.vim'
    UnBundle 'Shougo/neosnippet'
    UnBundle 'honza/vim-snippets'
    " UnBundle 'Shougo/neocomplcache'
" }}}

" Key Mapping {{{
    " soft wrapping
    command! -nargs=* Wrap set wrap linebreak nolist

    " remap keys
    map <c-n> :tabnew<cr>
    nmap <leader>bpw :BreakpointWindow<cr>
    nmap <leader>bpt :Breakpoint<cr>
    inoremap jj <Esc>

    " vimux
    map <leader>rp :PromptVimTmuxCommand<cr>
    map <leader>rl :RunLastVimTmuxCommand<cr>
    map <leader>ri :InspectVimTmuxRunner<cr>
    map <leader>rx :CloseVimTmuxPanes<cr>

    " resize splits, consistent with tmux bindings
    map <c-w><c-j> :resize +10<cr>
    map <c-w><c-k> :resize -10<cr>
    map <c-w><c-l> :vertical resize +10<cr>
    map <c-w><c-h> :vertical resize -10<cr>

    " open all buffers in new tabs
    map <leader>bt :tab sball<CR>

    " omnicompletion like Visual Studio or NetBeans
    imap <C-Space> <C-x><C-o>
    imap <C-@> <C-Space>

    " open and close ptag window
    nmap <leader>pt <c-w><c-}>
    nmap <leader>pc :pclose
" }}}

" Theme {{{
    if has('gui_running')
        " use solarized
    else
        colorscheme lucius
        LuciusDark
        set colorcolumn=80
        hi ColorColumn guibg=#242424 ctermbg=235
    endif
" }}}

" Plugins {{{
    " extra space in NERDCommenter comments
    let g:NERDSpaceDelims="1"

    " NERDTree expand dirs with one child
    let NERDTreeCasadeOpenSingleChildDir=1

    " phpqa {{{
        " PHPMD Ruleset
        let g:phpqa_messdetector_ruleset = "~/.dotfiles/phpmd_ruleset.xml"

        " Clover code coverage XML file
        let g:phpqa_codecoverage_file = "/Library/WebServer/Documents/einstein2/build/logs/clover.xml"

        " Show code coverage on load (default = 0)
        let g:phpqa_codecoverage_autorun=1

        " phpcs fixer location
        let g:php_cs_fixer_path = "~/.dotfiles/php-cs-fixer.phar"
    " }}}

    " cd to project root
    nnoremap <leader>dp :ProjectRootCD<cr>

    " tabular =>
    nmap <leader>a> :Tabularize /=><cr>
    vmap <leader>a> :Tabularize /=><cr>

    " PDV comment parameters
    let g:pdv_cfg_Package = "Einstein2"
    let g:pdv_cfg_Author = "Michael Funk <mfunk@christianpublishing.com>"
    let g:pdv_cfg_Copyright = "Copyright 2013 Xulon Press, Inc. All Rights Reserved."
    let g:pdv_cfg_License = ""

    " reset file to HEAD in fugitive commit window
    autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>

    " phpunitqf
    " let g:phpunit_cmd = "cd ~/Sites/einstein2 && php artisan dump-autoload && php artisan clear-compiled && phpunit"

    " add use statements
    inoremap <Leader>u <C-O>:call PhpInsertUse()<CR>
    noremap <Leader>u :call PhpInsertUse()<CR>

    " make class names fully qualified
    inoremap <Leader>e <C-O>:call PhpExpandClass()<CR>
    noremap <Leader>e :call PhpExpandClass()<CR>

    " for mouseterm
    if has("mouse")
        set mouse=a
    endif
" }}}
